/* Generated by Cython 0.20 on Sun Jun  1 17:53:22 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#define __Pyx_PyUnicode_Concat(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
    PyNumber_Add(a, b) : PyUnicode_Concat(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__cmonster___cmonster_ast
#define __PYX_HAVE_API__cmonster___cmonster_ast
#include "stdint.h"
#include "llvm/ADT/APInt.h"
#include "clang/Basic/SourceLocation.h"
#include "clang/Basic/SourceManager.h"
#include "clang/AST/ASTContext.h"
#include "string.h"
#include "stdio.h"
#include "pythread.h"
#include "clang/AST/Stmt.h"
#include "clang/AST/StmtIterator.h"
#include "clang/AST/Type.h"
#include "string"
#include "clang/AST/DeclarationName.h"
#include "clang/AST/DeclBase.h"
#include "clang/AST/Decl.h"
#include "clang/AST/OperationKinds.h"
#include "clang/AST/Expr.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "ast.decls.pxi",
  "ast.source.pxi",
  "ast.types.pxi",
  "ast.declcontext.pxi",
  "ast.statements.pxi",
  "ast.exprs.pxi",
  "ast.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList;
struct __pyx_obj_8cmonster_13_cmonster_ast_StatementRange;
struct __pyx_obj_8cmonster_13_cmonster_ast_Statement;
struct __pyx_obj_8cmonster_13_cmonster_ast_Expr;
struct __pyx_obj_8cmonster_13_cmonster_ast_UnaryOperator;
struct __pyx_obj_8cmonster_13_cmonster_ast_Decl;
struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl;
struct __pyx_obj_8cmonster_13_cmonster_ast_DeclRefExpr;
struct __pyx_obj_8cmonster_13_cmonster_ast_ReturnStatement;
struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__;
struct __pyx_obj_8cmonster_13_cmonster_ast_Type;
struct __pyx_obj_8cmonster_13_cmonster_ast_BuiltinType;
struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement;
struct __pyx_obj_8cmonster_13_cmonster_ast_NamedDecl;
struct __pyx_obj_8cmonster_13_cmonster_ast_ValueDecl;
struct __pyx_obj_8cmonster_13_cmonster_ast_DeclaratorDecl;
struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionDecl;
struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionType;
struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionNoProtoType;
struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDeclIterator;
struct __pyx_obj_8cmonster_13_cmonster_ast_QualType;
struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionProtoType;
struct __pyx_obj_8cmonster_13_cmonster_ast_StatementIterator;
struct __pyx_obj_8cmonster_13_cmonster_ast_IntegerLiteral;
struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList;
struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext;
struct __pyx_obj_8cmonster_13_cmonster_ast_VarDecl;
struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDecl;
struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator;
struct __pyx_obj_8cmonster_13_cmonster_ast_CastExpr;
struct __pyx_obj_8cmonster_13_cmonster_ast_ImplicitCastExpr;
struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement;

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":78
 * 
 * 
 * cdef class StatementList:             # <<<<<<<<<<<<<<
 *     cdef clang.astcontext.ASTContext *astctx
 *     cdef clang.statements.Stmt **begin
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList {
  PyObject_HEAD
  clang::ASTContext *astctx;
  clang::Stmt **begin;
  clang::Stmt **end;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":54
 * 
 * 
 * cdef class StatementRange:             # <<<<<<<<<<<<<<
 *     cdef clang.statements.StmtRange *ptr
 *     def __dealloc__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_StatementRange {
  PyObject_HEAD
  clang::StmtRange *ptr;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":24
 * 
 * 
 * cdef class Statement:             # <<<<<<<<<<<<<<
 *     cdef clang.statements.Stmt *ptr
 *     cdef clang.astcontext.ASTContext *astctx
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_Statement {
  PyObject_HEAD
  clang::Stmt *ptr;
  clang::ASTContext *astctx;
};

struct __pyx_obj_8cmonster_13_cmonster_ast_Expr {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Statement __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":84
 * 
 * 
 * cdef class UnaryOperator(Expr):             # <<<<<<<<<<<<<<
 *     PostInc = UnaryOperatorKinds[clang.exprs.UO_PostInc]
 *     PostDec = UnaryOperatorKinds[clang.exprs.UO_PostDec]
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_UnaryOperator {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Expr __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":27
 * # Decl base class.
 * 
 * cdef class Decl:             # <<<<<<<<<<<<<<
 *     cdef clang.decls.Decl *ptr
 * 
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_Decl {
  PyObject_HEAD
  struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl *__pyx_vtab;
  clang::Decl *ptr;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":111
 * # TranslationUnitDecl
 * 
 * cdef class TranslationUnitDecl(Decl):             # <<<<<<<<<<<<<<
 *     cdef object parser
 *     cdef DeclContext declcontext
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Decl __pyx_base;
  PyObject *parser;
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *declcontext;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":115
 * ###############################################################################
 * 
 * cdef class DeclRefExpr(Expr):             # <<<<<<<<<<<<<<
 *     property decl:
 *         def __get__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_DeclRefExpr {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Expr __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":138
 * 
 * 
 * cdef class ReturnStatement(Statement):             # <<<<<<<<<<<<<<
 *     property return_value:
 *         def __get__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_ReturnStatement {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Statement __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":41
 *             return create_SourceLocation(self.ptr.getLocStart(), srcmgr)
 *     property children:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             #cdef StatementRange range_ = StatementRange()
 *             #range_.ptr = new clang.statements.StmtRange(self.ptr.children())
 */
struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ {
  PyObject_HEAD
  clang::StmtRange *__pyx_v_range_;
  struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_self;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":23
 * # SOFTWARE.
 * 
 * cdef class Type:             # <<<<<<<<<<<<<<
 *     cdef clang.types.const_Type_ptr ptr
 *     def __repr__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_Type {
  PyObject_HEAD
  const clang::Type* ptr;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":76
 * add_type_kind("UnknownAny", clang.types.UnknownAny)
 * 
 * cdef class BuiltinType(Type):             # <<<<<<<<<<<<<<
 *     Void = BuiltinTypeKinds[clang.types.Void]
 *     Bool = BuiltinTypeKinds[clang.types.Bool]
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_BuiltinType {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Type __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":105
 * 
 * 
 * cdef class CompoundStatement(Statement):             # <<<<<<<<<<<<<<
 *     property body:
 *         def __get__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Statement __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":76
 * ###############################################################################
 * 
 * cdef class NamedDecl(Decl):             # <<<<<<<<<<<<<<
 *     property name:
 *         def __get__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_NamedDecl {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Decl __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":84
 * 
 * 
 * cdef class ValueDecl(NamedDecl):             # <<<<<<<<<<<<<<
 *     property type:
 *         def __get__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_ValueDecl {
  struct __pyx_obj_8cmonster_13_cmonster_ast_NamedDecl __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":91
 * 
 * 
 * cdef class DeclaratorDecl(ValueDecl):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_DeclaratorDecl {
  struct __pyx_obj_8cmonster_13_cmonster_ast_ValueDecl __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":164
 * 
 * 
 * cdef class FunctionDecl(DeclaratorDecl):             # <<<<<<<<<<<<<<
 *     property variadic:
 *         def __get__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionDecl {
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclaratorDecl __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":118
 * 
 * 
 * cdef class FunctionType(Type):             # <<<<<<<<<<<<<<
 *     property result_type:
 *         def __get__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionType {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Type __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":129
 * 
 * 
 * cdef class FunctionNoProtoType(FunctionType):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionNoProtoType {
  struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionType __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":135
 * ###############################################################################
 * 
 * cdef class ParmVarDeclIterator:             # <<<<<<<<<<<<<<
 *     cdef clang.decls.ParmVarDecl **begin
 *     cdef clang.decls.ParmVarDecl **end
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDeclIterator {
  PyObject_HEAD
  clang::ParmVarDecl **begin;
  clang::ParmVarDecl **end;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":143
 * 
 * 
 * cdef class QualType:             # <<<<<<<<<<<<<<
 *     cdef clang.types.QualType *ptr
 *     def __dealloc__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_QualType {
  PyObject_HEAD
  clang::QualType *ptr;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":125
 * 
 * 
 * cdef class FunctionProtoType(FunctionType):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionProtoType {
  struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionType __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":62
 * 
 * 
 * cdef class StatementIterator:             # <<<<<<<<<<<<<<
 *     cdef clang.astcontext.ASTContext *astctx
 *     cdef clang.statements.Stmt **begin
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_StatementIterator {
  PyObject_HEAD
  clang::ASTContext *astctx;
  clang::Stmt **begin;
  clang::Stmt **end;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":44
 * ###############################################################################
 * 
 * cdef class IntegerLiteral(Expr):             # <<<<<<<<<<<<<<
 *     property value:
 *         def __get__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_IntegerLiteral {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Expr __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":147
 * 
 * 
 * cdef class FunctionParameterList:             # <<<<<<<<<<<<<<
 *     cdef clang.decls.FunctionDecl *function
 *     def __len__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList {
  PyObject_HEAD
  clang::FunctionDecl *function;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":57
 * 
 * 
 * cdef class DeclContext:             # <<<<<<<<<<<<<<
 *     cdef readonly object translation_unit
 *     cdef clang.decls.DeclContext *ptr
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext {
  PyObject_HEAD
  PyObject *translation_unit;
  clang::DeclContext *ptr;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":95
 * 
 * 
 * cdef class VarDecl(DeclaratorDecl):             # <<<<<<<<<<<<<<
 *     property initializer:
 *         def __get__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_VarDecl {
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclaratorDecl __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":104
 * 
 * 
 * cdef class ParmVarDecl(VarDecl):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDecl {
  struct __pyx_obj_8cmonster_13_cmonster_ast_VarDecl __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":23
 * # SOFTWARE.
 * 
 * cdef class DeclarationIterator:             # <<<<<<<<<<<<<<
 *     """
 *     Iterator for declarations in a DeclContext. There's no random access to
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator {
  PyObject_HEAD
  PyObject *translation_unit;
  clang::DeclContext::decl_iterator *begin;
  clang::DeclContext::decl_iterator *next_;
  clang::DeclContext::decl_iterator *end;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":30
 * 
 * 
 * cdef class CastExpr(Expr):             # <<<<<<<<<<<<<<
 *     property subexpr:
 *         def __get__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_CastExpr {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Expr __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":39
 * 
 * 
 * cdef class ImplicitCastExpr(CastExpr):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_ImplicitCastExpr {
  struct __pyx_obj_8cmonster_13_cmonster_ast_CastExpr __pyx_base;
};


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":146
 * 
 * 
 * cdef class IfStatement(Statement):             # <<<<<<<<<<<<<<
 *     property condition:
 *         def __get__(self):
 */
struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Statement __pyx_base;
};



/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":27
 * # Decl base class.
 * 
 * cdef class Decl:             # <<<<<<<<<<<<<<
 *     cdef clang.decls.Decl *ptr
 * 
 */

struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl {
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *(*__pyx___getDeclContext)(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *);
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl *__pyx_vtabptr_8cmonster_13_cmonster_ast_Decl;


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":76
 * ###############################################################################
 * 
 * cdef class NamedDecl(Decl):             # <<<<<<<<<<<<<<
 *     property name:
 *         def __get__(self):
 */

struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_NamedDecl {
  struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl __pyx_base;
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_NamedDecl *__pyx_vtabptr_8cmonster_13_cmonster_ast_NamedDecl;


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":84
 * 
 * 
 * cdef class ValueDecl(NamedDecl):             # <<<<<<<<<<<<<<
 *     property type:
 *         def __get__(self):
 */

struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_ValueDecl {
  struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_NamedDecl __pyx_base;
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_ValueDecl *__pyx_vtabptr_8cmonster_13_cmonster_ast_ValueDecl;


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":91
 * 
 * 
 * cdef class DeclaratorDecl(ValueDecl):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_DeclaratorDecl {
  struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_ValueDecl __pyx_base;
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_DeclaratorDecl *__pyx_vtabptr_8cmonster_13_cmonster_ast_DeclaratorDecl;


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":164
 * 
 * 
 * cdef class FunctionDecl(DeclaratorDecl):             # <<<<<<<<<<<<<<
 *     property variadic:
 *         def __get__(self):
 */

struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_FunctionDecl {
  struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_DeclaratorDecl __pyx_base;
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_FunctionDecl *__pyx_vtabptr_8cmonster_13_cmonster_ast_FunctionDecl;


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":95
 * 
 * 
 * cdef class VarDecl(DeclaratorDecl):             # <<<<<<<<<<<<<<
 *     property initializer:
 *         def __get__(self):
 */

struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_VarDecl {
  struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_DeclaratorDecl __pyx_base;
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_VarDecl *__pyx_vtabptr_8cmonster_13_cmonster_ast_VarDecl;


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":104
 * 
 * 
 * cdef class ParmVarDecl(VarDecl):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_ParmVarDecl {
  struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_VarDecl __pyx_base;
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_ParmVarDecl *__pyx_vtabptr_8cmonster_13_cmonster_ast_ParmVarDecl;


/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":111
 * # TranslationUnitDecl
 * 
 * cdef class TranslationUnitDecl(Decl):             # <<<<<<<<<<<<<<
 *     cdef object parser
 *     cdef DeclContext declcontext
 */

struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_TranslationUnitDecl {
  struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl __pyx_base;
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_TranslationUnitDecl *__pyx_vtabptr_8cmonster_13_cmonster_ast_TranslationUnitDecl;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyBytes_AS_STRING(string), PyBytes_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

#include <string.h>

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
    int flags;
    PyObject *func_dict;
    PyObject *func_weakreflist;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj; /* No-args super() class cell */
    void *defaults;
    int defaults_pyobjects;
    PyObject *defaults_tuple;   /* Const defaults tuple */
    PyObject *defaults_kwdict;  /* Const kwonly defaults dict */
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations; /* function annotations dict */
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __Pyx_CyFunction_init(void);

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc); /*proto*/
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static PyObject* __Pyx_PyObject_CallMethodTuple(PyObject* obj, PyObject* method_name, PyObject* args) {
    PyObject *method, *result = NULL;
    if (unlikely(!args)) return NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
    result = PyObject_Call(method, args, NULL);
    Py_DECREF(method);
bad:
    Py_DECREF(args);
    return result;
}
#define __Pyx_PyObject_CallMethod3(obj, name, arg1, arg2, arg3) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(3, arg1, arg2, arg3))
#define __Pyx_PyObject_CallMethod2(obj, name, arg1, arg2) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(2, arg1, arg2))
#define __Pyx_PyObject_CallMethod1(obj, name, arg1) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(1, arg1))
#define __Pyx_PyObject_CallMethod0(obj, name) \
    __Pyx_PyObject_CallMethodTuple(obj, name, (Py_INCREF(__pyx_empty_tuple), __pyx_empty_tuple))

#define __Pyx_Generator_USED
#include <structmember.h>
#include <frameobject.h>
typedef PyObject *(*__pyx_generator_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_generator_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    int resume_label;
    char is_running;
} __pyx_GeneratorObject;
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure);
static int __pyx_Generator_init(void);
static int __Pyx_Generator_clear(PyObject* self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'llvm' */

/* Module declarations from 'clang.source' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython' */

/* Module declarations from 'clang.statements' */

/* Module declarations from 'clang.types' */

/* Module declarations from 'clang.decls' */

/* Module declarations from 'clang.exprs' */

/* Module declarations from 'clang' */

/* Module declarations from 'clang.astcontext' */

/* Module declarations from 'cmonster._cmonster_ast' */
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_StatementList = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_StatementRange = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_Statement = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_Expr = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_Decl = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_TranslationUnitDecl = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_DeclRefExpr = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_ReturnStatement = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_Type = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_CompoundStatement = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_NamedDecl = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_ValueDecl = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_DeclaratorDecl = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_FunctionDecl = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_FunctionType = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_FunctionNoProtoType = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_ParmVarDeclIterator = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_QualType = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_FunctionProtoType = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_StatementIterator = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_IntegerLiteral = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_FunctionParameterList = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_DeclContext = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_VarDecl = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_ParmVarDecl = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_DeclarationIterator = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_CastExpr = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_ImplicitCastExpr = 0;
static PyTypeObject *__pyx_ptype_8cmonster_13_cmonster_ast_IfStatement = 0;
static PyObject *__pyx_f_8cmonster_13_cmonster_ast_create_SourceLocation(clang::SourceLocation, clang::SourceManager *); /*proto*/
static PyObject *__pyx_f_8cmonster_13_cmonster_ast_create_Type(const clang::Type*); /*proto*/
static PyObject *__pyx_f_8cmonster_13_cmonster_ast_create_QualType(clang::QualType); /*proto*/
static struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_f_8cmonster_13_cmonster_ast_create_Decl(clang::Decl *); /*proto*/
static struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_f_8cmonster_13_cmonster_ast_create_Statement(clang::Stmt *, clang::ASTContext *); /*proto*/
#define __Pyx_MODULE_NAME "cmonster._cmonster_ast"
int __pyx_module_is_main_cmonster___cmonster_ast = 0;

/* Implementation of 'cmonster._cmonster_ast' */
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Type___repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_Type *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Type_2__str__(struct __pyx_obj_8cmonster_13_cmonster_ast_Type *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Type_7builtin___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Type *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_15BuiltinTypeKind___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kind, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_15BuiltinTypeKind_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_add_type_kind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11BuiltinType_4kind___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_BuiltinType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11BuiltinType___repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_BuiltinType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_12FunctionType_11result_type___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionType *__pyx_v_self); /* proto */
static void __pyx_pf_8cmonster_13_cmonster_ast_8QualType___dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_QualType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_8QualType_2__repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_QualType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_8QualType_4type___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_QualType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl___str__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_2__repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_8location___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_4kind___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_9kind_name___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_4body___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_12decl_context___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9NamedDecl_4name___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_NamedDecl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9ValueDecl_4type___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_ValueDecl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_7VarDecl_11initializer___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_VarDecl *__pyx_v_self); /* proto */
static int __pyx_pf_8cmonster_13_cmonster_ast_19TranslationUnitDecl___init__(struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *__pyx_v_self, PyObject *__pyx_v_parser, PyObject *__pyx_v_capsule); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_19TranslationUnitDecl_12declarations___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_19ParmVarDeclIterator___next__(struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDeclIterator *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList___len__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList_2__iter__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList_4__repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList_6__getitem__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_12FunctionDecl_8variadic___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionDecl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_12FunctionDecl_10parameters___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionDecl *__pyx_v_self); /* proto */
static int __pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator___cinit__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *__pyx_v_self, PyObject *__pyx_v_translation_unit); /* proto */
static void __pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_2__dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_4__iter__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_6__next__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_16translation_unit___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *__pyx_v_self); /* proto */
static int __pyx_pf_8cmonster_13_cmonster_ast_11DeclContext___cinit__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *__pyx_v_self, PyObject *__pyx_v_translation_unit); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11DeclContext_12declarations___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11DeclContext_16translation_unit___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *__pyx_v_self); /* proto */
static void __pyx_pf_8cmonster_13_cmonster_ast_9Statement___dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9Statement_2__repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9Statement_10class_name___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9Statement_8location___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9Statement_8children___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_self); /* proto */
static void __pyx_pf_8cmonster_13_cmonster_ast_14StatementRange___dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementRange *__pyx_v_self); /* proto */
static int __pyx_pf_8cmonster_13_cmonster_ast_14StatementRange_2__nonzero__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementRange *__pyx_v_self); /* proto */
static void __pyx_pf_8cmonster_13_cmonster_ast_17StatementIterator___dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17StatementIterator_2__next__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementIterator *__pyx_v_self); /* proto */
static void __pyx_pf_8cmonster_13_cmonster_ast_13StatementList___dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8cmonster_13_cmonster_ast_13StatementList_2__len__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_13StatementList_4__iter__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_13StatementList_6__repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_13StatementList_8__getitem__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_4body___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_21left_bracket_location___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_22right_bracket_location___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement___len__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_2__iter__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_4__getitem__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_15ReturnStatement_12return_value___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_ReturnStatement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11IfStatement_9condition___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11IfStatement_4then___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11IfStatement_5else____get__(struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Expr_4type___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Expr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_8CastExpr_7subexpr___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_CastExpr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_14IntegerLiteral_5value___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_IntegerLiteral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17UnaryOperatorKind___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kind, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17UnaryOperatorKind_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_2add_unaryoperator_kind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_13UnaryOperator_6opcode___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_UnaryOperator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_13UnaryOperator_7subexpr___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_UnaryOperator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11DeclRefExpr_4decl___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclRefExpr *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_StatementList(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_StatementRange(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_Statement(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_Expr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_UnaryOperator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_Decl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_TranslationUnitDecl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_DeclRefExpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_ReturnStatement(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast___pyx_scope_struct____get__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_Type(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_BuiltinType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_CompoundStatement(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_NamedDecl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_ValueDecl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_DeclaratorDecl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_FunctionDecl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_FunctionType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_FunctionNoProtoType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_ParmVarDeclIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_QualType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_FunctionProtoType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_StatementIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_IntegerLiteral(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_FunctionParameterList(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_DeclContext(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_VarDecl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_ParmVarDecl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_DeclarationIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_CastExpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_ImplicitCastExpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_IfStatement(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_Int[] = "Int";
static char __pyx_k_Not[] = "Not";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_get[] = "get";
static char __pyx_k_Bool[] = "Bool";
static char __pyx_k_Imag[] = "Imag";
static char __pyx_k_LNot[] = "LNot";
static char __pyx_k_Long[] = "Long";
static char __pyx_k_Plus[] = "Plus";
static char __pyx_k_Real[] = "Real";
static char __pyx_k_UInt[] = "UInt";
static char __pyx_k_Void[] = "Void";
static char __pyx_k_args[] = "args";
static char __pyx_k_body[] = "body";
static char __pyx_k_init[] = "__init__";
static char __pyx_k_kind[] = "kind";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "name";
static char __pyx_k_repr[] = "__repr__";
static char __pyx_k_self[] = "self";
static char __pyx_k_send[] = "send";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_type[] = "type";
static char __pyx_k_Deref[] = "Deref";
static char __pyx_k_Float[] = "Float";
static char __pyx_k_Minus[] = "Minus";
static char __pyx_k_SChar[] = "SChar";
static char __pyx_k_Short[] = "Short";
static char __pyx_k_UChar[] = "UChar";
static char __pyx_k_ULong[] = "ULong";
static char __pyx_k_close[] = "close";
static char __pyx_k_throw[] = "throw";
static char __pyx_k_value[] = "value";
static char __pyx_k_AddrOf[] = "AddrOf";
static char __pyx_k_Char16[] = "Char16";
static char __pyx_k_Char32[] = "Char32";
static char __pyx_k_Char_S[] = "Char_S";
static char __pyx_k_Char_U[] = "Char_U";
static char __pyx_k_Double[] = "Double";
static char __pyx_k_Int128[] = "Int128";
static char __pyx_k_ObjCId[] = "ObjCId";
static char __pyx_k_PreDec[] = "PreDec";
static char __pyx_k_PreInc[] = "PreInc";
static char __pyx_k_Type_s[] = "Type(%s)";
static char __pyx_k_UShort[] = "UShort";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_parser[] = "parser";
static char __pyx_k_NullPtr[] = "NullPtr";
static char __pyx_k_ObjCSel[] = "ObjCSel";
static char __pyx_k_PostDec[] = "PostDec";
static char __pyx_k_PostInc[] = "PostInc";
static char __pyx_k_UInt128[] = "UInt128";
static char __pyx_k_WChar_S[] = "WChar_S";
static char __pyx_k_WChar_U[] = "WChar_U";
static char __pyx_k_capsule[] = "capsule";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_LongLong[] = "LongLong";
static char __pyx_k_Overload[] = "Overload";
static char __pyx_k_cmonster[] = "cmonster";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_Dependent[] = "Dependent";
static char __pyx_k_Extension[] = "Extension";
static char __pyx_k_ObjCClass[] = "ObjCClass";
static char __pyx_k_ULongLong[] = "ULongLong";
static char __pyx_k_kind_name[] = "kind_name";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_IndexError[] = "IndexError";
static char __pyx_k_LongDouble[] = "LongDouble";
static char __pyx_k_QualType_r[] = "QualType(%r)";
static char __pyx_k_UnknownAny[] = "UnknownAny";
static char __pyx_k_class_name[] = "class_name";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_BoundMember[] = "BoundMember";
static char __pyx_k_Statement_s[] = "Statement(%s)";
static char __pyx_k_decl_context[] = "decl_context";
static char __pyx_k_declarations[] = "declarations";
static char __pyx_k_BuiltinType_r[] = "BuiltinType(%r)";
static char __pyx_k_StopIteration[] = "StopIteration";
static char __pyx_k_add_type_kind[] = "add_type_kind";
static char __pyx_k_SourceLocation[] = "SourceLocation";
static char __pyx_k_BuiltinTypeKind[] = "BuiltinTypeKind";
static char __pyx_k_BuiltinTypeKinds[] = "BuiltinTypeKinds";
static char __pyx_k_translation_unit[] = "translation_unit";
static char __pyx_k_Decl_s_ptr_0x_08x[] = "Decl(%s, ptr=0x%08x)";
static char __pyx_k_UnaryOperatorKind[] = "UnaryOperatorKind";
static char __pyx_k_Index_out_of_range[] = "Index out of range";
static char __pyx_k_UnaryOperatorKinds[] = "UnaryOperatorKinds";
static char __pyx_k_BuiltinTypeKind_d_s[] = "BuiltinTypeKind(%d, %s)";
static char __pyx_k_UnaryOperatorKind_d_s[] = "UnaryOperatorKind(%d, %s)";
static char __pyx_k_BuiltinTypeKind___init[] = "BuiltinTypeKind.__init__";
static char __pyx_k_BuiltinTypeKind___repr[] = "BuiltinTypeKind.__repr__";
static char __pyx_k_add_unaryoperator_kind[] = "add_unaryoperator_kind";
static char __pyx_k_cmonster__cmonster_ast[] = "cmonster._cmonster_ast";
static char __pyx_k_UnaryOperatorKind___init[] = "UnaryOperatorKind.__init__";
static char __pyx_k_UnaryOperatorKind___repr[] = "UnaryOperatorKind.__repr__";
static char __pyx_k_Parameter_index_out_of_range[] = "Parameter index out of range";
static char __pyx_k_Get_an_iterator_to_the_declarat[] = "\n        Get an iterator to the declarations in this context.\n        ";
static char __pyx_k_home_sztomi_projects_cmonster_s[] = "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi";
static char __pyx_k_home_sztomi_projects_cmonster_s_2[] = "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi";
static PyObject *__pyx_n_s_AddrOf;
static PyObject *__pyx_n_s_Bool;
static PyObject *__pyx_n_s_BoundMember;
static PyObject *__pyx_n_s_BuiltinTypeKind;
static PyObject *__pyx_n_s_BuiltinTypeKind___init;
static PyObject *__pyx_n_s_BuiltinTypeKind___repr;
static PyObject *__pyx_kp_s_BuiltinTypeKind_d_s;
static PyObject *__pyx_n_s_BuiltinTypeKinds;
static PyObject *__pyx_kp_s_BuiltinType_r;
static PyObject *__pyx_n_s_Char16;
static PyObject *__pyx_n_s_Char32;
static PyObject *__pyx_n_s_Char_S;
static PyObject *__pyx_n_s_Char_U;
static PyObject *__pyx_kp_s_Decl_s_ptr_0x_08x;
static PyObject *__pyx_n_s_Dependent;
static PyObject *__pyx_n_s_Deref;
static PyObject *__pyx_n_s_Double;
static PyObject *__pyx_n_s_Extension;
static PyObject *__pyx_n_s_Float;
static PyObject *__pyx_n_s_Imag;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Index_out_of_range;
static PyObject *__pyx_n_s_Int;
static PyObject *__pyx_n_s_Int128;
static PyObject *__pyx_n_s_LNot;
static PyObject *__pyx_n_s_Long;
static PyObject *__pyx_n_s_LongDouble;
static PyObject *__pyx_n_s_LongLong;
static PyObject *__pyx_n_s_Minus;
static PyObject *__pyx_n_s_Not;
static PyObject *__pyx_n_s_NullPtr;
static PyObject *__pyx_n_s_ObjCClass;
static PyObject *__pyx_n_s_ObjCId;
static PyObject *__pyx_n_s_ObjCSel;
static PyObject *__pyx_n_s_Overload;
static PyObject *__pyx_kp_s_Parameter_index_out_of_range;
static PyObject *__pyx_n_s_Plus;
static PyObject *__pyx_n_s_PostDec;
static PyObject *__pyx_n_s_PostInc;
static PyObject *__pyx_n_s_PreDec;
static PyObject *__pyx_n_s_PreInc;
static PyObject *__pyx_kp_s_QualType_r;
static PyObject *__pyx_n_s_Real;
static PyObject *__pyx_n_s_SChar;
static PyObject *__pyx_n_s_Short;
static PyObject *__pyx_n_s_SourceLocation;
static PyObject *__pyx_kp_s_Statement_s;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_kp_s_Type_s;
static PyObject *__pyx_n_s_UChar;
static PyObject *__pyx_n_s_UInt;
static PyObject *__pyx_n_s_UInt128;
static PyObject *__pyx_n_s_ULong;
static PyObject *__pyx_n_s_ULongLong;
static PyObject *__pyx_n_s_UShort;
static PyObject *__pyx_n_s_UnaryOperatorKind;
static PyObject *__pyx_n_s_UnaryOperatorKind___init;
static PyObject *__pyx_n_s_UnaryOperatorKind___repr;
static PyObject *__pyx_kp_s_UnaryOperatorKind_d_s;
static PyObject *__pyx_n_s_UnaryOperatorKinds;
static PyObject *__pyx_n_s_UnknownAny;
static PyObject *__pyx_n_s_Void;
static PyObject *__pyx_n_s_WChar_S;
static PyObject *__pyx_n_s_WChar_U;
static PyObject *__pyx_n_s_add_type_kind;
static PyObject *__pyx_n_s_add_unaryoperator_kind;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_body;
static PyObject *__pyx_n_s_capsule;
static PyObject *__pyx_n_s_class_name;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cmonster;
static PyObject *__pyx_n_s_cmonster__cmonster_ast;
static PyObject *__pyx_n_s_decl_context;
static PyObject *__pyx_n_s_declarations;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_kp_s_home_sztomi_projects_cmonster_s;
static PyObject *__pyx_kp_s_home_sztomi_projects_cmonster_s_2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_kind;
static PyObject *__pyx_n_s_kind_name;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_parser;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_translation_unit;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_64;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.source.pxi":25
 * 
 * import cmonster
 * cdef object create_SourceLocation(clang.source.SourceLocation loc,             # <<<<<<<<<<<<<<
 *                                   clang.source.SourceManager *mgr):
 *     capsule = PyCapsule_New(mgr, NULL, NULL)
 */

static PyObject *__pyx_f_8cmonster_13_cmonster_ast_create_SourceLocation(clang::SourceLocation __pyx_v_loc, clang::SourceManager *__pyx_v_mgr) {
  PyObject *__pyx_v_capsule = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_SourceLocation", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.source.pxi":27
 * cdef object create_SourceLocation(clang.source.SourceLocation loc,
 *                                   clang.source.SourceManager *mgr):
 *     capsule = PyCapsule_New(mgr, NULL, NULL)             # <<<<<<<<<<<<<<
 *     return cmonster.SourceLocation(loc.getRawEncoding(), capsule)
 * 
 */
  __pyx_t_1 = PyCapsule_New(__pyx_v_mgr, NULL, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_capsule = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.source.pxi":28
 *                                   clang.source.SourceManager *mgr):
 *     capsule = PyCapsule_New(mgr, NULL, NULL)
 *     return cmonster.SourceLocation(loc.getRawEncoding(), capsule)             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_cmonster); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SourceLocation); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_loc.getRawEncoding()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_capsule);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_capsule);
  __Pyx_GIVEREF(__pyx_v_capsule);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.source.pxi":25
 * 
 * import cmonster
 * cdef object create_SourceLocation(clang.source.SourceLocation loc,             # <<<<<<<<<<<<<<
 *                                   clang.source.SourceManager *mgr):
 *     capsule = PyCapsule_New(mgr, NULL, NULL)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cmonster._cmonster_ast.create_SourceLocation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_capsule);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Type_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Type_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_4Type___repr__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Type *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Type___repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_Type *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":26
 *     cdef clang.types.const_Type_ptr ptr
 *     def __repr__(self):
 *         return "Type(%s)" % str(self)             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return (<bytes>self.ptr.getTypeClassName()).decode()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Type_s, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":25
 * cdef class Type:
 *     cdef clang.types.const_Type_ptr ptr
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Type(%s)" % str(self)
 *     def __str__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Type.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":27
 *     def __repr__(self):
 *         return "Type(%s)" % str(self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return (<bytes>self.ptr.getTypeClassName()).decode()
 *     property builtin:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Type_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Type_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_4Type_2__str__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Type *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Type_2__str__(struct __pyx_obj_8cmonster_13_cmonster_ast_Type *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":28
 *         return "Type(%s)" % str(self)
 *     def __str__(self):
 *         return (<bytes>self.ptr.getTypeClassName()).decode()             # <<<<<<<<<<<<<<
 *     property builtin:
 *         def __get__(self): return self.ptr.isBuiltinType()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->ptr->getTypeClassName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "decode");
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":27
 *     def __repr__(self):
 *         return "Type(%s)" % str(self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return (<bytes>self.ptr.getTypeClassName()).decode()
 *     property builtin:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Type.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":30
 *         return (<bytes>self.ptr.getTypeClassName()).decode()
 *     property builtin:
 *         def __get__(self): return self.ptr.isBuiltinType()             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Type_7builtin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Type_7builtin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_4Type_7builtin___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Type *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Type_7builtin___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Type *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->ptr->isBuiltinType()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Type.builtin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":36
 * # DRY.
 * class BuiltinTypeKind:
 *     def __init__(self, kind, name):             # <<<<<<<<<<<<<<
 *         self.kind = kind
 *         self.name = name
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_15BuiltinTypeKind_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8cmonster_13_cmonster_ast_15BuiltinTypeKind_1__init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pw_8cmonster_13_cmonster_ast_15BuiltinTypeKind_1__init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_15BuiltinTypeKind_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kind = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_kind,&__pyx_n_s_name,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_kind = values[1];
    __pyx_v_name = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cmonster._cmonster_ast.BuiltinTypeKind.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_15BuiltinTypeKind___init__(__pyx_self, __pyx_v_self, __pyx_v_kind, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_15BuiltinTypeKind___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kind, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":37
 * class BuiltinTypeKind:
 *     def __init__(self, kind, name):
 *         self.kind = kind             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_kind, __pyx_v_kind) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":38
 *     def __init__(self, kind, name):
 *         self.kind = kind
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "BuiltinTypeKind(%d, %s)" % (self.kind, self.name)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_v_name) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":36
 * # DRY.
 * class BuiltinTypeKind:
 *     def __init__(self, kind, name):             # <<<<<<<<<<<<<<
 *         self.kind = kind
 *         self.name = name
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cmonster._cmonster_ast.BuiltinTypeKind.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":39
 *         self.kind = kind
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "BuiltinTypeKind(%d, %s)" % (self.kind, self.name)
 * BuiltinTypeKinds = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_15BuiltinTypeKind_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8cmonster_13_cmonster_ast_15BuiltinTypeKind_3__repr__ = {__Pyx_NAMESTR("__repr__"), (PyCFunction)__pyx_pw_8cmonster_13_cmonster_ast_15BuiltinTypeKind_3__repr__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_15BuiltinTypeKind_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_15BuiltinTypeKind_2__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_15BuiltinTypeKind_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":40
 *         self.name = name
 *     def __repr__(self):
 *         return "BuiltinTypeKind(%d, %s)" % (self.kind, self.name)             # <<<<<<<<<<<<<<
 * BuiltinTypeKinds = {}
 * def add_type_kind(name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_BuiltinTypeKind_d_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":39
 *         self.kind = kind
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "BuiltinTypeKind(%d, %s)" % (self.kind, self.name)
 * BuiltinTypeKinds = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cmonster._cmonster_ast.BuiltinTypeKind.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":42
 *         return "BuiltinTypeKind(%d, %s)" % (self.kind, self.name)
 * BuiltinTypeKinds = {}
 * def add_type_kind(name, value):             # <<<<<<<<<<<<<<
 *     BuiltinTypeKinds[value] = BuiltinTypeKind(value, name)
 * add_type_kind("Void", clang.types.Void)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_1add_type_kind(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8cmonster_13_cmonster_ast_1add_type_kind = {__Pyx_NAMESTR("add_type_kind"), (PyCFunction)__pyx_pw_8cmonster_13_cmonster_ast_1add_type_kind, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_1add_type_kind(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_type_kind (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_type_kind", 1, 2, 2, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_type_kind") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_type_kind", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cmonster._cmonster_ast.add_type_kind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_add_type_kind(__pyx_self, __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_add_type_kind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_type_kind", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":43
 * BuiltinTypeKinds = {}
 * def add_type_kind(name, value):
 *     BuiltinTypeKinds[value] = BuiltinTypeKind(value, name)             # <<<<<<<<<<<<<<
 * add_type_kind("Void", clang.types.Void)
 * add_type_kind("Bool", clang.types.Bool)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_INCREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_v_value, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":42
 *         return "BuiltinTypeKind(%d, %s)" % (self.kind, self.name)
 * BuiltinTypeKinds = {}
 * def add_type_kind(name, value):             # <<<<<<<<<<<<<<
 *     BuiltinTypeKinds[value] = BuiltinTypeKind(value, name)
 * add_type_kind("Void", clang.types.Void)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cmonster._cmonster_ast.add_type_kind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":110
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return BuiltinTypeKinds[
 *                 (<clang.types.BuiltinType*>self.ptr).getKind()]
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11BuiltinType_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11BuiltinType_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_11BuiltinType_4kind___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_BuiltinType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11BuiltinType_4kind___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_BuiltinType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":111
 *     property kind:
 *         def __get__(self):
 *             return BuiltinTypeKinds[             # <<<<<<<<<<<<<<
 *                 (<clang.types.BuiltinType*>self.ptr).getKind()]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":112
 *         def __get__(self):
 *             return BuiltinTypeKinds[
 *                 (<clang.types.BuiltinType*>self.ptr).getKind()]             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_2 = PyInt_FromLong(((clang::BuiltinType *)__pyx_v_self->__pyx_base.ptr)->getKind()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":111
 *     property kind:
 *         def __get__(self):
 *             return BuiltinTypeKinds[             # <<<<<<<<<<<<<<
 *                 (<clang.types.BuiltinType*>self.ptr).getKind()]
 * 
 */
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":110
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return BuiltinTypeKinds[
 *                 (<clang.types.BuiltinType*>self.ptr).getKind()]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cmonster._cmonster_ast.BuiltinType.kind.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":114
 *                 (<clang.types.BuiltinType*>self.ptr).getKind()]
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "BuiltinType(%r)" % self.kind
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11BuiltinType_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11BuiltinType_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_11BuiltinType___repr__(((struct __pyx_obj_8cmonster_13_cmonster_ast_BuiltinType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11BuiltinType___repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_BuiltinType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":115
 * 
 *     def __repr__(self):
 *         return "BuiltinType(%r)" % self.kind             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_BuiltinType_r, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":114
 *                 (<clang.types.BuiltinType*>self.ptr).getKind()]
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "BuiltinType(%r)" % self.kind
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.BuiltinType.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":120
 * cdef class FunctionType(Type):
 *     property result_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_QualType(
 *                 (<clang.types.FunctionType*>self.ptr).getReturnType())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_12FunctionType_11result_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_12FunctionType_11result_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_12FunctionType_11result_type___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_12FunctionType_11result_type___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":121
 *     property result_type:
 *         def __get__(self):
 *             return create_QualType(             # <<<<<<<<<<<<<<
 *                 (<clang.types.FunctionType*>self.ptr).getReturnType())
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":122
 *         def __get__(self):
 *             return create_QualType(
 *                 (<clang.types.FunctionType*>self.ptr).getReturnType())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_8cmonster_13_cmonster_ast_create_QualType(((clang::FunctionType *)__pyx_v_self->__pyx_base.ptr)->getReturnType()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":120
 * cdef class FunctionType(Type):
 *     property result_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_QualType(
 *                 (<clang.types.FunctionType*>self.ptr).getReturnType())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.FunctionType.result_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":133
 * 
 * 
 * cdef create_Type(clang.types.const_Type_ptr t):             # <<<<<<<<<<<<<<
 *     cdef Type type_ = {
 *         clang.types.Builtin: BuiltinType,
 */

static PyObject *__pyx_f_8cmonster_13_cmonster_ast_create_Type(const clang::Type* __pyx_v_t) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Type *__pyx_v_type_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_Type", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":134
 * 
 * cdef create_Type(clang.types.const_Type_ptr t):
 *     cdef Type type_ = {             # <<<<<<<<<<<<<<
 *         clang.types.Builtin: BuiltinType,
 *         clang.types.FunctionProto: FunctionProtoType,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":135
 * cdef create_Type(clang.types.const_Type_ptr t):
 *     cdef Type type_ = {
 *         clang.types.Builtin: BuiltinType,             # <<<<<<<<<<<<<<
 *         clang.types.FunctionProto: FunctionProtoType,
 *         clang.types.FunctionNoProto: FunctionNoProtoType
 */
  __pyx_t_2 = PyInt_FromLong(clang::Type::Builtin); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType))) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":136
 *     cdef Type type_ = {
 *         clang.types.Builtin: BuiltinType,
 *         clang.types.FunctionProto: FunctionProtoType,             # <<<<<<<<<<<<<<
 *         clang.types.FunctionNoProto: FunctionNoProtoType
 *     }.get(t.getTypeClass(), Type)()
 */
  __pyx_t_2 = PyInt_FromLong(clang::Type::FunctionProto); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_FunctionProtoType))) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":137
 *         clang.types.Builtin: BuiltinType,
 *         clang.types.FunctionProto: FunctionProtoType,
 *         clang.types.FunctionNoProto: FunctionNoProtoType             # <<<<<<<<<<<<<<
 *     }.get(t.getTypeClass(), Type)()
 *     type_.ptr = t
 */
  __pyx_t_2 = PyInt_FromLong(clang::Type::FunctionNoProto); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":138
 *         clang.types.FunctionProto: FunctionProtoType,
 *         clang.types.FunctionNoProto: FunctionNoProtoType
 *     }.get(t.getTypeClass(), Type)()             # <<<<<<<<<<<<<<
 *     type_.ptr = t
 *     return type_
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_FunctionNoProtoType))) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromLong(__pyx_v_t->getTypeClass()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_t_1, __pyx_t_2, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_Type))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_3, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_8cmonster_13_cmonster_ast_Type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_type_ = ((struct __pyx_obj_8cmonster_13_cmonster_ast_Type *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":139
 *         clang.types.FunctionNoProto: FunctionNoProtoType
 *     }.get(t.getTypeClass(), Type)()
 *     type_.ptr = t             # <<<<<<<<<<<<<<
 *     return type_
 * 
 */
  __pyx_v_type_->ptr = __pyx_v_t;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":140
 *     }.get(t.getTypeClass(), Type)()
 *     type_.ptr = t
 *     return type_             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_type_));
  __pyx_r = ((PyObject *)__pyx_v_type_);
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":133
 * 
 * 
 * cdef create_Type(clang.types.const_Type_ptr t):             # <<<<<<<<<<<<<<
 *     cdef Type type_ = {
 *         clang.types.Builtin: BuiltinType,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cmonster._cmonster_ast.create_Type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_type_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":145
 * cdef class QualType:
 *     cdef clang.types.QualType *ptr
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr:
 *             del self.ptr
 */

/* Python wrapper */
static void __pyx_pw_8cmonster_13_cmonster_ast_8QualType_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8cmonster_13_cmonster_ast_8QualType_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8cmonster_13_cmonster_ast_8QualType___dealloc__(((struct __pyx_obj_8cmonster_13_cmonster_ast_QualType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8cmonster_13_cmonster_ast_8QualType___dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_QualType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":146
 *     cdef clang.types.QualType *ptr
 *     def __dealloc__(self):
 *         if self.ptr:             # <<<<<<<<<<<<<<
 *             del self.ptr
 *     def __repr__(self):
 */
  __pyx_t_1 = (__pyx_v_self->ptr != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":147
 *     def __dealloc__(self):
 *         if self.ptr:
 *             del self.ptr             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "QualType(%r)" % self.type
 */
    delete __pyx_v_self->ptr;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":145
 * cdef class QualType:
 *     cdef clang.types.QualType *ptr
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr:
 *             del self.ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":148
 *         if self.ptr:
 *             del self.ptr
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "QualType(%r)" % self.type
 *     property type:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_8QualType_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_8QualType_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_8QualType_2__repr__(((struct __pyx_obj_8cmonster_13_cmonster_ast_QualType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_8QualType_2__repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_QualType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":149
 *             del self.ptr
 *     def __repr__(self):
 *         return "QualType(%r)" % self.type             # <<<<<<<<<<<<<<
 *     property type:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_QualType_r, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":148
 *         if self.ptr:
 *             del self.ptr
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "QualType(%r)" % self.type
 *     property type:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.QualType.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":151
 *         return "QualType(%r)" % self.type
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_Type(self.ptr.getTypePtr())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_8QualType_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_8QualType_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_8QualType_4type___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_QualType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_8QualType_4type___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_QualType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":152
 *     property type:
 *         def __get__(self):
 *             return create_Type(self.ptr.getTypePtr())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8cmonster_13_cmonster_ast_create_Type(__pyx_v_self->ptr->getTypePtr()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":151
 *         return "QualType(%r)" % self.type
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_Type(self.ptr.getTypePtr())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.QualType.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":155
 * 
 * 
 * cdef create_QualType(clang.types.QualType q):             # <<<<<<<<<<<<<<
 *     cdef QualType qual = QualType()
 *     qual.ptr = new clang.types.QualType(q)
 */

static PyObject *__pyx_f_8cmonster_13_cmonster_ast_create_QualType(clang::QualType __pyx_v_q) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_QualType *__pyx_v_qual = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_QualType", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":156
 * 
 * cdef create_QualType(clang.types.QualType q):
 *     cdef QualType qual = QualType()             # <<<<<<<<<<<<<<
 *     qual.ptr = new clang.types.QualType(q)
 *     return qual
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_QualType)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_qual = ((struct __pyx_obj_8cmonster_13_cmonster_ast_QualType *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":157
 * cdef create_QualType(clang.types.QualType q):
 *     cdef QualType qual = QualType()
 *     qual.ptr = new clang.types.QualType(q)             # <<<<<<<<<<<<<<
 *     return qual
 * 
 */
  __pyx_v_qual->ptr = new clang::QualType(__pyx_v_q);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":158
 *     cdef QualType qual = QualType()
 *     qual.ptr = new clang.types.QualType(q)
 *     return qual             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_qual));
  __pyx_r = ((PyObject *)__pyx_v_qual);
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":155
 * 
 * 
 * cdef create_QualType(clang.types.QualType q):             # <<<<<<<<<<<<<<
 *     cdef QualType qual = QualType()
 *     qual.ptr = new clang.types.QualType(q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.create_QualType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_qual);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":30
 *     cdef clang.decls.Decl *ptr
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.kind_name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_1__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_1__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_4Decl___str__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl___str__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":31
 * 
 *     def __str__(self):
 *         return self.kind_name             # <<<<<<<<<<<<<<
 * 
 *     cdef DeclContext __getDeclContext(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_kind_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":30
 *     cdef clang.decls.Decl *ptr
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.kind_name
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Decl.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":33
 *         return self.kind_name
 * 
 *     cdef DeclContext __getDeclContext(self):             # <<<<<<<<<<<<<<
 *         cdef DeclContext dc = DeclContext.__new__(DeclContext)
 *         dc.ptr = self.ptr.getDeclContext()
 */

static struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *__pyx_f_8cmonster_13_cmonster_ast_4Decl___getDeclContext(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *__pyx_v_dc = 0;
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getDeclContext", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":34
 * 
 *     cdef DeclContext __getDeclContext(self):
 *         cdef DeclContext dc = DeclContext.__new__(DeclContext)             # <<<<<<<<<<<<<<
 *         dc.ptr = self.ptr.getDeclContext()
 *         assert dc.ptr != NULL
 */
  __pyx_t_1 = __pyx_tp_new_8cmonster_13_cmonster_ast_DeclContext(((PyTypeObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_DeclContext)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8cmonster_13_cmonster_ast_DeclContext)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_dc = ((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":35
 *     cdef DeclContext __getDeclContext(self):
 *         cdef DeclContext dc = DeclContext.__new__(DeclContext)
 *         dc.ptr = self.ptr.getDeclContext()             # <<<<<<<<<<<<<<
 *         assert dc.ptr != NULL
 *         return dc
 */
  __pyx_v_dc->ptr = __pyx_v_self->ptr->getDeclContext();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":36
 *         cdef DeclContext dc = DeclContext.__new__(DeclContext)
 *         dc.ptr = self.ptr.getDeclContext()
 *         assert dc.ptr != NULL             # <<<<<<<<<<<<<<
 *         return dc
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_dc->ptr != NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":37
 *         dc.ptr = self.ptr.getDeclContext()
 *         assert dc.ptr != NULL
 *         return dc             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_dc));
  __pyx_r = __pyx_v_dc;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":33
 *         return self.kind_name
 * 
 *     cdef DeclContext __getDeclContext(self):             # <<<<<<<<<<<<<<
 *         cdef DeclContext dc = DeclContext.__new__(DeclContext)
 *         dc.ptr = self.ptr.getDeclContext()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Decl.__getDeclContext", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dc);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":39
 *         return dc
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Decl(%s, ptr=0x%08x)" % (self.kind_name, <long>self.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_4Decl_2__repr__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_2__repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":40
 * 
 *     def __repr__(self):
 *         return "Decl(%s, ptr=0x%08x)" % (self.kind_name, <long>self.ptr)             # <<<<<<<<<<<<<<
 * 
 *     property location:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_kind_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_v_self->ptr)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Decl_s_ptr_0x_08x, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":39
 *         return dc
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Decl(%s, ptr=0x%08x)" % (self.kind_name, <long>self.ptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Decl.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":43
 * 
 *     property location:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.astcontext.ASTContext *ctx = &self.ptr.getASTContext()
 *             cdef clang.source.SourceManager *srcmgr = &ctx.getSourceManager()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_8location_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_8location_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_4Decl_8location___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_8location___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self) {
  clang::ASTContext *__pyx_v_ctx;
  clang::SourceManager *__pyx_v_srcmgr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":44
 *     property location:
 *         def __get__(self):
 *             cdef clang.astcontext.ASTContext *ctx = &self.ptr.getASTContext()             # <<<<<<<<<<<<<<
 *             cdef clang.source.SourceManager *srcmgr = &ctx.getSourceManager()
 *             return create_SourceLocation(self.ptr.getLocation(), srcmgr)
 */
  __pyx_v_ctx = (&__pyx_v_self->ptr->getASTContext());

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":45
 *         def __get__(self):
 *             cdef clang.astcontext.ASTContext *ctx = &self.ptr.getASTContext()
 *             cdef clang.source.SourceManager *srcmgr = &ctx.getSourceManager()             # <<<<<<<<<<<<<<
 *             return create_SourceLocation(self.ptr.getLocation(), srcmgr)
 * 
 */
  __pyx_v_srcmgr = (&__pyx_v_ctx->getSourceManager());

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":46
 *             cdef clang.astcontext.ASTContext *ctx = &self.ptr.getASTContext()
 *             cdef clang.source.SourceManager *srcmgr = &ctx.getSourceManager()
 *             return create_SourceLocation(self.ptr.getLocation(), srcmgr)             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8cmonster_13_cmonster_ast_create_SourceLocation(__pyx_v_self->ptr->getLocation(), __pyx_v_srcmgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":43
 * 
 *     property location:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.astcontext.ASTContext *ctx = &self.ptr.getASTContext()
 *             cdef clang.source.SourceManager *srcmgr = &ctx.getSourceManager()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Decl.location.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":49
 * 
 *     property kind:
 *         def __get__(self): return self.ptr.getKind()             # <<<<<<<<<<<<<<
 * 
 *     property kind_name:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_4Decl_4kind___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_4kind___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->ptr->getKind()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Decl.kind.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":52
 * 
 *     property kind_name:
 *         def __get__(self): return (<bytes>self.ptr.getDeclKindName()).decode()             # <<<<<<<<<<<<<<
 * 
 *     property body:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_9kind_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_9kind_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_4Decl_9kind_name___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_9kind_name___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->ptr->getDeclKindName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "decode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Decl.kind_name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":55
 * 
 *     property body:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.statements.Stmt *ptr = self.ptr.getBody()
 *             if ptr == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_4body_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_4body_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_4Decl_4body___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_4body___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self) {
  clang::Stmt *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":56
 *     property body:
 *         def __get__(self):
 *             cdef clang.statements.Stmt *ptr = self.ptr.getBody()             # <<<<<<<<<<<<<<
 *             if ptr == NULL:
 *                 return None
 */
  __pyx_v_ptr = __pyx_v_self->ptr->getBody();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":57
 *         def __get__(self):
 *             cdef clang.statements.Stmt *ptr = self.ptr.getBody()
 *             if ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             return create_Statement(ptr, &self.ptr.getASTContext())
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":58
 *             cdef clang.statements.Stmt *ptr = self.ptr.getBody()
 *             if ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             return create_Statement(ptr, &self.ptr.getASTContext())
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":59
 *             if ptr == NULL:
 *                 return None
 *             return create_Statement(ptr, &self.ptr.getASTContext())             # <<<<<<<<<<<<<<
 * 
 *     property decl_context:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Statement(__pyx_v_ptr, (&__pyx_v_self->ptr->getASTContext()))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":55
 * 
 *     property body:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.statements.Stmt *ptr = self.ptr.getBody()
 *             if ptr == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Decl.body.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":62
 * 
 *     property decl_context:
 *         def __get__(self): return self.__getDeclContext()             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_12decl_context_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Decl_12decl_context_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_4Decl_12decl_context___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Decl_12decl_context___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl *)__pyx_v_self->__pyx_vtab)->__pyx___getDeclContext(__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Decl.decl_context.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":65
 * 
 * 
 * cdef Decl create_Decl(clang.decls.Decl *d):             # <<<<<<<<<<<<<<
 *     cdef Decl decl = {
 *         clang.decls.Function: FunctionDecl,
 */

static struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_f_8cmonster_13_cmonster_ast_create_Decl(clang::Decl *__pyx_v_d) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_v_decl = 0;
  struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_Decl", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":66
 * 
 * cdef Decl create_Decl(clang.decls.Decl *d):
 *     cdef Decl decl = {             # <<<<<<<<<<<<<<
 *         clang.decls.Function: FunctionDecl,
 *         clang.decls.Var: VarDecl,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":67
 * cdef Decl create_Decl(clang.decls.Decl *d):
 *     cdef Decl decl = {
 *         clang.decls.Function: FunctionDecl,             # <<<<<<<<<<<<<<
 *         clang.decls.Var: VarDecl,
 *         clang.decls.ParmVar: ParmVarDecl,
 */
  __pyx_t_2 = PyInt_FromLong(clang::Decl::Function); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_FunctionDecl))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":68
 *     cdef Decl decl = {
 *         clang.decls.Function: FunctionDecl,
 *         clang.decls.Var: VarDecl,             # <<<<<<<<<<<<<<
 *         clang.decls.ParmVar: ParmVarDecl,
 *     }.get(d.getKind(), Decl)()
 */
  __pyx_t_2 = PyInt_FromLong(clang::Decl::Var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_VarDecl))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":69
 *         clang.decls.Function: FunctionDecl,
 *         clang.decls.Var: VarDecl,
 *         clang.decls.ParmVar: ParmVarDecl,             # <<<<<<<<<<<<<<
 *     }.get(d.getKind(), Decl)()
 *     decl.ptr = d
 */
  __pyx_t_2 = PyInt_FromLong(clang::Decl::ParmVar); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_ParmVarDecl))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":70
 *         clang.decls.Var: VarDecl,
 *         clang.decls.ParmVar: ParmVarDecl,
 *     }.get(d.getKind(), Decl)()             # <<<<<<<<<<<<<<
 *     decl.ptr = d
 *     return decl
 */
  __pyx_t_2 = PyInt_FromLong(__pyx_v_d->getKind()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_t_1, __pyx_t_2, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_Decl))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_3, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_8cmonster_13_cmonster_ast_Decl))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_decl = ((struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":71
 *         clang.decls.ParmVar: ParmVarDecl,
 *     }.get(d.getKind(), Decl)()
 *     decl.ptr = d             # <<<<<<<<<<<<<<
 *     return decl
 * 
 */
  __pyx_v_decl->ptr = __pyx_v_d;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":72
 *     }.get(d.getKind(), Decl)()
 *     decl.ptr = d
 *     return decl             # <<<<<<<<<<<<<<
 * 
 * ###############################################################################
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_decl));
  __pyx_r = __pyx_v_decl;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":65
 * 
 * 
 * cdef Decl create_Decl(clang.decls.Decl *d):             # <<<<<<<<<<<<<<
 *     cdef Decl decl = {
 *         clang.decls.Function: FunctionDecl,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cmonster._cmonster_ast.create_Decl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_decl);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":78
 * cdef class NamedDecl(Decl):
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef bytes name = \
 *                 (<clang.decls.ValueDecl*>self.ptr).getNameAsString().c_str()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9NamedDecl_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9NamedDecl_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_9NamedDecl_4name___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_NamedDecl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9NamedDecl_4name___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_NamedDecl *__pyx_v_self) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":80
 *         def __get__(self):
 *             cdef bytes name = \
 *                 (<clang.decls.ValueDecl*>self.ptr).getNameAsString().c_str()             # <<<<<<<<<<<<<<
 *             return name.decode()
 * 
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(((clang::ValueDecl *)__pyx_v_self->__pyx_base.ptr)->getNameAsString().c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":81
 *             cdef bytes name = \
 *                 (<clang.decls.ValueDecl*>self.ptr).getNameAsString().c_str()
 *             return name.decode()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_bytes(__pyx_v_name, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":78
 * cdef class NamedDecl(Decl):
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef bytes name = \
 *                 (<clang.decls.ValueDecl*>self.ptr).getNameAsString().c_str()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.NamedDecl.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":86
 * cdef class ValueDecl(NamedDecl):
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_QualType(
 *                 (<clang.decls.ValueDecl*>self.ptr).getType())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9ValueDecl_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9ValueDecl_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_9ValueDecl_4type___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_ValueDecl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9ValueDecl_4type___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_ValueDecl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":87
 *     property type:
 *         def __get__(self):
 *             return create_QualType(             # <<<<<<<<<<<<<<
 *                 (<clang.decls.ValueDecl*>self.ptr).getType())
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":88
 *         def __get__(self):
 *             return create_QualType(
 *                 (<clang.decls.ValueDecl*>self.ptr).getType())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_8cmonster_13_cmonster_ast_create_QualType(((clang::ValueDecl *)__pyx_v_self->__pyx_base.__pyx_base.ptr)->getType()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":86
 * cdef class ValueDecl(NamedDecl):
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_QualType(
 *                 (<clang.decls.ValueDecl*>self.ptr).getType())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.ValueDecl.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":97
 * cdef class VarDecl(DeclaratorDecl):
 *     property initializer:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.Expr *init = \
 *                 (<clang.decls.VarDecl*>self.ptr).getInit()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_7VarDecl_11initializer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_7VarDecl_11initializer_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_7VarDecl_11initializer___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_VarDecl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_7VarDecl_11initializer___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_VarDecl *__pyx_v_self) {
  clang::Expr *__pyx_v_init;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":99
 *         def __get__(self):
 *             cdef clang.exprs.Expr *init = \
 *                 (<clang.decls.VarDecl*>self.ptr).getInit()             # <<<<<<<<<<<<<<
 *             if init != NULL:
 *                 return create_Statement(init, &self.ptr.getASTContext())
 */
  __pyx_v_init = ((clang::VarDecl *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.ptr)->getInit();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":100
 *             cdef clang.exprs.Expr *init = \
 *                 (<clang.decls.VarDecl*>self.ptr).getInit()
 *             if init != NULL:             # <<<<<<<<<<<<<<
 *                 return create_Statement(init, &self.ptr.getASTContext())
 * 
 */
  __pyx_t_1 = ((__pyx_v_init != NULL) != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":101
 *                 (<clang.decls.VarDecl*>self.ptr).getInit()
 *             if init != NULL:
 *                 return create_Statement(init, &self.ptr.getASTContext())             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Statement(__pyx_v_init, (&__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.ptr->getASTContext()))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":97
 * cdef class VarDecl(DeclaratorDecl):
 *     property initializer:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.Expr *init = \
 *                 (<clang.decls.VarDecl*>self.ptr).getInit()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.VarDecl.initializer.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":115
 *     cdef DeclContext declcontext
 * 
 *     def __init__(self, parser, capsule):             # <<<<<<<<<<<<<<
 *         assert PyCapsule_IsValid(capsule, <char*>0)
 *         cdef clang.decls.TranslationUnitDecl *tu = \
 */

/* Python wrapper */
static int __pyx_pw_8cmonster_13_cmonster_ast_19TranslationUnitDecl_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8cmonster_13_cmonster_ast_19TranslationUnitDecl_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parser = 0;
  PyObject *__pyx_v_capsule = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parser,&__pyx_n_s_capsule,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parser)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_capsule)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parser = values[0];
    __pyx_v_capsule = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cmonster._cmonster_ast.TranslationUnitDecl.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_19TranslationUnitDecl___init__(((struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *)__pyx_v_self), __pyx_v_parser, __pyx_v_capsule);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8cmonster_13_cmonster_ast_19TranslationUnitDecl___init__(struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *__pyx_v_self, PyObject *__pyx_v_parser, PyObject *__pyx_v_capsule) {
  clang::TranslationUnitDecl *__pyx_v_tu;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":116
 * 
 *     def __init__(self, parser, capsule):
 *         assert PyCapsule_IsValid(capsule, <char*>0)             # <<<<<<<<<<<<<<
 *         cdef clang.decls.TranslationUnitDecl *tu = \
 *             <clang.decls.TranslationUnitDecl*>PyCapsule_GetPointer(
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(PyCapsule_IsValid(__pyx_v_capsule, ((char *)0)) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":118
 *         assert PyCapsule_IsValid(capsule, <char*>0)
 *         cdef clang.decls.TranslationUnitDecl *tu = \
 *             <clang.decls.TranslationUnitDecl*>PyCapsule_GetPointer(             # <<<<<<<<<<<<<<
 *                 capsule, <char*>0)
 *         self.parser = parser
 */
  __pyx_t_1 = PyCapsule_GetPointer(__pyx_v_capsule, ((char *)0)); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_tu = ((clang::TranslationUnitDecl *)__pyx_t_1);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":120
 *             <clang.decls.TranslationUnitDecl*>PyCapsule_GetPointer(
 *                 capsule, <char*>0)
 *         self.parser = parser             # <<<<<<<<<<<<<<
 *         self.ptr = tu
 *         self.declcontext = DeclContext(self)
 */
  __Pyx_INCREF(__pyx_v_parser);
  __Pyx_GIVEREF(__pyx_v_parser);
  __Pyx_GOTREF(__pyx_v_self->parser);
  __Pyx_DECREF(__pyx_v_self->parser);
  __pyx_v_self->parser = __pyx_v_parser;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":121
 *                 capsule, <char*>0)
 *         self.parser = parser
 *         self.ptr = tu             # <<<<<<<<<<<<<<
 *         self.declcontext = DeclContext(self)
 *         self.declcontext.ptr = <clang.decls.DeclContext*>tu
 */
  __pyx_v_self->__pyx_base.ptr = __pyx_v_tu;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":122
 *         self.parser = parser
 *         self.ptr = tu
 *         self.declcontext = DeclContext(self)             # <<<<<<<<<<<<<<
 *         self.declcontext.ptr = <clang.decls.DeclContext*>tu
 * 
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_DeclContext)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->declcontext);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->declcontext));
  __pyx_v_self->declcontext = ((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":123
 *         self.ptr = tu
 *         self.declcontext = DeclContext(self)
 *         self.declcontext.ptr = <clang.decls.DeclContext*>tu             # <<<<<<<<<<<<<<
 * 
 *     cdef DeclContext __getDeclContext(self):
 */
  __pyx_v_self->declcontext->ptr = ((clang::DeclContext *)__pyx_v_tu);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":115
 *     cdef DeclContext declcontext
 * 
 *     def __init__(self, parser, capsule):             # <<<<<<<<<<<<<<
 *         assert PyCapsule_IsValid(capsule, <char*>0)
 *         cdef clang.decls.TranslationUnitDecl *tu = \
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cmonster._cmonster_ast.TranslationUnitDecl.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":125
 *         self.declcontext.ptr = <clang.decls.DeclContext*>tu
 * 
 *     cdef DeclContext __getDeclContext(self):             # <<<<<<<<<<<<<<
 *         return self.declcontext
 * 
 */

static struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *__pyx_f_8cmonster_13_cmonster_ast_19TranslationUnitDecl___getDeclContext(struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *__pyx_v_self) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getDeclContext", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":126
 * 
 *     cdef DeclContext __getDeclContext(self):
 *         return self.declcontext             # <<<<<<<<<<<<<<
 * 
 *     property declarations:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->declcontext));
  __pyx_r = __pyx_v_self->declcontext;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":125
 *         self.declcontext.ptr = <clang.decls.DeclContext*>tu
 * 
 *     cdef DeclContext __getDeclContext(self):             # <<<<<<<<<<<<<<
 *         return self.declcontext
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":129
 * 
 *     property declarations:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.decl_context.declarations
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_19TranslationUnitDecl_12declarations_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_19TranslationUnitDecl_12declarations_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_19TranslationUnitDecl_12declarations___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_19TranslationUnitDecl_12declarations___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":130
 *     property declarations:
 *         def __get__(self):
 *             return self.decl_context.declarations             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_decl_context); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_declarations); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":129
 * 
 *     property declarations:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.decl_context.declarations
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.TranslationUnitDecl.declarations.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":138
 *     cdef clang.decls.ParmVarDecl **begin
 *     cdef clang.decls.ParmVarDecl **end
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef clang.decls.ParmVarDecl *decl
 *         if self.begin != self.end:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_19ParmVarDeclIterator_1__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_19ParmVarDeclIterator_1__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_19ParmVarDeclIterator___next__(((struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDeclIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_19ParmVarDeclIterator___next__(struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDeclIterator *__pyx_v_self) {
  clang::ParmVarDecl *__pyx_v_decl;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":140
 *     def __next__(self):
 *         cdef clang.decls.ParmVarDecl *decl
 *         if self.begin != self.end:             # <<<<<<<<<<<<<<
 *             decl = deref(self.begin)
 *             inc(self.begin)
 */
  __pyx_t_1 = ((__pyx_v_self->begin != __pyx_v_self->end) != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":141
 *         cdef clang.decls.ParmVarDecl *decl
 *         if self.begin != self.end:
 *             decl = deref(self.begin)             # <<<<<<<<<<<<<<
 *             inc(self.begin)
 *             return create_Decl(decl)
 */
    __pyx_v_decl = (*__pyx_v_self->begin);

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":142
 *         if self.begin != self.end:
 *             decl = deref(self.begin)
 *             inc(self.begin)             # <<<<<<<<<<<<<<
 *             return create_Decl(decl)
 *         raise StopIteration()
 */
    (++__pyx_v_self->begin);

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":143
 *             decl = deref(self.begin)
 *             inc(self.begin)
 *             return create_Decl(decl)             # <<<<<<<<<<<<<<
 *         raise StopIteration()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Decl(__pyx_v_decl)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":144
 *             inc(self.begin)
 *             return create_Decl(decl)
 *         raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyObject_Call(__pyx_builtin_StopIteration, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":138
 *     cdef clang.decls.ParmVarDecl **begin
 *     cdef clang.decls.ParmVarDecl **end
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef clang.decls.ParmVarDecl *decl
 *         if self.begin != self.end:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.ParmVarDeclIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":149
 * cdef class FunctionParameterList:
 *     cdef clang.decls.FunctionDecl *function
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.function.param_size()
 *     def __iter__(self):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList___len__(((struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList___len__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":150
 *     cdef clang.decls.FunctionDecl *function
 *     def __len__(self):
 *         return self.function.param_size()             # <<<<<<<<<<<<<<
 *     def __iter__(self):
 *         cdef ParmVarDeclIterator iter_ = ParmVarDeclIterator()
 */
  __pyx_r = __pyx_v_self->function->param_size();
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":149
 * cdef class FunctionParameterList:
 *     cdef clang.decls.FunctionDecl *function
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.function.param_size()
 *     def __iter__(self):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":151
 *     def __len__(self):
 *         return self.function.param_size()
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef ParmVarDeclIterator iter_ = ParmVarDeclIterator()
 *         iter_.begin = self.function.param_begin()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList_2__iter__(((struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList_2__iter__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *__pyx_v_self) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDeclIterator *__pyx_v_iter_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":152
 *         return self.function.param_size()
 *     def __iter__(self):
 *         cdef ParmVarDeclIterator iter_ = ParmVarDeclIterator()             # <<<<<<<<<<<<<<
 *         iter_.begin = self.function.param_begin()
 *         iter_.end = self.function.param_end()
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_ParmVarDeclIterator)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_iter_ = ((struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDeclIterator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":153
 *     def __iter__(self):
 *         cdef ParmVarDeclIterator iter_ = ParmVarDeclIterator()
 *         iter_.begin = self.function.param_begin()             # <<<<<<<<<<<<<<
 *         iter_.end = self.function.param_end()
 *         return iter_
 */
  __pyx_v_iter_->begin = __pyx_v_self->function->param_begin();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":154
 *         cdef ParmVarDeclIterator iter_ = ParmVarDeclIterator()
 *         iter_.begin = self.function.param_begin()
 *         iter_.end = self.function.param_end()             # <<<<<<<<<<<<<<
 *         return iter_
 *     def __repr__(self):
 */
  __pyx_v_iter_->end = __pyx_v_self->function->param_end();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":155
 *         iter_.begin = self.function.param_begin()
 *         iter_.end = self.function.param_end()
 *         return iter_             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return repr([p for p in self])
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_iter_));
  __pyx_r = ((PyObject *)__pyx_v_iter_);
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":151
 *     def __len__(self):
 *         return self.function.param_size()
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef ParmVarDeclIterator iter_ = ParmVarDeclIterator()
 *         iter_.begin = self.function.param_begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.FunctionParameterList.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_iter_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":156
 *         iter_.end = self.function.param_end()
 *         return iter_
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr([p for p in self])
 *     def __getitem__(self, i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList_4__repr__(((struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList_4__repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *__pyx_v_self) {
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":157
 *         return iter_
 *     def __repr__(self):
 *         return repr([p for p in self])             # <<<<<<<<<<<<<<
 *     def __getitem__(self, i):
 *         if i < 0 or i >= len(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyList_CheckExact(((PyObject *)__pyx_v_self)) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
    __pyx_t_2 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_5);
    __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_p))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Repr(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":156
 *         iter_.end = self.function.param_end()
 *         return iter_
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr([p for p in self])
 *     def __getitem__(self, i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cmonster._cmonster_ast.FunctionParameterList.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":158
 *     def __repr__(self):
 *         return repr([p for p in self])
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= len(self):
 *             raise IndexError("Parameter index out of range")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList_6__getitem__(((struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_21FunctionParameterList_6__getitem__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":159
 *         return repr([p for p in self])
 *     def __getitem__(self, i):
 *         if i < 0 or i >= len(self):             # <<<<<<<<<<<<<<
 *             raise IndexError("Parameter index out of range")
 *         return create_Decl(self.function.param_begin()[i])
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_i, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_2) {
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_i, __pyx_t_1, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_2;
  }
  if (__pyx_t_6) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":160
 *     def __getitem__(self, i):
 *         if i < 0 or i >= len(self):
 *             raise IndexError("Parameter index out of range")             # <<<<<<<<<<<<<<
 *         return create_Decl(self.function.param_begin()[i])
 * 
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":161
 *         if i < 0 or i >= len(self):
 *             raise IndexError("Parameter index out of range")
 *         return create_Decl(self.function.param_begin()[i])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Decl((__pyx_v_self->function->param_begin()[__pyx_t_3]))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":158
 *     def __repr__(self):
 *         return repr([p for p in self])
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= len(self):
 *             raise IndexError("Parameter index out of range")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cmonster._cmonster_ast.FunctionParameterList.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":166
 * cdef class FunctionDecl(DeclaratorDecl):
 *     property variadic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<clang.decls.FunctionDecl*>self.ptr).isVariadic()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_12FunctionDecl_8variadic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_12FunctionDecl_8variadic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_12FunctionDecl_8variadic___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionDecl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_12FunctionDecl_8variadic___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionDecl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":167
 *     property variadic:
 *         def __get__(self):
 *             return (<clang.decls.FunctionDecl*>self.ptr).isVariadic()             # <<<<<<<<<<<<<<
 * 
 *     property parameters:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((clang::FunctionDecl *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.ptr)->isVariadic()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":166
 * cdef class FunctionDecl(DeclaratorDecl):
 *     property variadic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<clang.decls.FunctionDecl*>self.ptr).isVariadic()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.FunctionDecl.variadic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":170
 * 
 *     property parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.decls.FunctionDecl *fd = \
 *                 <clang.decls.FunctionDecl*>self.ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_12FunctionDecl_10parameters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_12FunctionDecl_10parameters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_12FunctionDecl_10parameters___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionDecl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_12FunctionDecl_10parameters___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionDecl *__pyx_v_self) {
  CYTHON_UNUSED clang::FunctionDecl *__pyx_v_fd;
  struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *__pyx_v_params = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":172
 *         def __get__(self):
 *             cdef clang.decls.FunctionDecl *fd = \
 *                 <clang.decls.FunctionDecl*>self.ptr             # <<<<<<<<<<<<<<
 *             cdef FunctionParameterList params = FunctionParameterList()
 *             params.function = <clang.decls.FunctionDecl*>self.ptr
 */
  __pyx_v_fd = ((clang::FunctionDecl *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.ptr);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":173
 *             cdef clang.decls.FunctionDecl *fd = \
 *                 <clang.decls.FunctionDecl*>self.ptr
 *             cdef FunctionParameterList params = FunctionParameterList()             # <<<<<<<<<<<<<<
 *             params.function = <clang.decls.FunctionDecl*>self.ptr
 *             return params
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_FunctionParameterList)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_params = ((struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":174
 *                 <clang.decls.FunctionDecl*>self.ptr
 *             cdef FunctionParameterList params = FunctionParameterList()
 *             params.function = <clang.decls.FunctionDecl*>self.ptr             # <<<<<<<<<<<<<<
 *             return params
 * 
 */
  __pyx_v_params->function = ((clang::FunctionDecl *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.ptr);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":175
 *             cdef FunctionParameterList params = FunctionParameterList()
 *             params.function = <clang.decls.FunctionDecl*>self.ptr
 *             return params             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_params));
  __pyx_r = ((PyObject *)__pyx_v_params);
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":170
 * 
 *     property parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.decls.FunctionDecl *fd = \
 *                 <clang.decls.FunctionDecl*>self.ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.FunctionDecl.parameters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_params);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":34
 *     cdef clang.decls.decl_iterator *end
 * 
 *     def __cinit__(self, translation_unit):             # <<<<<<<<<<<<<<
 *         self.translation_unit = translation_unit
 *         self.begin = NULL
 */

/* Python wrapper */
static int __pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_translation_unit = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_translation_unit,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_translation_unit)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_translation_unit = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cmonster._cmonster_ast.DeclarationIterator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator___cinit__(((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *)__pyx_v_self), __pyx_v_translation_unit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator___cinit__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *__pyx_v_self, PyObject *__pyx_v_translation_unit) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":35
 * 
 *     def __cinit__(self, translation_unit):
 *         self.translation_unit = translation_unit             # <<<<<<<<<<<<<<
 *         self.begin = NULL
 *         self.end = NULL
 */
  __Pyx_INCREF(__pyx_v_translation_unit);
  __Pyx_GIVEREF(__pyx_v_translation_unit);
  __Pyx_GOTREF(__pyx_v_self->translation_unit);
  __Pyx_DECREF(__pyx_v_self->translation_unit);
  __pyx_v_self->translation_unit = __pyx_v_translation_unit;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":36
 *     def __cinit__(self, translation_unit):
 *         self.translation_unit = translation_unit
 *         self.begin = NULL             # <<<<<<<<<<<<<<
 *         self.end = NULL
 * 
 */
  __pyx_v_self->begin = NULL;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":37
 *         self.translation_unit = translation_unit
 *         self.begin = NULL
 *         self.end = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->end = NULL;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":34
 *     cdef clang.decls.decl_iterator *end
 * 
 *     def __cinit__(self, translation_unit):             # <<<<<<<<<<<<<<
 *         self.translation_unit = translation_unit
 *         self.begin = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":39
 *         self.end = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.begin:
 *             del self.begin
 */

/* Python wrapper */
static void __pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_2__dealloc__(((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_2__dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":40
 * 
 *     def __dealloc__(self):
 *         if self.begin:             # <<<<<<<<<<<<<<
 *             del self.begin
 *         if self.end:
 */
  __pyx_t_1 = (__pyx_v_self->begin != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":41
 *     def __dealloc__(self):
 *         if self.begin:
 *             del self.begin             # <<<<<<<<<<<<<<
 *         if self.end:
 *             del self.end
 */
    delete __pyx_v_self->begin;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":42
 *         if self.begin:
 *             del self.begin
 *         if self.end:             # <<<<<<<<<<<<<<
 *             del self.end
 * 
 */
  __pyx_t_1 = (__pyx_v_self->end != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":43
 *             del self.begin
 *         if self.end:
 *             del self.end             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
    delete __pyx_v_self->end;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":39
 *         self.end = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.begin:
 *             del self.begin
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":45
 *             del self.end
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_4__iter__(((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_4__iter__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":46
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":45
 *             del self.end
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":48
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef clang.decls.Decl *result
 *         if deref(self.next_) != deref(self.end):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_7__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_7__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_6__next__(((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_6__next__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *__pyx_v_self) {
  clang::Decl *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":50
 *     def __next__(self):
 *         cdef clang.decls.Decl *result
 *         if deref(self.next_) != deref(self.end):             # <<<<<<<<<<<<<<
 *             result = deref(deref(self.next_))
 *             inc(deref(self.next_))
 */
  __pyx_t_1 = (((*__pyx_v_self->next_) != (*__pyx_v_self->end)) != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":51
 *         cdef clang.decls.Decl *result
 *         if deref(self.next_) != deref(self.end):
 *             result = deref(deref(self.next_))             # <<<<<<<<<<<<<<
 *             inc(deref(self.next_))
 *             return create_Decl(result)
 */
    __pyx_v_result = (*(*__pyx_v_self->next_));

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":52
 *         if deref(self.next_) != deref(self.end):
 *             result = deref(deref(self.next_))
 *             inc(deref(self.next_))             # <<<<<<<<<<<<<<
 *             return create_Decl(result)
 *         raise StopIteration()
 */
    (++(*__pyx_v_self->next_));

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":53
 *             result = deref(deref(self.next_))
 *             inc(deref(self.next_))
 *             return create_Decl(result)             # <<<<<<<<<<<<<<
 *         raise StopIteration()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Decl(__pyx_v_result)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":54
 *             inc(deref(self.next_))
 *             return create_Decl(result)
 *         raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyObject_Call(__pyx_builtin_StopIteration, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[3]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":48
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef clang.decls.Decl *result
 *         if deref(self.next_) != deref(self.end):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.DeclarationIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":29
 *     """
 * 
 *     cdef readonly object translation_unit             # <<<<<<<<<<<<<<
 *     cdef clang.decls.decl_iterator *begin
 *     cdef clang.decls.decl_iterator *next_
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_16translation_unit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_16translation_unit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_16translation_unit___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_19DeclarationIterator_16translation_unit___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->translation_unit);
  __pyx_r = __pyx_v_self->translation_unit;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":60
 *     cdef readonly object translation_unit
 *     cdef clang.decls.DeclContext *ptr
 *     def __cinit__(self, object translation_unit):             # <<<<<<<<<<<<<<
 *         self.translation_unit = translation_unit
 *         self.ptr = NULL
 */

/* Python wrapper */
static int __pyx_pw_8cmonster_13_cmonster_ast_11DeclContext_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8cmonster_13_cmonster_ast_11DeclContext_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_translation_unit = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_translation_unit,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_translation_unit)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_translation_unit = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cmonster._cmonster_ast.DeclContext.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_11DeclContext___cinit__(((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *)__pyx_v_self), __pyx_v_translation_unit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8cmonster_13_cmonster_ast_11DeclContext___cinit__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *__pyx_v_self, PyObject *__pyx_v_translation_unit) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":61
 *     cdef clang.decls.DeclContext *ptr
 *     def __cinit__(self, object translation_unit):
 *         self.translation_unit = translation_unit             # <<<<<<<<<<<<<<
 *         self.ptr = NULL
 * 
 */
  __Pyx_INCREF(__pyx_v_translation_unit);
  __Pyx_GIVEREF(__pyx_v_translation_unit);
  __Pyx_GOTREF(__pyx_v_self->translation_unit);
  __Pyx_DECREF(__pyx_v_self->translation_unit);
  __pyx_v_self->translation_unit = __pyx_v_translation_unit;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":62
 *     def __cinit__(self, object translation_unit):
 *         self.translation_unit = translation_unit
 *         self.ptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     property declarations:
 */
  __pyx_v_self->ptr = NULL;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":60
 *     cdef readonly object translation_unit
 *     cdef clang.decls.DeclContext *ptr
 *     def __cinit__(self, object translation_unit):             # <<<<<<<<<<<<<<
 *         self.translation_unit = translation_unit
 *         self.ptr = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":68
 *         Get an iterator to the declarations in this context.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef DeclarationIterator iter_ = \
 *                 DeclarationIterator(self.translation_unit)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11DeclContext_12declarations_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11DeclContext_12declarations_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_11DeclContext_12declarations___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11DeclContext_12declarations___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *__pyx_v_self) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *__pyx_v_iter_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  clang::DeclContext::decl_iterator *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":70
 *         def __get__(self):
 *             cdef DeclarationIterator iter_ = \
 *                 DeclarationIterator(self.translation_unit)             # <<<<<<<<<<<<<<
 *             iter_.begin = new clang.decls.decl_iterator(self.ptr.decls_begin())
 *             iter_.next_ = iter_.begin
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->translation_unit);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->translation_unit);
  __Pyx_GIVEREF(__pyx_v_self->translation_unit);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_DeclarationIterator)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_iter_ = ((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":71
 *             cdef DeclarationIterator iter_ = \
 *                 DeclarationIterator(self.translation_unit)
 *             iter_.begin = new clang.decls.decl_iterator(self.ptr.decls_begin())             # <<<<<<<<<<<<<<
 *             iter_.next_ = iter_.begin
 *             iter_.end = new clang.decls.decl_iterator(self.ptr.decls_end())
 */
  __pyx_v_iter_->begin = new clang::DeclContext::decl_iterator(__pyx_v_self->ptr->decls_begin());

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":72
 *                 DeclarationIterator(self.translation_unit)
 *             iter_.begin = new clang.decls.decl_iterator(self.ptr.decls_begin())
 *             iter_.next_ = iter_.begin             # <<<<<<<<<<<<<<
 *             iter_.end = new clang.decls.decl_iterator(self.ptr.decls_end())
 *             return iter_
 */
  __pyx_t_3 = __pyx_v_iter_->begin;
  __pyx_v_iter_->next_ = __pyx_t_3;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":73
 *             iter_.begin = new clang.decls.decl_iterator(self.ptr.decls_begin())
 *             iter_.next_ = iter_.begin
 *             iter_.end = new clang.decls.decl_iterator(self.ptr.decls_end())             # <<<<<<<<<<<<<<
 *             return iter_
 * 
 */
  __pyx_v_iter_->end = new clang::DeclContext::decl_iterator(__pyx_v_self->ptr->decls_end());

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":74
 *             iter_.next_ = iter_.begin
 *             iter_.end = new clang.decls.decl_iterator(self.ptr.decls_end())
 *             return iter_             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_iter_));
  __pyx_r = ((PyObject *)__pyx_v_iter_);
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":68
 *         Get an iterator to the declarations in this context.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef DeclarationIterator iter_ = \
 *                 DeclarationIterator(self.translation_unit)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.DeclContext.declarations.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_iter_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.declcontext.pxi":58
 * 
 * cdef class DeclContext:
 *     cdef readonly object translation_unit             # <<<<<<<<<<<<<<
 *     cdef clang.decls.DeclContext *ptr
 *     def __cinit__(self, object translation_unit):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11DeclContext_16translation_unit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11DeclContext_16translation_unit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_11DeclContext_16translation_unit___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11DeclContext_16translation_unit___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->translation_unit);
  __pyx_r = __pyx_v_self->translation_unit;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":27
 *     cdef clang.statements.Stmt *ptr
 *     cdef clang.astcontext.ASTContext *astctx
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 */

/* Python wrapper */
static void __pyx_pw_8cmonster_13_cmonster_ast_9Statement_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8cmonster_13_cmonster_ast_9Statement_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8cmonster_13_cmonster_ast_9Statement___dealloc__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8cmonster_13_cmonster_ast_9Statement___dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":28
 *     cdef clang.astcontext.ASTContext *astctx
 *     def __dealloc__(self):
 *         if self.astctx != NULL:             # <<<<<<<<<<<<<<
 *             self.astctx.Release()
 *     def __repr__(self):
 */
  __pyx_t_1 = ((__pyx_v_self->astctx != NULL) != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":29
 *     def __dealloc__(self):
 *         if self.astctx != NULL:
 *             self.astctx.Release()             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "Statement(%s)" % self.class_name
 */
    __pyx_v_self->astctx->Release();
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":27
 *     cdef clang.statements.Stmt *ptr
 *     cdef clang.astcontext.ASTContext *astctx
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":30
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Statement(%s)" % self.class_name
 *     property class_name:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_9Statement_2__repr__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9Statement_2__repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":31
 *             self.astctx.Release()
 *     def __repr__(self):
 *         return "Statement(%s)" % self.class_name             # <<<<<<<<<<<<<<
 *     property class_name:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Statement_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":30
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Statement(%s)" % self.class_name
 *     property class_name:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Statement.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":33
 *         return "Statement(%s)" % self.class_name
 *     property class_name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<bytes>self.ptr.getStmtClassName()).decode()
 *     property location:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9Statement_10class_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9Statement_10class_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_9Statement_10class_name___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9Statement_10class_name___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":34
 *     property class_name:
 *         def __get__(self):
 *             return (<bytes>self.ptr.getStmtClassName()).decode()             # <<<<<<<<<<<<<<
 *     property location:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->ptr->getStmtClassName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "decode");
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":33
 *         return "Statement(%s)" % self.class_name
 *     property class_name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<bytes>self.ptr.getStmtClassName()).decode()
 *     property location:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Statement.class_name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":36
 *             return (<bytes>self.ptr.getStmtClassName()).decode()
 *     property location:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.source.SourceManager *srcmgr = \
 *                 &self.astctx.getSourceManager()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9Statement_8location_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9Statement_8location_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_9Statement_8location___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9Statement_8location___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_self) {
  clang::SourceManager *__pyx_v_srcmgr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":38
 *         def __get__(self):
 *             cdef clang.source.SourceManager *srcmgr = \
 *                 &self.astctx.getSourceManager()             # <<<<<<<<<<<<<<
 *             return create_SourceLocation(self.ptr.getLocStart(), srcmgr)
 *     property children:
 */
  __pyx_v_srcmgr = (&__pyx_v_self->astctx->getSourceManager());

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":39
 *             cdef clang.source.SourceManager *srcmgr = \
 *                 &self.astctx.getSourceManager()
 *             return create_SourceLocation(self.ptr.getLocStart(), srcmgr)             # <<<<<<<<<<<<<<
 *     property children:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8cmonster_13_cmonster_ast_create_SourceLocation(__pyx_v_self->ptr->getLocStart(), __pyx_v_srcmgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":36
 *             return (<bytes>self.ptr.getStmtClassName()).decode()
 *     property location:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.source.SourceManager *srcmgr = \
 *                 &self.astctx.getSourceManager()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Statement.location.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8cmonster_13_cmonster_ast_9Statement_8children_2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":41
 *             return create_SourceLocation(self.ptr.getLocStart(), srcmgr)
 *     property children:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             #cdef StatementRange range_ = StatementRange()
 *             #range_.ptr = new clang.statements.StmtRange(self.ptr.children())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9Statement_8children_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_9Statement_8children_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_9Statement_8children___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_9Statement_8children___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_self) {
  struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_cur_scope = (struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *)__pyx_tp_new_8cmonster_13_cmonster_ast___pyx_scope_struct____get__(__pyx_ptype_8cmonster_13_cmonster_ast___pyx_scope_struct____get__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_8cmonster_13_cmonster_ast_9Statement_8children_2generator, (PyObject *) __pyx_cur_scope); if (unlikely(!gen)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cmonster._cmonster_ast.Statement.children.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8cmonster_13_cmonster_ast_9Statement_8children_2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *__pyx_cur_scope = ((struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":45
 *             #range_.ptr = new clang.statements.StmtRange(self.ptr.children())
 *             cdef clang.statements.StmtRange *range_ = \
 *                 new clang.statements.StmtRange(self.ptr.children())             # <<<<<<<<<<<<<<
 *             try:
 *                 while not range_.empty():
 */
  __pyx_cur_scope->__pyx_v_range_ = new clang::StmtRange(__pyx_cur_scope->__pyx_v_self->ptr->children());

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":46
 *             cdef clang.statements.StmtRange *range_ = \
 *                 new clang.statements.StmtRange(self.ptr.children())
 *             try:             # <<<<<<<<<<<<<<
 *                 while not range_.empty():
 *                     yield create_Statement(deref(deref(range_)), self.astctx)
 */
  /*try:*/ {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":47
 *                 new clang.statements.StmtRange(self.ptr.children())
 *             try:
 *                 while not range_.empty():             # <<<<<<<<<<<<<<
 *                     yield create_Statement(deref(deref(range_)), self.astctx)
 *                     inc(deref(range_))
 */
    while (1) {
      __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_range_->empty()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_3 = ((!__pyx_t_2) != 0);
      if (!__pyx_t_3) break;

      /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":48
 *             try:
 *                 while not range_.empty():
 *                     yield create_Statement(deref(deref(range_)), self.astctx)             # <<<<<<<<<<<<<<
 *                     inc(deref(range_))
 *             finally:
 */
      __pyx_t_1 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Statement((*(*__pyx_cur_scope->__pyx_v_range_)), __pyx_cur_scope->__pyx_v_self->astctx)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L9_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

      /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":49
 *                 while not range_.empty():
 *                     yield create_Statement(deref(deref(range_)), self.astctx)
 *                     inc(deref(range_))             # <<<<<<<<<<<<<<
 *             finally:
 *                 del range_
 */
      (++(*__pyx_cur_scope->__pyx_v_range_));
    }
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":51
 *                     inc(deref(range_))
 *             finally:
 *                 del range_             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_cur_scope->__pyx_v_range_;
      goto __pyx_L6;
    }
    /*exception exit:*/{
      __pyx_L5_error:;
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        delete __pyx_cur_scope->__pyx_v_range_;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":41
 *             return create_SourceLocation(self.ptr.getLocStart(), srcmgr)
 *     property children:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             #cdef StatementRange range_ = StatementRange()
 *             #range_.ptr = new clang.statements.StmtRange(self.ptr.children())
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":56
 * cdef class StatementRange:
 *     cdef clang.statements.StmtRange *ptr
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr: del self.ptr
 *     def __nonzero__(self):
 */

/* Python wrapper */
static void __pyx_pw_8cmonster_13_cmonster_ast_14StatementRange_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8cmonster_13_cmonster_ast_14StatementRange_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8cmonster_13_cmonster_ast_14StatementRange___dealloc__(((struct __pyx_obj_8cmonster_13_cmonster_ast_StatementRange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8cmonster_13_cmonster_ast_14StatementRange___dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementRange *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":57
 *     cdef clang.statements.StmtRange *ptr
 *     def __dealloc__(self):
 *         if self.ptr: del self.ptr             # <<<<<<<<<<<<<<
 *     def __nonzero__(self):
 *         return self.ptr != NULL and not self.ptr.empty()
 */
  __pyx_t_1 = (__pyx_v_self->ptr != 0);
  if (__pyx_t_1) {
    delete __pyx_v_self->ptr;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":56
 * cdef class StatementRange:
 *     cdef clang.statements.StmtRange *ptr
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr: del self.ptr
 *     def __nonzero__(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":58
 *     def __dealloc__(self):
 *         if self.ptr: del self.ptr
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         return self.ptr != NULL and not self.ptr.empty()
 * 
 */

/* Python wrapper */
static int __pyx_pw_8cmonster_13_cmonster_ast_14StatementRange_3__nonzero__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8cmonster_13_cmonster_ast_14StatementRange_3__nonzero__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__nonzero__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_14StatementRange_2__nonzero__(((struct __pyx_obj_8cmonster_13_cmonster_ast_StatementRange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8cmonster_13_cmonster_ast_14StatementRange_2__nonzero__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementRange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__nonzero__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":59
 *         if self.ptr: del self.ptr
 *     def __nonzero__(self):
 *         return self.ptr != NULL and not self.ptr.empty()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = (__pyx_v_self->ptr != NULL);
  if (__pyx_t_1) {
    __pyx_t_2 = ((PyObject *)__pyx_v_self->ptr->empty()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (!__pyx_t_3);
    __pyx_t_3 = __pyx_t_4;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":58
 *     def __dealloc__(self):
 *         if self.ptr: del self.ptr
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         return self.ptr != NULL and not self.ptr.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.StatementRange.__nonzero__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":66
 *     cdef clang.statements.Stmt **begin
 *     cdef clang.statements.Stmt **end
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 */

/* Python wrapper */
static void __pyx_pw_8cmonster_13_cmonster_ast_17StatementIterator_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8cmonster_13_cmonster_ast_17StatementIterator_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8cmonster_13_cmonster_ast_17StatementIterator___dealloc__(((struct __pyx_obj_8cmonster_13_cmonster_ast_StatementIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8cmonster_13_cmonster_ast_17StatementIterator___dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementIterator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":67
 *     cdef clang.statements.Stmt **end
 *     def __dealloc__(self):
 *         if self.astctx != NULL:             # <<<<<<<<<<<<<<
 *             self.astctx.Release()
 *     def __next__(self):
 */
  __pyx_t_1 = ((__pyx_v_self->astctx != NULL) != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":68
 *     def __dealloc__(self):
 *         if self.astctx != NULL:
 *             self.astctx.Release()             # <<<<<<<<<<<<<<
 *     def __next__(self):
 *         cdef clang.statements.Stmt *result
 */
    __pyx_v_self->astctx->Release();
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":66
 *     cdef clang.statements.Stmt **begin
 *     cdef clang.statements.Stmt **end
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":69
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef clang.statements.Stmt *result
 *         if self.begin != self.end:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17StatementIterator_3__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17StatementIterator_3__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_17StatementIterator_2__next__(((struct __pyx_obj_8cmonster_13_cmonster_ast_StatementIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17StatementIterator_2__next__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementIterator *__pyx_v_self) {
  clang::Stmt *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":71
 *     def __next__(self):
 *         cdef clang.statements.Stmt *result
 *         if self.begin != self.end:             # <<<<<<<<<<<<<<
 *             result = deref(self.begin)
 *             inc(self.begin)
 */
  __pyx_t_1 = ((__pyx_v_self->begin != __pyx_v_self->end) != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":72
 *         cdef clang.statements.Stmt *result
 *         if self.begin != self.end:
 *             result = deref(self.begin)             # <<<<<<<<<<<<<<
 *             inc(self.begin)
 *             return create_Statement(result, self.astctx)
 */
    __pyx_v_result = (*__pyx_v_self->begin);

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":73
 *         if self.begin != self.end:
 *             result = deref(self.begin)
 *             inc(self.begin)             # <<<<<<<<<<<<<<
 *             return create_Statement(result, self.astctx)
 *         raise StopIteration()
 */
    (++__pyx_v_self->begin);

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":74
 *             result = deref(self.begin)
 *             inc(self.begin)
 *             return create_Statement(result, self.astctx)             # <<<<<<<<<<<<<<
 *         raise StopIteration()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Statement(__pyx_v_result, __pyx_v_self->astctx)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":75
 *             inc(self.begin)
 *             return create_Statement(result, self.astctx)
 *         raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyObject_Call(__pyx_builtin_StopIteration, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[4]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":69
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef clang.statements.Stmt *result
 *         if self.begin != self.end:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.StatementIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":82
 *     cdef clang.statements.Stmt **begin
 *     cdef clang.statements.Stmt **end
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 */

/* Python wrapper */
static void __pyx_pw_8cmonster_13_cmonster_ast_13StatementList_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8cmonster_13_cmonster_ast_13StatementList_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8cmonster_13_cmonster_ast_13StatementList___dealloc__(((struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8cmonster_13_cmonster_ast_13StatementList___dealloc__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":83
 *     cdef clang.statements.Stmt **end
 *     def __dealloc__(self):
 *         if self.astctx != NULL:             # <<<<<<<<<<<<<<
 *             self.astctx.Release()
 *     def __len__(self):
 */
  __pyx_t_1 = ((__pyx_v_self->astctx != NULL) != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":84
 *     def __dealloc__(self):
 *         if self.astctx != NULL:
 *             self.astctx.Release()             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return <long>(self.end-self.begin)
 */
    __pyx_v_self->astctx->Release();
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":82
 *     cdef clang.statements.Stmt **begin
 *     cdef clang.statements.Stmt **end
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":85
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return <long>(self.end-self.begin)
 *     def __iter__(self):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8cmonster_13_cmonster_ast_13StatementList_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8cmonster_13_cmonster_ast_13StatementList_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_13StatementList_2__len__(((struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8cmonster_13_cmonster_ast_13StatementList_2__len__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":86
 *             self.astctx.Release()
 *     def __len__(self):
 *         return <long>(self.end-self.begin)             # <<<<<<<<<<<<<<
 *     def __iter__(self):
 *         cdef StatementIterator iter_ = StatementIterator()
 */
  __pyx_r = ((long)(__pyx_v_self->end - __pyx_v_self->begin));
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":85
 *         if self.astctx != NULL:
 *             self.astctx.Release()
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return <long>(self.end-self.begin)
 *     def __iter__(self):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":87
 *     def __len__(self):
 *         return <long>(self.end-self.begin)
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef StatementIterator iter_ = StatementIterator()
 *         iter_.astctx = self.astctx
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_13StatementList_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_13StatementList_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_13StatementList_4__iter__(((struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_13StatementList_4__iter__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *__pyx_v_self) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_StatementIterator *__pyx_v_iter_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  clang::ASTContext *__pyx_t_2;
  clang::Stmt **__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":88
 *         return <long>(self.end-self.begin)
 *     def __iter__(self):
 *         cdef StatementIterator iter_ = StatementIterator()             # <<<<<<<<<<<<<<
 *         iter_.astctx = self.astctx
 *         iter_.begin = self.begin
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_StatementIterator)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_iter_ = ((struct __pyx_obj_8cmonster_13_cmonster_ast_StatementIterator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":89
 *     def __iter__(self):
 *         cdef StatementIterator iter_ = StatementIterator()
 *         iter_.astctx = self.astctx             # <<<<<<<<<<<<<<
 *         iter_.begin = self.begin
 *         iter_.end = self.end
 */
  __pyx_t_2 = __pyx_v_self->astctx;
  __pyx_v_iter_->astctx = __pyx_t_2;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":90
 *         cdef StatementIterator iter_ = StatementIterator()
 *         iter_.astctx = self.astctx
 *         iter_.begin = self.begin             # <<<<<<<<<<<<<<
 *         iter_.end = self.end
 *         self.astctx.Retain()
 */
  __pyx_t_3 = __pyx_v_self->begin;
  __pyx_v_iter_->begin = __pyx_t_3;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":91
 *         iter_.astctx = self.astctx
 *         iter_.begin = self.begin
 *         iter_.end = self.end             # <<<<<<<<<<<<<<
 *         self.astctx.Retain()
 *         return iter_
 */
  __pyx_t_3 = __pyx_v_self->end;
  __pyx_v_iter_->end = __pyx_t_3;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":92
 *         iter_.begin = self.begin
 *         iter_.end = self.end
 *         self.astctx.Retain()             # <<<<<<<<<<<<<<
 *         return iter_
 *     def __repr__(self):
 */
  __pyx_v_self->astctx->Retain();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":93
 *         iter_.end = self.end
 *         self.astctx.Retain()
 *         return iter_             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return repr([s for s in self])
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_iter_));
  __pyx_r = ((PyObject *)__pyx_v_iter_);
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":87
 *     def __len__(self):
 *         return <long>(self.end-self.begin)
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef StatementIterator iter_ = StatementIterator()
 *         iter_.astctx = self.astctx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.StatementList.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_iter_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":94
 *         self.astctx.Retain()
 *         return iter_
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr([s for s in self])
 *     def __getitem__(self, i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_13StatementList_7__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_13StatementList_7__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_13StatementList_6__repr__(((struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_13StatementList_6__repr__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":95
 *         return iter_
 *     def __repr__(self):
 *         return repr([s for s in self])             # <<<<<<<<<<<<<<
 *     def __getitem__(self, i):
 *         if i < 0 or i >= len(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyList_CheckExact(((PyObject *)__pyx_v_self)) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
    __pyx_t_2 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_5);
    __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_s))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Repr(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":94
 *         self.astctx.Retain()
 *         return iter_
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr([s for s in self])
 *     def __getitem__(self, i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cmonster._cmonster_ast.StatementList.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":96
 *     def __repr__(self):
 *         return repr([s for s in self])
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= len(self):
 *             raise IndexError("Index out of range")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_13StatementList_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_13StatementList_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_13StatementList_8__getitem__(((struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_13StatementList_8__getitem__(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":97
 *         return repr([s for s in self])
 *     def __getitem__(self, i):
 *         if i < 0 or i >= len(self):             # <<<<<<<<<<<<<<
 *             raise IndexError("Index out of range")
 *         return create_Statement(self.begin[i], self.astctx)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_i, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_2) {
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_i, __pyx_t_1, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_2;
  }
  if (__pyx_t_6) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":98
 *     def __getitem__(self, i):
 *         if i < 0 or i >= len(self):
 *             raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 *         return create_Statement(self.begin[i], self.astctx)
 * 
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":99
 *         if i < 0 or i >= len(self):
 *             raise IndexError("Index out of range")
 *         return create_Statement(self.begin[i], self.astctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Statement((__pyx_v_self->begin[__pyx_t_3]), __pyx_v_self->astctx)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":96
 *     def __repr__(self):
 *         return repr([s for s in self])
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= len(self):
 *             raise IndexError("Index out of range")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cmonster._cmonster_ast.StatementList.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":107
 * cdef class CompoundStatement(Statement):
 *     property body:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.statements.CompoundStmt *this = \
 *                 <clang.statements.CompoundStmt*>self.ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_4body_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_4body_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_4body___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_4body___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self) {
  clang::CompoundStmt *__pyx_v_this;
  struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *__pyx_v_list_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  clang::ASTContext *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":109
 *         def __get__(self):
 *             cdef clang.statements.CompoundStmt *this = \
 *                 <clang.statements.CompoundStmt*>self.ptr             # <<<<<<<<<<<<<<
 *             cdef StatementList list_ = StatementList()
 *             list_.astctx = self.astctx
 */
  __pyx_v_this = ((clang::CompoundStmt *)__pyx_v_self->__pyx_base.ptr);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":110
 *             cdef clang.statements.CompoundStmt *this = \
 *                 <clang.statements.CompoundStmt*>self.ptr
 *             cdef StatementList list_ = StatementList()             # <<<<<<<<<<<<<<
 *             list_.astctx = self.astctx
 *             list_.begin = this.body_begin()
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_StatementList)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_list_ = ((struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":111
 *                 <clang.statements.CompoundStmt*>self.ptr
 *             cdef StatementList list_ = StatementList()
 *             list_.astctx = self.astctx             # <<<<<<<<<<<<<<
 *             list_.begin = this.body_begin()
 *             list_.end = this.body_end()
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.astctx;
  __pyx_v_list_->astctx = __pyx_t_2;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":112
 *             cdef StatementList list_ = StatementList()
 *             list_.astctx = self.astctx
 *             list_.begin = this.body_begin()             # <<<<<<<<<<<<<<
 *             list_.end = this.body_end()
 *             self.astctx.Retain()
 */
  __pyx_v_list_->begin = __pyx_v_this->body_begin();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":113
 *             list_.astctx = self.astctx
 *             list_.begin = this.body_begin()
 *             list_.end = this.body_end()             # <<<<<<<<<<<<<<
 *             self.astctx.Retain()
 *             return list_
 */
  __pyx_v_list_->end = __pyx_v_this->body_end();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":114
 *             list_.begin = this.body_begin()
 *             list_.end = this.body_end()
 *             self.astctx.Retain()             # <<<<<<<<<<<<<<
 *             return list_
 *     property left_bracket_location:
 */
  __pyx_v_self->__pyx_base.astctx->Retain();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":115
 *             list_.end = this.body_end()
 *             self.astctx.Retain()
 *             return list_             # <<<<<<<<<<<<<<
 *     property left_bracket_location:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_list_));
  __pyx_r = ((PyObject *)__pyx_v_list_);
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":107
 * cdef class CompoundStatement(Statement):
 *     property body:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.statements.CompoundStmt *this = \
 *                 <clang.statements.CompoundStmt*>self.ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.CompoundStatement.body.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_list_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":117
 *             return list_
 *     property left_bracket_location:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.source.SourceManager *srcmgr = \
 *                 &self.astctx.getSourceManager()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_21left_bracket_location_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_21left_bracket_location_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_21left_bracket_location___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_21left_bracket_location___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self) {
  clang::SourceManager *__pyx_v_srcmgr;
  clang::CompoundStmt *__pyx_v_this;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":119
 *         def __get__(self):
 *             cdef clang.source.SourceManager *srcmgr = \
 *                 &self.astctx.getSourceManager()             # <<<<<<<<<<<<<<
 *             cdef clang.statements.CompoundStmt *this = \
 *                 <clang.statements.CompoundStmt*>self.ptr
 */
  __pyx_v_srcmgr = (&__pyx_v_self->__pyx_base.astctx->getSourceManager());

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":121
 *                 &self.astctx.getSourceManager()
 *             cdef clang.statements.CompoundStmt *this = \
 *                 <clang.statements.CompoundStmt*>self.ptr             # <<<<<<<<<<<<<<
 *             return create_SourceLocation(this.getLBracLoc(), srcmgr)
 *     property right_bracket_location:
 */
  __pyx_v_this = ((clang::CompoundStmt *)__pyx_v_self->__pyx_base.ptr);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":122
 *             cdef clang.statements.CompoundStmt *this = \
 *                 <clang.statements.CompoundStmt*>self.ptr
 *             return create_SourceLocation(this.getLBracLoc(), srcmgr)             # <<<<<<<<<<<<<<
 *     property right_bracket_location:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8cmonster_13_cmonster_ast_create_SourceLocation(__pyx_v_this->getLBracLoc(), __pyx_v_srcmgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":117
 *             return list_
 *     property left_bracket_location:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.source.SourceManager *srcmgr = \
 *                 &self.astctx.getSourceManager()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.CompoundStatement.left_bracket_location.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":124
 *             return create_SourceLocation(this.getLBracLoc(), srcmgr)
 *     property right_bracket_location:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.source.SourceManager *srcmgr = \
 *                 &self.astctx.getSourceManager()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_22right_bracket_location_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_22right_bracket_location_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_22right_bracket_location___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_22right_bracket_location___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self) {
  clang::SourceManager *__pyx_v_srcmgr;
  clang::CompoundStmt *__pyx_v_this;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":126
 *         def __get__(self):
 *             cdef clang.source.SourceManager *srcmgr = \
 *                 &self.astctx.getSourceManager()             # <<<<<<<<<<<<<<
 *             cdef clang.statements.CompoundStmt *this = \
 *                 <clang.statements.CompoundStmt*>self.ptr
 */
  __pyx_v_srcmgr = (&__pyx_v_self->__pyx_base.astctx->getSourceManager());

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":128
 *                 &self.astctx.getSourceManager()
 *             cdef clang.statements.CompoundStmt *this = \
 *                 <clang.statements.CompoundStmt*>self.ptr             # <<<<<<<<<<<<<<
 *             return create_SourceLocation(this.getRBracLoc(), srcmgr)
 *     def __len__(self):
 */
  __pyx_v_this = ((clang::CompoundStmt *)__pyx_v_self->__pyx_base.ptr);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":129
 *             cdef clang.statements.CompoundStmt *this = \
 *                 <clang.statements.CompoundStmt*>self.ptr
 *             return create_SourceLocation(this.getRBracLoc(), srcmgr)             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return (<clang.statements.CompoundStmt*>self.ptr).size()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8cmonster_13_cmonster_ast_create_SourceLocation(__pyx_v_this->getRBracLoc(), __pyx_v_srcmgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":124
 *             return create_SourceLocation(this.getLBracLoc(), srcmgr)
 *     property right_bracket_location:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.source.SourceManager *srcmgr = \
 *                 &self.astctx.getSourceManager()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.CompoundStatement.right_bracket_location.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":130
 *                 <clang.statements.CompoundStmt*>self.ptr
 *             return create_SourceLocation(this.getRBracLoc(), srcmgr)
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return (<clang.statements.CompoundStmt*>self.ptr).size()
 *     def __iter__(self):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement___len__(((struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement___len__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":131
 *             return create_SourceLocation(this.getRBracLoc(), srcmgr)
 *     def __len__(self):
 *         return (<clang.statements.CompoundStmt*>self.ptr).size()             # <<<<<<<<<<<<<<
 *     def __iter__(self):
 *         return iter(self.body)
 */
  __pyx_r = ((clang::CompoundStmt *)__pyx_v_self->__pyx_base.ptr)->size();
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":130
 *                 <clang.statements.CompoundStmt*>self.ptr
 *             return create_SourceLocation(this.getRBracLoc(), srcmgr)
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return (<clang.statements.CompoundStmt*>self.ptr).size()
 *     def __iter__(self):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":132
 *     def __len__(self):
 *         return (<clang.statements.CompoundStmt*>self.ptr).size()
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return iter(self.body)
 *     def __getitem__(self, i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_2__iter__(((struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_2__iter__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":133
 *         return (<clang.statements.CompoundStmt*>self.ptr).size()
 *     def __iter__(self):
 *         return iter(self.body)             # <<<<<<<<<<<<<<
 *     def __getitem__(self, i):
 *         return self.body[i]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_body); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":132
 *     def __len__(self):
 *         return (<clang.statements.CompoundStmt*>self.ptr).size()
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return iter(self.body)
 *     def __getitem__(self, i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.CompoundStatement.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":134
 *     def __iter__(self):
 *         return iter(self.body)
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         return self.body[i]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_4__getitem__(((struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17CompoundStatement_4__getitem__(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":135
 *         return iter(self.body)
 *     def __getitem__(self, i):
 *         return self.body[i]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_body); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_i); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":134
 *     def __iter__(self):
 *         return iter(self.body)
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         return self.body[i]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.CompoundStatement.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":140
 * cdef class ReturnStatement(Statement):
 *     property return_value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.statements.ReturnStmt *rs = \
 *                 <clang.statements.ReturnStmt*>self.ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_15ReturnStatement_12return_value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_15ReturnStatement_12return_value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_15ReturnStatement_12return_value___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_ReturnStatement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_15ReturnStatement_12return_value___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_ReturnStatement *__pyx_v_self) {
  clang::ReturnStmt *__pyx_v_rs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":142
 *         def __get__(self):
 *             cdef clang.statements.ReturnStmt *rs = \
 *                 <clang.statements.ReturnStmt*>self.ptr             # <<<<<<<<<<<<<<
 *             return create_Statement(rs.getRetValue(), self.astctx)
 * 
 */
  __pyx_v_rs = ((clang::ReturnStmt *)__pyx_v_self->__pyx_base.ptr);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":143
 *             cdef clang.statements.ReturnStmt *rs = \
 *                 <clang.statements.ReturnStmt*>self.ptr
 *             return create_Statement(rs.getRetValue(), self.astctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Statement(__pyx_v_rs->getRetValue(), __pyx_v_self->__pyx_base.astctx)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":140
 * cdef class ReturnStatement(Statement):
 *     property return_value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.statements.ReturnStmt *rs = \
 *                 <clang.statements.ReturnStmt*>self.ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.ReturnStatement.return_value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":148
 * cdef class IfStatement(Statement):
 *     property condition:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_Statement(
 *                 (<clang.statements.IfStmt*>self.ptr).getCond(), self.astctx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11IfStatement_9condition_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11IfStatement_9condition_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_11IfStatement_9condition___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11IfStatement_9condition___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":149
 *     property condition:
 *         def __get__(self):
 *             return create_Statement(             # <<<<<<<<<<<<<<
 *                 (<clang.statements.IfStmt*>self.ptr).getCond(), self.astctx)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":150
 *         def __get__(self):
 *             return create_Statement(
 *                 (<clang.statements.IfStmt*>self.ptr).getCond(), self.astctx)             # <<<<<<<<<<<<<<
 * 
 *     property then:
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Statement(((clang::IfStmt *)__pyx_v_self->__pyx_base.ptr)->getCond(), __pyx_v_self->__pyx_base.astctx)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":148
 * cdef class IfStatement(Statement):
 *     property condition:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_Statement(
 *                 (<clang.statements.IfStmt*>self.ptr).getCond(), self.astctx)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.IfStatement.condition.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":153
 * 
 *     property then:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_Statement(
 *                 (<clang.statements.IfStmt*>self.ptr).getThen(), self.astctx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11IfStatement_4then_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11IfStatement_4then_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_11IfStatement_4then___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11IfStatement_4then___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":154
 *     property then:
 *         def __get__(self):
 *             return create_Statement(             # <<<<<<<<<<<<<<
 *                 (<clang.statements.IfStmt*>self.ptr).getThen(), self.astctx)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":155
 *         def __get__(self):
 *             return create_Statement(
 *                 (<clang.statements.IfStmt*>self.ptr).getThen(), self.astctx)             # <<<<<<<<<<<<<<
 * 
 *     property else_:
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Statement(((clang::IfStmt *)__pyx_v_self->__pyx_base.ptr)->getThen(), __pyx_v_self->__pyx_base.astctx)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":153
 * 
 *     property then:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_Statement(
 *                 (<clang.statements.IfStmt*>self.ptr).getThen(), self.astctx)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.IfStatement.then.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":158
 * 
 *     property else_:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_Statement(
 *                 (<clang.statements.IfStmt*>self.ptr).getElse(), self.astctx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11IfStatement_5else__1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11IfStatement_5else__1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_11IfStatement_5else____get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11IfStatement_5else____get__(struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":159
 *     property else_:
 *         def __get__(self):
 *             return create_Statement(             # <<<<<<<<<<<<<<
 *                 (<clang.statements.IfStmt*>self.ptr).getElse(), self.astctx)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":160
 *         def __get__(self):
 *             return create_Statement(
 *                 (<clang.statements.IfStmt*>self.ptr).getElse(), self.astctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Statement(((clang::IfStmt *)__pyx_v_self->__pyx_base.ptr)->getElse(), __pyx_v_self->__pyx_base.astctx)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":158
 * 
 *     property else_:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_Statement(
 *                 (<clang.statements.IfStmt*>self.ptr).getElse(), self.astctx)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.IfStatement.else_.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":166
 * 
 * 
 * cdef Statement create_Statement(clang.statements.Stmt *ptr,             # <<<<<<<<<<<<<<
 *                                 clang.astcontext.ASTContext *astctx):
 *     if ptr == NULL:
 */

static struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_f_8cmonster_13_cmonster_ast_create_Statement(clang::Stmt *__pyx_v_ptr, clang::ASTContext *__pyx_v_astctx) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_v_stmt = 0;
  struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_Statement", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":168
 * cdef Statement create_Statement(clang.statements.Stmt *ptr,
 *                                 clang.astcontext.ASTContext *astctx):
 *     if ptr == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     cdef Statement stmt = {
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":169
 *                                 clang.astcontext.ASTContext *astctx):
 *     if ptr == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     cdef Statement stmt = {
 *         clang.statements.CompoundStmtClass: CompoundStatement,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(Py_None);
    __pyx_r = ((struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *)Py_None);
    goto __pyx_L0;
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":170
 *     if ptr == NULL:
 *         return None
 *     cdef Statement stmt = {             # <<<<<<<<<<<<<<
 *         clang.statements.CompoundStmtClass: CompoundStatement,
 *         clang.statements.ReturnStmtClass: ReturnStatement,
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":171
 *         return None
 *     cdef Statement stmt = {
 *         clang.statements.CompoundStmtClass: CompoundStatement,             # <<<<<<<<<<<<<<
 *         clang.statements.ReturnStmtClass: ReturnStatement,
 *         clang.statements.ImplicitCastExprClass: ImplicitCastExpr,
 */
  __pyx_t_3 = PyInt_FromLong(clang::Stmt::CompoundStmtClass); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_CompoundStatement))) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":172
 *     cdef Statement stmt = {
 *         clang.statements.CompoundStmtClass: CompoundStatement,
 *         clang.statements.ReturnStmtClass: ReturnStatement,             # <<<<<<<<<<<<<<
 *         clang.statements.ImplicitCastExprClass: ImplicitCastExpr,
 *         clang.statements.UnaryOperatorClass: UnaryOperator,
 */
  __pyx_t_3 = PyInt_FromLong(clang::Stmt::ReturnStmtClass); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_ReturnStatement))) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":173
 *         clang.statements.CompoundStmtClass: CompoundStatement,
 *         clang.statements.ReturnStmtClass: ReturnStatement,
 *         clang.statements.ImplicitCastExprClass: ImplicitCastExpr,             # <<<<<<<<<<<<<<
 *         clang.statements.UnaryOperatorClass: UnaryOperator,
 *         clang.statements.IntegerLiteralClass: IntegerLiteral,
 */
  __pyx_t_3 = PyInt_FromLong(clang::Stmt::ImplicitCastExprClass); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_ImplicitCastExpr))) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":174
 *         clang.statements.ReturnStmtClass: ReturnStatement,
 *         clang.statements.ImplicitCastExprClass: ImplicitCastExpr,
 *         clang.statements.UnaryOperatorClass: UnaryOperator,             # <<<<<<<<<<<<<<
 *         clang.statements.IntegerLiteralClass: IntegerLiteral,
 *         clang.statements.DeclRefExprClass: DeclRefExpr,
 */
  __pyx_t_3 = PyInt_FromLong(clang::Stmt::UnaryOperatorClass); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator))) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":175
 *         clang.statements.ImplicitCastExprClass: ImplicitCastExpr,
 *         clang.statements.UnaryOperatorClass: UnaryOperator,
 *         clang.statements.IntegerLiteralClass: IntegerLiteral,             # <<<<<<<<<<<<<<
 *         clang.statements.DeclRefExprClass: DeclRefExpr,
 *         clang.statements.IfStmtClass: IfStatement
 */
  __pyx_t_3 = PyInt_FromLong(clang::Stmt::IntegerLiteralClass); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_IntegerLiteral))) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":176
 *         clang.statements.UnaryOperatorClass: UnaryOperator,
 *         clang.statements.IntegerLiteralClass: IntegerLiteral,
 *         clang.statements.DeclRefExprClass: DeclRefExpr,             # <<<<<<<<<<<<<<
 *         clang.statements.IfStmtClass: IfStatement
 *     }.get(ptr.getStmtClass(), Statement)()
 */
  __pyx_t_3 = PyInt_FromLong(clang::Stmt::DeclRefExprClass); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_DeclRefExpr))) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":177
 *         clang.statements.IntegerLiteralClass: IntegerLiteral,
 *         clang.statements.DeclRefExprClass: DeclRefExpr,
 *         clang.statements.IfStmtClass: IfStatement             # <<<<<<<<<<<<<<
 *     }.get(ptr.getStmtClass(), Statement)()
 *     stmt.ptr = ptr
 */
  __pyx_t_3 = PyInt_FromLong(clang::Stmt::IfStmtClass); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":178
 *         clang.statements.DeclRefExprClass: DeclRefExpr,
 *         clang.statements.IfStmtClass: IfStatement
 *     }.get(ptr.getStmtClass(), Statement)()             # <<<<<<<<<<<<<<
 *     stmt.ptr = ptr
 *     stmt.astctx = astctx
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_IfStatement))) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromLong(__pyx_v_ptr->getStmtClass()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_t_2, __pyx_t_3, ((PyObject *)((PyObject*)__pyx_ptype_8cmonster_13_cmonster_ast_Statement))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_4, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8cmonster_13_cmonster_ast_Statement))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_stmt = ((struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":179
 *         clang.statements.IfStmtClass: IfStatement
 *     }.get(ptr.getStmtClass(), Statement)()
 *     stmt.ptr = ptr             # <<<<<<<<<<<<<<
 *     stmt.astctx = astctx
 *     astctx.Retain()
 */
  __pyx_v_stmt->ptr = __pyx_v_ptr;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":180
 *     }.get(ptr.getStmtClass(), Statement)()
 *     stmt.ptr = ptr
 *     stmt.astctx = astctx             # <<<<<<<<<<<<<<
 *     astctx.Retain()
 *     return stmt
 */
  __pyx_v_stmt->astctx = __pyx_v_astctx;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":181
 *     stmt.ptr = ptr
 *     stmt.astctx = astctx
 *     astctx.Retain()             # <<<<<<<<<<<<<<
 *     return stmt
 * 
 */
  __pyx_v_astctx->Retain();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":182
 *     stmt.astctx = astctx
 *     astctx.Retain()
 *     return stmt             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_stmt));
  __pyx_r = __pyx_v_stmt;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":166
 * 
 * 
 * cdef Statement create_Statement(clang.statements.Stmt *ptr,             # <<<<<<<<<<<<<<
 *                                 clang.astcontext.ASTContext *astctx):
 *     if ptr == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cmonster._cmonster_ast.create_Statement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_stmt);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":26
 * cdef class Expr(Statement):
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_QualType((<clang.exprs.Expr*>self.ptr).getType())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Expr_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_4Expr_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_4Expr_4type___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_Expr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_4Expr_4type___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_Expr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":27
 *     property type:
 *         def __get__(self):
 *             return create_QualType((<clang.exprs.Expr*>self.ptr).getType())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8cmonster_13_cmonster_ast_create_QualType(((clang::Expr *)__pyx_v_self->__pyx_base.ptr)->getType()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":26
 * cdef class Expr(Statement):
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return create_QualType((<clang.exprs.Expr*>self.ptr).getType())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.Expr.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":32
 * cdef class CastExpr(Expr):
 *     property subexpr:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.CastExpr *this = <clang.exprs.CastExpr*>self.ptr
 *             cdef clang.exprs.Expr *expr = this.getSubExpr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_8CastExpr_7subexpr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_8CastExpr_7subexpr_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_8CastExpr_7subexpr___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_CastExpr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_8CastExpr_7subexpr___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_CastExpr *__pyx_v_self) {
  clang::CastExpr *__pyx_v_this;
  clang::Expr *__pyx_v_expr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":33
 *     property subexpr:
 *         def __get__(self):
 *             cdef clang.exprs.CastExpr *this = <clang.exprs.CastExpr*>self.ptr             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.Expr *expr = this.getSubExpr()
 *             if expr != NULL:
 */
  __pyx_v_this = ((clang::CastExpr *)__pyx_v_self->__pyx_base.__pyx_base.ptr);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":34
 *         def __get__(self):
 *             cdef clang.exprs.CastExpr *this = <clang.exprs.CastExpr*>self.ptr
 *             cdef clang.exprs.Expr *expr = this.getSubExpr()             # <<<<<<<<<<<<<<
 *             if expr != NULL:
 *                 return create_Statement(expr, self.astctx)
 */
  __pyx_v_expr = __pyx_v_this->getSubExpr();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":35
 *             cdef clang.exprs.CastExpr *this = <clang.exprs.CastExpr*>self.ptr
 *             cdef clang.exprs.Expr *expr = this.getSubExpr()
 *             if expr != NULL:             # <<<<<<<<<<<<<<
 *                 return create_Statement(expr, self.astctx)
 * 
 */
  __pyx_t_1 = ((__pyx_v_expr != NULL) != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":36
 *             cdef clang.exprs.Expr *expr = this.getSubExpr()
 *             if expr != NULL:
 *                 return create_Statement(expr, self.astctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Statement(__pyx_v_expr, __pyx_v_self->__pyx_base.__pyx_base.astctx)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":32
 * cdef class CastExpr(Expr):
 *     property subexpr:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.CastExpr *this = <clang.exprs.CastExpr*>self.ptr
 *             cdef clang.exprs.Expr *expr = this.getSubExpr()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.CastExpr.subexpr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":46
 * cdef class IntegerLiteral(Expr):
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.IntegerLiteral*this = \
 *                 <clang.exprs.IntegerLiteral*>self.ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_14IntegerLiteral_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_14IntegerLiteral_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_14IntegerLiteral_5value___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_IntegerLiteral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_14IntegerLiteral_5value___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_IntegerLiteral *__pyx_v_self) {
  clang::IntegerLiteral *__pyx_v_this;
  llvm::APInt __pyx_v_apint;
  unsigned int __pyx_v_nwords;
  const uint64_t* __pyx_v_words;
  PyObject *__pyx_v_value = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":48
 *         def __get__(self):
 *             cdef clang.exprs.IntegerLiteral*this = \
 *                 <clang.exprs.IntegerLiteral*>self.ptr             # <<<<<<<<<<<<<<
 *             cdef llvm.APInt apint = this.getValue()
 *             cdef unsigned nwords = apint.getNumWords()
 */
  __pyx_v_this = ((clang::IntegerLiteral *)__pyx_v_self->__pyx_base.__pyx_base.ptr);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":49
 *             cdef clang.exprs.IntegerLiteral*this = \
 *                 <clang.exprs.IntegerLiteral*>self.ptr
 *             cdef llvm.APInt apint = this.getValue()             # <<<<<<<<<<<<<<
 *             cdef unsigned nwords = apint.getNumWords()
 *             cdef llvm.const_uint64_t_ptr words = apint.getRawData()
 */
  __pyx_v_apint = __pyx_v_this->getValue();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":50
 *                 <clang.exprs.IntegerLiteral*>self.ptr
 *             cdef llvm.APInt apint = this.getValue()
 *             cdef unsigned nwords = apint.getNumWords()             # <<<<<<<<<<<<<<
 *             cdef llvm.const_uint64_t_ptr words = apint.getRawData()
 *             # TODO Verify that words are stored in MSB order.
 */
  __pyx_v_nwords = __pyx_v_apint.getNumWords();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":51
 *             cdef llvm.APInt apint = this.getValue()
 *             cdef unsigned nwords = apint.getNumWords()
 *             cdef llvm.const_uint64_t_ptr words = apint.getRawData()             # <<<<<<<<<<<<<<
 *             # TODO Verify that words are stored in MSB order.
 *             value = 0
 */
  __pyx_v_words = __pyx_v_apint.getRawData();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":53
 *             cdef llvm.const_uint64_t_ptr words = apint.getRawData()
 *             # TODO Verify that words are stored in MSB order.
 *             value = 0             # <<<<<<<<<<<<<<
 *             for i from 0 <= i < nwords:
 *                 value = (value << 64) | words[i]
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_value = __pyx_int_0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":54
 *             # TODO Verify that words are stored in MSB order.
 *             value = 0
 *             for i from 0 <= i < nwords:             # <<<<<<<<<<<<<<
 *                 value = (value << 64) | words[i]
 *             return value
 */
  __pyx_t_1 = __pyx_v_nwords;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_1; __pyx_v_i++) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":55
 *             value = 0
 *             for i from 0 <= i < nwords:
 *                 value = (value << 64) | words[i]             # <<<<<<<<<<<<<<
 *             return value
 * 
 */
    __pyx_t_2 = PyNumber_Lshift(__pyx_v_value, __pyx_int_64); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_uint64_t((__pyx_v_words[__pyx_v_i])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Or(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_4);
    __pyx_t_4 = 0;
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":56
 *             for i from 0 <= i < nwords:
 *                 value = (value << 64) | words[i]
 *             return value             # <<<<<<<<<<<<<<
 * 
 * ###############################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_value);
  __pyx_r = __pyx_v_value;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":46
 * cdef class IntegerLiteral(Expr):
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.IntegerLiteral*this = \
 *                 <clang.exprs.IntegerLiteral*>self.ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cmonster._cmonster_ast.IntegerLiteral.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":61
 * 
 * class UnaryOperatorKind:
 *     def __init__(self, kind, name):             # <<<<<<<<<<<<<<
 *         self.kind = kind
 *         self.name = name
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17UnaryOperatorKind_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8cmonster_13_cmonster_ast_17UnaryOperatorKind_1__init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pw_8cmonster_13_cmonster_ast_17UnaryOperatorKind_1__init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17UnaryOperatorKind_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kind = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_kind,&__pyx_n_s_name,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_kind = values[1];
    __pyx_v_name = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cmonster._cmonster_ast.UnaryOperatorKind.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_17UnaryOperatorKind___init__(__pyx_self, __pyx_v_self, __pyx_v_kind, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17UnaryOperatorKind___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kind, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":62
 * class UnaryOperatorKind:
 *     def __init__(self, kind, name):
 *         self.kind = kind             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_kind, __pyx_v_kind) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":63
 *     def __init__(self, kind, name):
 *         self.kind = kind
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "UnaryOperatorKind(%d, %s)" % (self.kind, self.name)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_v_name) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":61
 * 
 * class UnaryOperatorKind:
 *     def __init__(self, kind, name):             # <<<<<<<<<<<<<<
 *         self.kind = kind
 *         self.name = name
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cmonster._cmonster_ast.UnaryOperatorKind.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":64
 *         self.kind = kind
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "UnaryOperatorKind(%d, %s)" % (self.kind, self.name)
 * UnaryOperatorKinds = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17UnaryOperatorKind_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8cmonster_13_cmonster_ast_17UnaryOperatorKind_3__repr__ = {__Pyx_NAMESTR("__repr__"), (PyCFunction)__pyx_pw_8cmonster_13_cmonster_ast_17UnaryOperatorKind_3__repr__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_17UnaryOperatorKind_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_17UnaryOperatorKind_2__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_17UnaryOperatorKind_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":65
 *         self.name = name
 *     def __repr__(self):
 *         return "UnaryOperatorKind(%d, %s)" % (self.kind, self.name)             # <<<<<<<<<<<<<<
 * UnaryOperatorKinds = {}
 * def add_unaryoperator_kind(name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_UnaryOperatorKind_d_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":64
 *         self.kind = kind
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "UnaryOperatorKind(%d, %s)" % (self.kind, self.name)
 * UnaryOperatorKinds = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cmonster._cmonster_ast.UnaryOperatorKind.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":67
 *         return "UnaryOperatorKind(%d, %s)" % (self.kind, self.name)
 * UnaryOperatorKinds = {}
 * def add_unaryoperator_kind(name, value):             # <<<<<<<<<<<<<<
 *     UnaryOperatorKinds[value] = UnaryOperatorKind(value, name)
 * add_unaryoperator_kind("PostInc", clang.exprs.UO_PostInc)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_3add_unaryoperator_kind(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8cmonster_13_cmonster_ast_3add_unaryoperator_kind = {__Pyx_NAMESTR("add_unaryoperator_kind"), (PyCFunction)__pyx_pw_8cmonster_13_cmonster_ast_3add_unaryoperator_kind, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_3add_unaryoperator_kind(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_unaryoperator_kind (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_unaryoperator_kind", 1, 2, 2, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_unaryoperator_kind") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_unaryoperator_kind", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cmonster._cmonster_ast.add_unaryoperator_kind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_2add_unaryoperator_kind(__pyx_self, __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_2add_unaryoperator_kind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_unaryoperator_kind", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":68
 * UnaryOperatorKinds = {}
 * def add_unaryoperator_kind(name, value):
 *     UnaryOperatorKinds[value] = UnaryOperatorKind(value, name)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("PostInc", clang.exprs.UO_PostInc)
 * add_unaryoperator_kind("PostDec", clang.exprs.UO_PostDec)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_INCREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_v_value, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":67
 *         return "UnaryOperatorKind(%d, %s)" % (self.kind, self.name)
 * UnaryOperatorKinds = {}
 * def add_unaryoperator_kind(name, value):             # <<<<<<<<<<<<<<
 *     UnaryOperatorKinds[value] = UnaryOperatorKind(value, name)
 * add_unaryoperator_kind("PostInc", clang.exprs.UO_PostInc)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cmonster._cmonster_ast.add_unaryoperator_kind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":100
 * 
 *     property opcode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.UnaryOperator *this = \
 *                 <clang.exprs.UnaryOperator*>self.ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_13UnaryOperator_6opcode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_13UnaryOperator_6opcode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_13UnaryOperator_6opcode___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_UnaryOperator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_13UnaryOperator_6opcode___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_UnaryOperator *__pyx_v_self) {
  clang::UnaryOperator *__pyx_v_this;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":102
 *         def __get__(self):
 *             cdef clang.exprs.UnaryOperator *this = \
 *                 <clang.exprs.UnaryOperator*>self.ptr             # <<<<<<<<<<<<<<
 *             return UnaryOperatorKinds[this.getOpcode()]
 * 
 */
  __pyx_v_this = ((clang::UnaryOperator *)__pyx_v_self->__pyx_base.__pyx_base.ptr);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":103
 *             cdef clang.exprs.UnaryOperator *this = \
 *                 <clang.exprs.UnaryOperator*>self.ptr
 *             return UnaryOperatorKinds[this.getOpcode()]             # <<<<<<<<<<<<<<
 * 
 *     property subexpr:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_this->getOpcode()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":100
 * 
 *     property opcode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.UnaryOperator *this = \
 *                 <clang.exprs.UnaryOperator*>self.ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cmonster._cmonster_ast.UnaryOperator.opcode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":106
 * 
 *     property subexpr:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.UnaryOperator *this = \
 *                 <clang.exprs.UnaryOperator*>self.ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_13UnaryOperator_7subexpr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_13UnaryOperator_7subexpr_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_13UnaryOperator_7subexpr___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_UnaryOperator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_13UnaryOperator_7subexpr___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_UnaryOperator *__pyx_v_self) {
  clang::UnaryOperator *__pyx_v_this;
  clang::Expr *__pyx_v_expr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":108
 *         def __get__(self):
 *             cdef clang.exprs.UnaryOperator *this = \
 *                 <clang.exprs.UnaryOperator*>self.ptr             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.Expr *expr = this.getSubExpr()
 *             if expr != NULL:
 */
  __pyx_v_this = ((clang::UnaryOperator *)__pyx_v_self->__pyx_base.__pyx_base.ptr);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":109
 *             cdef clang.exprs.UnaryOperator *this = \
 *                 <clang.exprs.UnaryOperator*>self.ptr
 *             cdef clang.exprs.Expr *expr = this.getSubExpr()             # <<<<<<<<<<<<<<
 *             if expr != NULL:
 *                 return create_Statement(expr, self.astctx)
 */
  __pyx_v_expr = __pyx_v_this->getSubExpr();

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":110
 *                 <clang.exprs.UnaryOperator*>self.ptr
 *             cdef clang.exprs.Expr *expr = this.getSubExpr()
 *             if expr != NULL:             # <<<<<<<<<<<<<<
 *                 return create_Statement(expr, self.astctx)
 * 
 */
  __pyx_t_1 = ((__pyx_v_expr != NULL) != 0);
  if (__pyx_t_1) {

    /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":111
 *             cdef clang.exprs.Expr *expr = this.getSubExpr()
 *             if expr != NULL:
 *                 return create_Statement(expr, self.astctx)             # <<<<<<<<<<<<<<
 * 
 * ###############################################################################
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Statement(__pyx_v_expr, __pyx_v_self->__pyx_base.__pyx_base.astctx)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":106
 * 
 *     property subexpr:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.UnaryOperator *this = \
 *                 <clang.exprs.UnaryOperator*>self.ptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cmonster._cmonster_ast.UnaryOperator.subexpr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":117
 * cdef class DeclRefExpr(Expr):
 *     property decl:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.DeclRefExpr *this = \
 *                 <clang.exprs.DeclRefExpr*>self.ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11DeclRefExpr_4decl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8cmonster_13_cmonster_ast_11DeclRefExpr_4decl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8cmonster_13_cmonster_ast_11DeclRefExpr_4decl___get__(((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclRefExpr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8cmonster_13_cmonster_ast_11DeclRefExpr_4decl___get__(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclRefExpr *__pyx_v_self) {
  clang::DeclRefExpr *__pyx_v_this;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":119
 *         def __get__(self):
 *             cdef clang.exprs.DeclRefExpr *this = \
 *                 <clang.exprs.DeclRefExpr*>self.ptr             # <<<<<<<<<<<<<<
 *             return create_Decl(this.getDecl())
 * 
 */
  __pyx_v_this = ((clang::DeclRefExpr *)__pyx_v_self->__pyx_base.__pyx_base.ptr);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":120
 *             cdef clang.exprs.DeclRefExpr *this = \
 *                 <clang.exprs.DeclRefExpr*>self.ptr
 *             return create_Decl(this.getDecl())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8cmonster_13_cmonster_ast_create_Decl(__pyx_v_this->getDecl())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":117
 * cdef class DeclRefExpr(Expr):
 *     property decl:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef clang.exprs.DeclRefExpr *this = \
 *                 <clang.exprs.DeclRefExpr*>self.ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cmonster._cmonster_ast.DeclRefExpr.decl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_StatementList(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_StatementList(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8cmonster_13_cmonster_ast_13StatementList_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_8cmonster_13_cmonster_ast_StatementList(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_StatementList[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_StatementList = {
  __pyx_pw_8cmonster_13_cmonster_ast_13StatementList_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8cmonster_13_cmonster_ast_StatementList, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_StatementList = {
  __pyx_pw_8cmonster_13_cmonster_ast_13StatementList_3__len__, /*mp_length*/
  __pyx_pw_8cmonster_13_cmonster_ast_13StatementList_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_StatementList = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.StatementList"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_StatementList, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8cmonster_13_cmonster_ast_13StatementList_7__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_StatementList, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_StatementList, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8cmonster_13_cmonster_ast_13StatementList_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_StatementList, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_StatementList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_StatementRange(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_StatementRange(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8cmonster_13_cmonster_ast_14StatementRange_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_StatementRange[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_StatementRange = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  __pyx_pw_8cmonster_13_cmonster_ast_14StatementRange_3__nonzero__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_StatementRange = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.StatementRange"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementRange), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_StatementRange, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_StatementRange, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_StatementRange, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_StatementRange, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_Statement(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Statement(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8cmonster_13_cmonster_ast_9Statement_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_9Statement_class_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_9Statement_10class_name_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_9Statement_location(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_9Statement_8location_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_9Statement_children(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_9Statement_8children_1__get__(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_Statement[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_Statement[] = {
  {(char *)"class_name", __pyx_getprop_8cmonster_13_cmonster_ast_9Statement_class_name, 0, 0, 0},
  {(char *)"location", __pyx_getprop_8cmonster_13_cmonster_ast_9Statement_location, 0, 0, 0},
  {(char *)"children", __pyx_getprop_8cmonster_13_cmonster_ast_9Statement_children, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_Statement = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.Statement"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_Statement), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Statement, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_Statement, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_Statement, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_Statement, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_Expr(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Statement(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_4Expr_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_4Expr_4type_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_Expr[] = {
  {(char *)"type", __pyx_getprop_8cmonster_13_cmonster_ast_4Expr_type, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_Expr = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.Expr"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_Expr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Statement, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_Expr, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_Expr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_UnaryOperator(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Expr(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_13UnaryOperator_opcode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_13UnaryOperator_6opcode_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_13UnaryOperator_subexpr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_13UnaryOperator_7subexpr_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_UnaryOperator[] = {
  {(char *)"opcode", __pyx_getprop_8cmonster_13_cmonster_ast_13UnaryOperator_opcode, 0, 0, 0},
  {(char *)"subexpr", __pyx_getprop_8cmonster_13_cmonster_ast_13UnaryOperator_subexpr, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_UnaryOperator = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.UnaryOperator"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_UnaryOperator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Statement, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_UnaryOperator, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_UnaryOperator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl __pyx_vtable_8cmonster_13_cmonster_ast_Decl;

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_Decl(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *)o);
  p->__pyx_vtab = __pyx_vtabptr_8cmonster_13_cmonster_ast_Decl;
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Decl(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_4Decl_location(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_4Decl_8location_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_4Decl_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_4Decl_4kind_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_4Decl_kind_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_4Decl_9kind_name_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_4Decl_body(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_4Decl_4body_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_4Decl_decl_context(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_4Decl_12decl_context_1__get__(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_Decl[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_Decl[] = {
  {(char *)"location", __pyx_getprop_8cmonster_13_cmonster_ast_4Decl_location, 0, 0, 0},
  {(char *)"kind", __pyx_getprop_8cmonster_13_cmonster_ast_4Decl_kind, 0, 0, 0},
  {(char *)"kind_name", __pyx_getprop_8cmonster_13_cmonster_ast_4Decl_kind_name, 0, 0, 0},
  {(char *)"body", __pyx_getprop_8cmonster_13_cmonster_ast_4Decl_body, 0, 0, 0},
  {(char *)"decl_context", __pyx_getprop_8cmonster_13_cmonster_ast_4Decl_decl_context, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_Decl = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.Decl"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Decl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_1__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_Decl, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_Decl, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_Decl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_TranslationUnitDecl __pyx_vtable_8cmonster_13_cmonster_ast_TranslationUnitDecl;

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_TranslationUnitDecl(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *p;
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Decl(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl*)__pyx_vtabptr_8cmonster_13_cmonster_ast_TranslationUnitDecl;
  p->parser = Py_None; Py_INCREF(Py_None);
  p->declcontext = ((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_TranslationUnitDecl(PyObject *o) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *p = (struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parser);
  Py_CLEAR(p->declcontext);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Decl(o);
}

static int __pyx_tp_traverse_8cmonster_13_cmonster_ast_TranslationUnitDecl(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *p = (struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *)o;
  e = ((likely(__pyx_ptype_8cmonster_13_cmonster_ast_Decl)) ? ((__pyx_ptype_8cmonster_13_cmonster_ast_Decl->tp_traverse) ? __pyx_ptype_8cmonster_13_cmonster_ast_Decl->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8cmonster_13_cmonster_ast_TranslationUnitDecl)); if (e) return e;
  if (p->parser) {
    e = (*v)(p->parser, a); if (e) return e;
  }
  if (p->declcontext) {
    e = (*v)(((PyObject*)p->declcontext), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8cmonster_13_cmonster_ast_TranslationUnitDecl(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *p = (struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl *)o;
  if (likely(__pyx_ptype_8cmonster_13_cmonster_ast_Decl)) { if (__pyx_ptype_8cmonster_13_cmonster_ast_Decl->tp_clear) __pyx_ptype_8cmonster_13_cmonster_ast_Decl->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8cmonster_13_cmonster_ast_TranslationUnitDecl);
  tmp = ((PyObject*)p->parser);
  p->parser = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->declcontext);
  p->declcontext = ((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_19TranslationUnitDecl_declarations(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_19TranslationUnitDecl_12declarations_1__get__(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_TranslationUnitDecl[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_TranslationUnitDecl[] = {
  {(char *)"declarations", __pyx_getprop_8cmonster_13_cmonster_ast_19TranslationUnitDecl_declarations, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_TranslationUnitDecl = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.TranslationUnitDecl"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_TranslationUnitDecl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_TranslationUnitDecl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_1__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8cmonster_13_cmonster_ast_TranslationUnitDecl, /*tp_traverse*/
  __pyx_tp_clear_8cmonster_13_cmonster_ast_TranslationUnitDecl, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_TranslationUnitDecl, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_TranslationUnitDecl, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8cmonster_13_cmonster_ast_19TranslationUnitDecl_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_TranslationUnitDecl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_DeclRefExpr(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Expr(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_11DeclRefExpr_decl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_11DeclRefExpr_4decl_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_DeclRefExpr[] = {
  {(char *)"decl", __pyx_getprop_8cmonster_13_cmonster_ast_11DeclRefExpr_decl, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_DeclRefExpr = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.DeclRefExpr"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclRefExpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Statement, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_DeclRefExpr, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_DeclRefExpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_ReturnStatement(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Statement(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_15ReturnStatement_return_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_15ReturnStatement_12return_value_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_ReturnStatement[] = {
  {(char *)"return_value", __pyx_getprop_8cmonster_13_cmonster_ast_15ReturnStatement_return_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_ReturnStatement = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.ReturnStatement"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_ReturnStatement), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Statement, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_ReturnStatement, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_ReturnStatement, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *__pyx_freelist_8cmonster_13_cmonster_ast___pyx_scope_struct____get__[8];
static int __pyx_freecount_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ = 0;

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast___pyx_scope_struct____get__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((__pyx_freecount_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__)))) {
    o = (PyObject*)__pyx_freelist_8cmonster_13_cmonster_ast___pyx_scope_struct____get__[--__pyx_freecount_8cmonster_13_cmonster_ast___pyx_scope_struct____get__];
    memset(o, 0, sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast___pyx_scope_struct____get__(PyObject *o) {
  struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *p = (struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if ((__pyx_freecount_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__))) {
    __pyx_freelist_8cmonster_13_cmonster_ast___pyx_scope_struct____get__[__pyx_freecount_8cmonster_13_cmonster_ast___pyx_scope_struct____get__++] = ((struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8cmonster_13_cmonster_ast___pyx_scope_struct____get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *p = (struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8cmonster_13_cmonster_ast___pyx_scope_struct____get__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *p = (struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_8cmonster_13_cmonster_ast_Statement *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.__pyx_scope_struct____get__"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast___pyx_scope_struct____get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast___pyx_scope_struct____get__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8cmonster_13_cmonster_ast___pyx_scope_struct____get__, /*tp_traverse*/
  __pyx_tp_clear_8cmonster_13_cmonster_ast___pyx_scope_struct____get__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast___pyx_scope_struct____get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_Type(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Type(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_4Type_builtin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_4Type_7builtin_1__get__(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_Type[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_Type[] = {
  {(char *)"builtin", __pyx_getprop_8cmonster_13_cmonster_ast_4Type_builtin, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_Type = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.Type"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_Type), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Type, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8cmonster_13_cmonster_ast_4Type_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8cmonster_13_cmonster_ast_4Type_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_Type, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_Type, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_Type, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_BuiltinType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Type(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_11BuiltinType_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_11BuiltinType_4kind_1__get__(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_BuiltinType[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_BuiltinType[] = {
  {(char *)"kind", __pyx_getprop_8cmonster_13_cmonster_ast_11BuiltinType_kind, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_BuiltinType = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.BuiltinType"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_BuiltinType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Type, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8cmonster_13_cmonster_ast_11BuiltinType_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Type_3__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_BuiltinType, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_BuiltinType, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_BuiltinType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_CompoundStatement(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Statement(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}
static PyObject *__pyx_sq_item_8cmonster_13_cmonster_ast_CompoundStatement(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_17CompoundStatement_body(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_4body_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_17CompoundStatement_left_bracket_location(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_21left_bracket_location_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_17CompoundStatement_right_bracket_location(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_22right_bracket_location_1__get__(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_CompoundStatement[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_CompoundStatement[] = {
  {(char *)"body", __pyx_getprop_8cmonster_13_cmonster_ast_17CompoundStatement_body, 0, 0, 0},
  {(char *)"left_bracket_location", __pyx_getprop_8cmonster_13_cmonster_ast_17CompoundStatement_left_bracket_location, 0, 0, 0},
  {(char *)"right_bracket_location", __pyx_getprop_8cmonster_13_cmonster_ast_17CompoundStatement_right_bracket_location, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_CompoundStatement = {
  __pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8cmonster_13_cmonster_ast_CompoundStatement, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CompoundStatement = {
  __pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_1__len__, /*mp_length*/
  __pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_CompoundStatement = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.CompoundStatement"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_CompoundStatement), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Statement, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_CompoundStatement, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CompoundStatement, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8cmonster_13_cmonster_ast_17CompoundStatement_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_CompoundStatement, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_CompoundStatement, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_CompoundStatement, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_NamedDecl __pyx_vtable_8cmonster_13_cmonster_ast_NamedDecl;

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_NamedDecl(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_NamedDecl *p;
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Decl(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8cmonster_13_cmonster_ast_NamedDecl *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl*)__pyx_vtabptr_8cmonster_13_cmonster_ast_NamedDecl;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_9NamedDecl_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_9NamedDecl_4name_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_NamedDecl[] = {
  {(char *)"name", __pyx_getprop_8cmonster_13_cmonster_ast_9NamedDecl_name, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_NamedDecl = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.NamedDecl"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_NamedDecl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Decl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_1__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_NamedDecl, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_NamedDecl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_ValueDecl __pyx_vtable_8cmonster_13_cmonster_ast_ValueDecl;

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_ValueDecl(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_ValueDecl *p;
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_NamedDecl(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8cmonster_13_cmonster_ast_ValueDecl *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl*)__pyx_vtabptr_8cmonster_13_cmonster_ast_ValueDecl;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_9ValueDecl_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_9ValueDecl_4type_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_ValueDecl[] = {
  {(char *)"type", __pyx_getprop_8cmonster_13_cmonster_ast_9ValueDecl_type, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_ValueDecl = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.ValueDecl"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_ValueDecl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Decl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_1__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_ValueDecl, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_ValueDecl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_DeclaratorDecl __pyx_vtable_8cmonster_13_cmonster_ast_DeclaratorDecl;

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_DeclaratorDecl(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclaratorDecl *p;
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_ValueDecl(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclaratorDecl *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl*)__pyx_vtabptr_8cmonster_13_cmonster_ast_DeclaratorDecl;
  return o;
}

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_DeclaratorDecl = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.DeclaratorDecl"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclaratorDecl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Decl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_1__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_DeclaratorDecl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_FunctionDecl __pyx_vtable_8cmonster_13_cmonster_ast_FunctionDecl;

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_FunctionDecl(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionDecl *p;
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_DeclaratorDecl(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionDecl *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl*)__pyx_vtabptr_8cmonster_13_cmonster_ast_FunctionDecl;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_12FunctionDecl_variadic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_12FunctionDecl_8variadic_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_12FunctionDecl_parameters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_12FunctionDecl_10parameters_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_FunctionDecl[] = {
  {(char *)"variadic", __pyx_getprop_8cmonster_13_cmonster_ast_12FunctionDecl_variadic, 0, 0, 0},
  {(char *)"parameters", __pyx_getprop_8cmonster_13_cmonster_ast_12FunctionDecl_parameters, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_FunctionDecl = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.FunctionDecl"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionDecl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Decl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_1__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_FunctionDecl, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_FunctionDecl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_FunctionType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Type(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_12FunctionType_result_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_12FunctionType_11result_type_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_FunctionType[] = {
  {(char *)"result_type", __pyx_getprop_8cmonster_13_cmonster_ast_12FunctionType_result_type, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_FunctionType = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.FunctionType"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Type, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Type_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Type_3__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_FunctionType, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_FunctionType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_FunctionNoProtoType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_FunctionType(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_FunctionNoProtoType = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.FunctionNoProtoType"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionNoProtoType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Type, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Type_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Type_3__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_FunctionNoProtoType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_ParmVarDeclIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_ParmVarDeclIterator(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_ParmVarDeclIterator[] = {
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pw_8cmonster_13_cmonster_ast_19ParmVarDeclIterator_1__next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_ParmVarDeclIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.ParmVarDeclIterator"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDeclIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_ParmVarDeclIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  __pyx_pw_8cmonster_13_cmonster_ast_19ParmVarDeclIterator_1__next__, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_ParmVarDeclIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_ParmVarDeclIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_QualType(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_QualType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8cmonster_13_cmonster_ast_8QualType_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_8QualType_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_8QualType_4type_1__get__(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_QualType[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_QualType[] = {
  {(char *)"type", __pyx_getprop_8cmonster_13_cmonster_ast_8QualType_type, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_QualType = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.QualType"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_QualType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_QualType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8cmonster_13_cmonster_ast_8QualType_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_QualType, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_QualType, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_QualType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_FunctionProtoType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_FunctionType(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_FunctionProtoType = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.FunctionProtoType"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionProtoType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Type, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Type_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Type_3__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_FunctionProtoType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_StatementIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_StatementIterator(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8cmonster_13_cmonster_ast_17StatementIterator_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_StatementIterator[] = {
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pw_8cmonster_13_cmonster_ast_17StatementIterator_3__next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_StatementIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.StatementIterator"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_StatementIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_StatementIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  __pyx_pw_8cmonster_13_cmonster_ast_17StatementIterator_3__next__, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_StatementIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_StatementIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_IntegerLiteral(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Expr(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_14IntegerLiteral_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_14IntegerLiteral_5value_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_IntegerLiteral[] = {
  {(char *)"value", __pyx_getprop_8cmonster_13_cmonster_ast_14IntegerLiteral_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_IntegerLiteral = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.IntegerLiteral"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_IntegerLiteral), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Statement, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_IntegerLiteral, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_IntegerLiteral, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_FunctionParameterList(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_FunctionParameterList(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_8cmonster_13_cmonster_ast_FunctionParameterList(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_FunctionParameterList[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_FunctionParameterList = {
  __pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8cmonster_13_cmonster_ast_FunctionParameterList, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_FunctionParameterList = {
  __pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_1__len__, /*mp_length*/
  __pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_FunctionParameterList = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.FunctionParameterList"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_FunctionParameterList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_FunctionParameterList, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_FunctionParameterList, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_FunctionParameterList, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8cmonster_13_cmonster_ast_21FunctionParameterList_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_FunctionParameterList, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_FunctionParameterList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_DeclContext(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *)o);
  p->translation_unit = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8cmonster_13_cmonster_ast_11DeclContext_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_DeclContext(PyObject *o) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *p = (struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->translation_unit);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8cmonster_13_cmonster_ast_DeclContext(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *p = (struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *)o;
  if (p->translation_unit) {
    e = (*v)(p->translation_unit, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8cmonster_13_cmonster_ast_DeclContext(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *p = (struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *)o;
  tmp = ((PyObject*)p->translation_unit);
  p->translation_unit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_11DeclContext_declarations(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_11DeclContext_12declarations_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_11DeclContext_translation_unit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_11DeclContext_16translation_unit_1__get__(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_DeclContext[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_DeclContext[] = {
  {(char *)"declarations", __pyx_getprop_8cmonster_13_cmonster_ast_11DeclContext_declarations, 0, __Pyx_DOCSTR(__pyx_k_Get_an_iterator_to_the_declarat), 0},
  {(char *)"translation_unit", __pyx_getprop_8cmonster_13_cmonster_ast_11DeclContext_translation_unit, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_DeclContext = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.DeclContext"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_DeclContext, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8cmonster_13_cmonster_ast_DeclContext, /*tp_traverse*/
  __pyx_tp_clear_8cmonster_13_cmonster_ast_DeclContext, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_DeclContext, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_DeclContext, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_DeclContext, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_VarDecl __pyx_vtable_8cmonster_13_cmonster_ast_VarDecl;

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_VarDecl(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_VarDecl *p;
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_DeclaratorDecl(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8cmonster_13_cmonster_ast_VarDecl *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl*)__pyx_vtabptr_8cmonster_13_cmonster_ast_VarDecl;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_7VarDecl_initializer(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_7VarDecl_11initializer_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_VarDecl[] = {
  {(char *)"initializer", __pyx_getprop_8cmonster_13_cmonster_ast_7VarDecl_initializer, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_VarDecl = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.VarDecl"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_VarDecl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Decl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_1__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_VarDecl, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_VarDecl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_ParmVarDecl __pyx_vtable_8cmonster_13_cmonster_ast_ParmVarDecl;

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_ParmVarDecl(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDecl *p;
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_VarDecl(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDecl *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8cmonster_13_cmonster_ast_Decl*)__pyx_vtabptr_8cmonster_13_cmonster_ast_ParmVarDecl;
  return o;
}

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_ParmVarDecl = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.ParmVarDecl"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_ParmVarDecl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Decl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_4Decl_1__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_ParmVarDecl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_DeclarationIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *)o);
  p->translation_unit = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8cmonster_13_cmonster_ast_DeclarationIterator(PyObject *o) {
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *p = (struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->translation_unit);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8cmonster_13_cmonster_ast_DeclarationIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *p = (struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *)o;
  if (p->translation_unit) {
    e = (*v)(p->translation_unit, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8cmonster_13_cmonster_ast_DeclarationIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *p = (struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator *)o;
  tmp = ((PyObject*)p->translation_unit);
  p->translation_unit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_19DeclarationIterator_translation_unit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_16translation_unit_1__get__(o);
}

static PyMethodDef __pyx_methods_8cmonster_13_cmonster_ast_DeclarationIterator[] = {
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_7__next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_DeclarationIterator[] = {
  {(char *)"translation_unit", __pyx_getprop_8cmonster_13_cmonster_ast_19DeclarationIterator_translation_unit, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_DeclarationIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.DeclarationIterator"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_DeclarationIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_DeclarationIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Iterator for declarations in a DeclContext. There's no random access to\n    declarations (that I can see?), so no __getattr__ is provided.\n    "), /*tp_doc*/
  __pyx_tp_traverse_8cmonster_13_cmonster_ast_DeclarationIterator, /*tp_traverse*/
  __pyx_tp_clear_8cmonster_13_cmonster_ast_DeclarationIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_5__iter__, /*tp_iter*/
  __pyx_pw_8cmonster_13_cmonster_ast_19DeclarationIterator_7__next__, /*tp_iternext*/
  __pyx_methods_8cmonster_13_cmonster_ast_DeclarationIterator, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_DeclarationIterator, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_DeclarationIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_CastExpr(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Expr(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_8CastExpr_subexpr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_8CastExpr_7subexpr_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_CastExpr[] = {
  {(char *)"subexpr", __pyx_getprop_8cmonster_13_cmonster_ast_8CastExpr_subexpr, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_CastExpr = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.CastExpr"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_CastExpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Statement, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_CastExpr, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_CastExpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_ImplicitCastExpr(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_CastExpr(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_ImplicitCastExpr = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.ImplicitCastExpr"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_ImplicitCastExpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Statement, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_ImplicitCastExpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8cmonster_13_cmonster_ast_IfStatement(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8cmonster_13_cmonster_ast_Statement(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_11IfStatement_condition(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_11IfStatement_9condition_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_11IfStatement_then(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_11IfStatement_4then_1__get__(o);
}

static PyObject *__pyx_getprop_8cmonster_13_cmonster_ast_11IfStatement_else_(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8cmonster_13_cmonster_ast_11IfStatement_5else__1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_8cmonster_13_cmonster_ast_IfStatement[] = {
  {(char *)"condition", __pyx_getprop_8cmonster_13_cmonster_ast_11IfStatement_condition, 0, 0, 0},
  {(char *)"then", __pyx_getprop_8cmonster_13_cmonster_ast_11IfStatement_then, 0, 0, 0},
  {(char *)"else_", __pyx_getprop_8cmonster_13_cmonster_ast_11IfStatement_else_, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8cmonster_13_cmonster_ast_IfStatement = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cmonster._cmonster_ast.IfStatement"), /*tp_name*/
  sizeof(struct __pyx_obj_8cmonster_13_cmonster_ast_IfStatement), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8cmonster_13_cmonster_ast_Statement, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8cmonster_13_cmonster_ast_9Statement_3__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8cmonster_13_cmonster_ast_IfStatement, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8cmonster_13_cmonster_ast_IfStatement, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("_cmonster_ast"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AddrOf, __pyx_k_AddrOf, sizeof(__pyx_k_AddrOf), 0, 0, 1, 1},
  {&__pyx_n_s_Bool, __pyx_k_Bool, sizeof(__pyx_k_Bool), 0, 0, 1, 1},
  {&__pyx_n_s_BoundMember, __pyx_k_BoundMember, sizeof(__pyx_k_BoundMember), 0, 0, 1, 1},
  {&__pyx_n_s_BuiltinTypeKind, __pyx_k_BuiltinTypeKind, sizeof(__pyx_k_BuiltinTypeKind), 0, 0, 1, 1},
  {&__pyx_n_s_BuiltinTypeKind___init, __pyx_k_BuiltinTypeKind___init, sizeof(__pyx_k_BuiltinTypeKind___init), 0, 0, 1, 1},
  {&__pyx_n_s_BuiltinTypeKind___repr, __pyx_k_BuiltinTypeKind___repr, sizeof(__pyx_k_BuiltinTypeKind___repr), 0, 0, 1, 1},
  {&__pyx_kp_s_BuiltinTypeKind_d_s, __pyx_k_BuiltinTypeKind_d_s, sizeof(__pyx_k_BuiltinTypeKind_d_s), 0, 0, 1, 0},
  {&__pyx_n_s_BuiltinTypeKinds, __pyx_k_BuiltinTypeKinds, sizeof(__pyx_k_BuiltinTypeKinds), 0, 0, 1, 1},
  {&__pyx_kp_s_BuiltinType_r, __pyx_k_BuiltinType_r, sizeof(__pyx_k_BuiltinType_r), 0, 0, 1, 0},
  {&__pyx_n_s_Char16, __pyx_k_Char16, sizeof(__pyx_k_Char16), 0, 0, 1, 1},
  {&__pyx_n_s_Char32, __pyx_k_Char32, sizeof(__pyx_k_Char32), 0, 0, 1, 1},
  {&__pyx_n_s_Char_S, __pyx_k_Char_S, sizeof(__pyx_k_Char_S), 0, 0, 1, 1},
  {&__pyx_n_s_Char_U, __pyx_k_Char_U, sizeof(__pyx_k_Char_U), 0, 0, 1, 1},
  {&__pyx_kp_s_Decl_s_ptr_0x_08x, __pyx_k_Decl_s_ptr_0x_08x, sizeof(__pyx_k_Decl_s_ptr_0x_08x), 0, 0, 1, 0},
  {&__pyx_n_s_Dependent, __pyx_k_Dependent, sizeof(__pyx_k_Dependent), 0, 0, 1, 1},
  {&__pyx_n_s_Deref, __pyx_k_Deref, sizeof(__pyx_k_Deref), 0, 0, 1, 1},
  {&__pyx_n_s_Double, __pyx_k_Double, sizeof(__pyx_k_Double), 0, 0, 1, 1},
  {&__pyx_n_s_Extension, __pyx_k_Extension, sizeof(__pyx_k_Extension), 0, 0, 1, 1},
  {&__pyx_n_s_Float, __pyx_k_Float, sizeof(__pyx_k_Float), 0, 0, 1, 1},
  {&__pyx_n_s_Imag, __pyx_k_Imag, sizeof(__pyx_k_Imag), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Index_out_of_range, __pyx_k_Index_out_of_range, sizeof(__pyx_k_Index_out_of_range), 0, 0, 1, 0},
  {&__pyx_n_s_Int, __pyx_k_Int, sizeof(__pyx_k_Int), 0, 0, 1, 1},
  {&__pyx_n_s_Int128, __pyx_k_Int128, sizeof(__pyx_k_Int128), 0, 0, 1, 1},
  {&__pyx_n_s_LNot, __pyx_k_LNot, sizeof(__pyx_k_LNot), 0, 0, 1, 1},
  {&__pyx_n_s_Long, __pyx_k_Long, sizeof(__pyx_k_Long), 0, 0, 1, 1},
  {&__pyx_n_s_LongDouble, __pyx_k_LongDouble, sizeof(__pyx_k_LongDouble), 0, 0, 1, 1},
  {&__pyx_n_s_LongLong, __pyx_k_LongLong, sizeof(__pyx_k_LongLong), 0, 0, 1, 1},
  {&__pyx_n_s_Minus, __pyx_k_Minus, sizeof(__pyx_k_Minus), 0, 0, 1, 1},
  {&__pyx_n_s_Not, __pyx_k_Not, sizeof(__pyx_k_Not), 0, 0, 1, 1},
  {&__pyx_n_s_NullPtr, __pyx_k_NullPtr, sizeof(__pyx_k_NullPtr), 0, 0, 1, 1},
  {&__pyx_n_s_ObjCClass, __pyx_k_ObjCClass, sizeof(__pyx_k_ObjCClass), 0, 0, 1, 1},
  {&__pyx_n_s_ObjCId, __pyx_k_ObjCId, sizeof(__pyx_k_ObjCId), 0, 0, 1, 1},
  {&__pyx_n_s_ObjCSel, __pyx_k_ObjCSel, sizeof(__pyx_k_ObjCSel), 0, 0, 1, 1},
  {&__pyx_n_s_Overload, __pyx_k_Overload, sizeof(__pyx_k_Overload), 0, 0, 1, 1},
  {&__pyx_kp_s_Parameter_index_out_of_range, __pyx_k_Parameter_index_out_of_range, sizeof(__pyx_k_Parameter_index_out_of_range), 0, 0, 1, 0},
  {&__pyx_n_s_Plus, __pyx_k_Plus, sizeof(__pyx_k_Plus), 0, 0, 1, 1},
  {&__pyx_n_s_PostDec, __pyx_k_PostDec, sizeof(__pyx_k_PostDec), 0, 0, 1, 1},
  {&__pyx_n_s_PostInc, __pyx_k_PostInc, sizeof(__pyx_k_PostInc), 0, 0, 1, 1},
  {&__pyx_n_s_PreDec, __pyx_k_PreDec, sizeof(__pyx_k_PreDec), 0, 0, 1, 1},
  {&__pyx_n_s_PreInc, __pyx_k_PreInc, sizeof(__pyx_k_PreInc), 0, 0, 1, 1},
  {&__pyx_kp_s_QualType_r, __pyx_k_QualType_r, sizeof(__pyx_k_QualType_r), 0, 0, 1, 0},
  {&__pyx_n_s_Real, __pyx_k_Real, sizeof(__pyx_k_Real), 0, 0, 1, 1},
  {&__pyx_n_s_SChar, __pyx_k_SChar, sizeof(__pyx_k_SChar), 0, 0, 1, 1},
  {&__pyx_n_s_Short, __pyx_k_Short, sizeof(__pyx_k_Short), 0, 0, 1, 1},
  {&__pyx_n_s_SourceLocation, __pyx_k_SourceLocation, sizeof(__pyx_k_SourceLocation), 0, 0, 1, 1},
  {&__pyx_kp_s_Statement_s, __pyx_k_Statement_s, sizeof(__pyx_k_Statement_s), 0, 0, 1, 0},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_kp_s_Type_s, __pyx_k_Type_s, sizeof(__pyx_k_Type_s), 0, 0, 1, 0},
  {&__pyx_n_s_UChar, __pyx_k_UChar, sizeof(__pyx_k_UChar), 0, 0, 1, 1},
  {&__pyx_n_s_UInt, __pyx_k_UInt, sizeof(__pyx_k_UInt), 0, 0, 1, 1},
  {&__pyx_n_s_UInt128, __pyx_k_UInt128, sizeof(__pyx_k_UInt128), 0, 0, 1, 1},
  {&__pyx_n_s_ULong, __pyx_k_ULong, sizeof(__pyx_k_ULong), 0, 0, 1, 1},
  {&__pyx_n_s_ULongLong, __pyx_k_ULongLong, sizeof(__pyx_k_ULongLong), 0, 0, 1, 1},
  {&__pyx_n_s_UShort, __pyx_k_UShort, sizeof(__pyx_k_UShort), 0, 0, 1, 1},
  {&__pyx_n_s_UnaryOperatorKind, __pyx_k_UnaryOperatorKind, sizeof(__pyx_k_UnaryOperatorKind), 0, 0, 1, 1},
  {&__pyx_n_s_UnaryOperatorKind___init, __pyx_k_UnaryOperatorKind___init, sizeof(__pyx_k_UnaryOperatorKind___init), 0, 0, 1, 1},
  {&__pyx_n_s_UnaryOperatorKind___repr, __pyx_k_UnaryOperatorKind___repr, sizeof(__pyx_k_UnaryOperatorKind___repr), 0, 0, 1, 1},
  {&__pyx_kp_s_UnaryOperatorKind_d_s, __pyx_k_UnaryOperatorKind_d_s, sizeof(__pyx_k_UnaryOperatorKind_d_s), 0, 0, 1, 0},
  {&__pyx_n_s_UnaryOperatorKinds, __pyx_k_UnaryOperatorKinds, sizeof(__pyx_k_UnaryOperatorKinds), 0, 0, 1, 1},
  {&__pyx_n_s_UnknownAny, __pyx_k_UnknownAny, sizeof(__pyx_k_UnknownAny), 0, 0, 1, 1},
  {&__pyx_n_s_Void, __pyx_k_Void, sizeof(__pyx_k_Void), 0, 0, 1, 1},
  {&__pyx_n_s_WChar_S, __pyx_k_WChar_S, sizeof(__pyx_k_WChar_S), 0, 0, 1, 1},
  {&__pyx_n_s_WChar_U, __pyx_k_WChar_U, sizeof(__pyx_k_WChar_U), 0, 0, 1, 1},
  {&__pyx_n_s_add_type_kind, __pyx_k_add_type_kind, sizeof(__pyx_k_add_type_kind), 0, 0, 1, 1},
  {&__pyx_n_s_add_unaryoperator_kind, __pyx_k_add_unaryoperator_kind, sizeof(__pyx_k_add_unaryoperator_kind), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_body, __pyx_k_body, sizeof(__pyx_k_body), 0, 0, 1, 1},
  {&__pyx_n_s_capsule, __pyx_k_capsule, sizeof(__pyx_k_capsule), 0, 0, 1, 1},
  {&__pyx_n_s_class_name, __pyx_k_class_name, sizeof(__pyx_k_class_name), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cmonster, __pyx_k_cmonster, sizeof(__pyx_k_cmonster), 0, 0, 1, 1},
  {&__pyx_n_s_cmonster__cmonster_ast, __pyx_k_cmonster__cmonster_ast, sizeof(__pyx_k_cmonster__cmonster_ast), 0, 0, 1, 1},
  {&__pyx_n_s_decl_context, __pyx_k_decl_context, sizeof(__pyx_k_decl_context), 0, 0, 1, 1},
  {&__pyx_n_s_declarations, __pyx_k_declarations, sizeof(__pyx_k_declarations), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_kp_s_home_sztomi_projects_cmonster_s, __pyx_k_home_sztomi_projects_cmonster_s, sizeof(__pyx_k_home_sztomi_projects_cmonster_s), 0, 0, 1, 0},
  {&__pyx_kp_s_home_sztomi_projects_cmonster_s_2, __pyx_k_home_sztomi_projects_cmonster_s_2, sizeof(__pyx_k_home_sztomi_projects_cmonster_s_2), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_kind, __pyx_k_kind, sizeof(__pyx_k_kind), 0, 0, 1, 1},
  {&__pyx_n_s_kind_name, __pyx_k_kind_name, sizeof(__pyx_k_kind_name), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_parser, __pyx_k_parser, sizeof(__pyx_k_parser), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_translation_unit, __pyx_k_translation_unit, sizeof(__pyx_k_translation_unit), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.decls.pxi":160
 *     def __getitem__(self, i):
 *         if i < 0 or i >= len(self):
 *             raise IndexError("Parameter index out of range")             # <<<<<<<<<<<<<<
 *         return create_Decl(self.function.param_begin()[i])
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Parameter_index_out_of_range); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.statements.pxi":98
 *     def __getitem__(self, i):
 *         if i < 0 or i >= len(self):
 *             raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 *         return create_Statement(self.begin[i], self.astctx)
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Index_out_of_range); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":36
 * # DRY.
 * class BuiltinTypeKind:
 *     def __init__(self, kind, name):             # <<<<<<<<<<<<<<
 *         self.kind = kind
 *         self.name = name
 */
  __pyx_tuple__3 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_kind, __pyx_n_s_name); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sztomi_projects_cmonster_s, __pyx_n_s_init, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":39
 *         self.kind = kind
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "BuiltinTypeKind(%d, %s)" % (self.kind, self.name)
 * BuiltinTypeKinds = {}
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sztomi_projects_cmonster_s, __pyx_n_s_repr, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":42
 *         return "BuiltinTypeKind(%d, %s)" % (self.kind, self.name)
 * BuiltinTypeKinds = {}
 * def add_type_kind(name, value):             # <<<<<<<<<<<<<<
 *     BuiltinTypeKinds[value] = BuiltinTypeKind(value, name)
 * add_type_kind("Void", clang.types.Void)
 */
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_value); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sztomi_projects_cmonster_s, __pyx_n_s_add_type_kind, 42, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":61
 * 
 * class UnaryOperatorKind:
 *     def __init__(self, kind, name):             # <<<<<<<<<<<<<<
 *         self.kind = kind
 *         self.name = name
 */
  __pyx_tuple__9 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_kind, __pyx_n_s_name); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sztomi_projects_cmonster_s_2, __pyx_n_s_init, 61, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":64
 *         self.kind = kind
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "UnaryOperatorKind(%d, %s)" % (self.kind, self.name)
 * UnaryOperatorKinds = {}
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sztomi_projects_cmonster_s_2, __pyx_n_s_repr, 64, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":67
 *         return "UnaryOperatorKind(%d, %s)" % (self.kind, self.name)
 * UnaryOperatorKinds = {}
 * def add_unaryoperator_kind(name, value):             # <<<<<<<<<<<<<<
 *     UnaryOperatorKinds[value] = UnaryOperatorKind(value, name)
 * add_unaryoperator_kind("PostInc", clang.exprs.UO_PostInc)
 */
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_value); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sztomi_projects_cmonster_s_2, __pyx_n_s_add_unaryoperator_kind, 67, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_cmonster_ast(void); /*proto*/
PyMODINIT_FUNC init_cmonster_ast(void)
#else
PyMODINIT_FUNC PyInit__cmonster_ast(void); /*proto*/
PyMODINIT_FUNC PyInit__cmonster_ast(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__cmonster_ast(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_cmonster_ast"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_cmonster___cmonster_ast) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "cmonster._cmonster_ast")) {
      if (unlikely(PyDict_SetItemString(modules, "cmonster._cmonster_ast", __pyx_m) < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_StatementList) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_StatementList.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "StatementList", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_StatementList) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_StatementList = &__pyx_type_8cmonster_13_cmonster_ast_StatementList;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_StatementRange) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_StatementRange.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "StatementRange", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_StatementRange) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_StatementRange = &__pyx_type_8cmonster_13_cmonster_ast_StatementRange;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_Statement) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_Statement.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "Statement", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_Statement) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_Statement = &__pyx_type_8cmonster_13_cmonster_ast_Statement;
  __pyx_type_8cmonster_13_cmonster_ast_Expr.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Statement;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_Expr) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_Expr.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "Expr", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_Expr) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_Expr = &__pyx_type_8cmonster_13_cmonster_ast_Expr;
  __pyx_type_8cmonster_13_cmonster_ast_UnaryOperator.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Expr;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_UnaryOperator) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_UnaryOperator.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "UnaryOperator", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_UnaryOperator) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator = &__pyx_type_8cmonster_13_cmonster_ast_UnaryOperator;
  __pyx_vtabptr_8cmonster_13_cmonster_ast_Decl = &__pyx_vtable_8cmonster_13_cmonster_ast_Decl;
  __pyx_vtable_8cmonster_13_cmonster_ast_Decl.__pyx___getDeclContext = (struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *(*)(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *))__pyx_f_8cmonster_13_cmonster_ast_4Decl___getDeclContext;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_Decl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_Decl.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8cmonster_13_cmonster_ast_Decl.tp_dict, __pyx_vtabptr_8cmonster_13_cmonster_ast_Decl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Decl", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_Decl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_Decl = &__pyx_type_8cmonster_13_cmonster_ast_Decl;
  __pyx_vtabptr_8cmonster_13_cmonster_ast_TranslationUnitDecl = &__pyx_vtable_8cmonster_13_cmonster_ast_TranslationUnitDecl;
  __pyx_vtable_8cmonster_13_cmonster_ast_TranslationUnitDecl.__pyx_base = *__pyx_vtabptr_8cmonster_13_cmonster_ast_Decl;
  __pyx_vtable_8cmonster_13_cmonster_ast_TranslationUnitDecl.__pyx_base.__pyx___getDeclContext = (struct __pyx_obj_8cmonster_13_cmonster_ast_DeclContext *(*)(struct __pyx_obj_8cmonster_13_cmonster_ast_Decl *))__pyx_f_8cmonster_13_cmonster_ast_19TranslationUnitDecl___getDeclContext;
  __pyx_type_8cmonster_13_cmonster_ast_TranslationUnitDecl.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Decl;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_TranslationUnitDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_TranslationUnitDecl.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8cmonster_13_cmonster_ast_TranslationUnitDecl.tp_dict, __pyx_vtabptr_8cmonster_13_cmonster_ast_TranslationUnitDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "TranslationUnitDecl", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_TranslationUnitDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_TranslationUnitDecl = &__pyx_type_8cmonster_13_cmonster_ast_TranslationUnitDecl;
  __pyx_type_8cmonster_13_cmonster_ast_DeclRefExpr.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Expr;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_DeclRefExpr) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_DeclRefExpr.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "DeclRefExpr", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_DeclRefExpr) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_DeclRefExpr = &__pyx_type_8cmonster_13_cmonster_ast_DeclRefExpr;
  __pyx_type_8cmonster_13_cmonster_ast_ReturnStatement.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Statement;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_ReturnStatement) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_ReturnStatement.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "ReturnStatement", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_ReturnStatement) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_ReturnStatement = &__pyx_type_8cmonster_13_cmonster_ast_ReturnStatement;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast___pyx_scope_struct____get__) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast___pyx_scope_struct____get__.tp_print = 0;
  __pyx_ptype_8cmonster_13_cmonster_ast___pyx_scope_struct____get__ = &__pyx_type_8cmonster_13_cmonster_ast___pyx_scope_struct____get__;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_Type) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_Type.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "Type", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_Type) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_Type = &__pyx_type_8cmonster_13_cmonster_ast_Type;
  __pyx_type_8cmonster_13_cmonster_ast_BuiltinType.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Type;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_BuiltinType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_BuiltinType.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "BuiltinType", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_BuiltinType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType = &__pyx_type_8cmonster_13_cmonster_ast_BuiltinType;
  __pyx_type_8cmonster_13_cmonster_ast_CompoundStatement.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Statement;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_CompoundStatement) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_CompoundStatement.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "CompoundStatement", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_CompoundStatement) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_CompoundStatement = &__pyx_type_8cmonster_13_cmonster_ast_CompoundStatement;
  __pyx_vtabptr_8cmonster_13_cmonster_ast_NamedDecl = &__pyx_vtable_8cmonster_13_cmonster_ast_NamedDecl;
  __pyx_vtable_8cmonster_13_cmonster_ast_NamedDecl.__pyx_base = *__pyx_vtabptr_8cmonster_13_cmonster_ast_Decl;
  __pyx_type_8cmonster_13_cmonster_ast_NamedDecl.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Decl;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_NamedDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_NamedDecl.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8cmonster_13_cmonster_ast_NamedDecl.tp_dict, __pyx_vtabptr_8cmonster_13_cmonster_ast_NamedDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "NamedDecl", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_NamedDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_NamedDecl = &__pyx_type_8cmonster_13_cmonster_ast_NamedDecl;
  __pyx_vtabptr_8cmonster_13_cmonster_ast_ValueDecl = &__pyx_vtable_8cmonster_13_cmonster_ast_ValueDecl;
  __pyx_vtable_8cmonster_13_cmonster_ast_ValueDecl.__pyx_base = *__pyx_vtabptr_8cmonster_13_cmonster_ast_NamedDecl;
  __pyx_type_8cmonster_13_cmonster_ast_ValueDecl.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_NamedDecl;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_ValueDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_ValueDecl.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8cmonster_13_cmonster_ast_ValueDecl.tp_dict, __pyx_vtabptr_8cmonster_13_cmonster_ast_ValueDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ValueDecl", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_ValueDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_ValueDecl = &__pyx_type_8cmonster_13_cmonster_ast_ValueDecl;
  __pyx_vtabptr_8cmonster_13_cmonster_ast_DeclaratorDecl = &__pyx_vtable_8cmonster_13_cmonster_ast_DeclaratorDecl;
  __pyx_vtable_8cmonster_13_cmonster_ast_DeclaratorDecl.__pyx_base = *__pyx_vtabptr_8cmonster_13_cmonster_ast_ValueDecl;
  __pyx_type_8cmonster_13_cmonster_ast_DeclaratorDecl.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_ValueDecl;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_DeclaratorDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_DeclaratorDecl.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8cmonster_13_cmonster_ast_DeclaratorDecl.tp_dict, __pyx_vtabptr_8cmonster_13_cmonster_ast_DeclaratorDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "DeclaratorDecl", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_DeclaratorDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_DeclaratorDecl = &__pyx_type_8cmonster_13_cmonster_ast_DeclaratorDecl;
  __pyx_vtabptr_8cmonster_13_cmonster_ast_FunctionDecl = &__pyx_vtable_8cmonster_13_cmonster_ast_FunctionDecl;
  __pyx_vtable_8cmonster_13_cmonster_ast_FunctionDecl.__pyx_base = *__pyx_vtabptr_8cmonster_13_cmonster_ast_DeclaratorDecl;
  __pyx_type_8cmonster_13_cmonster_ast_FunctionDecl.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_DeclaratorDecl;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_FunctionDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_FunctionDecl.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8cmonster_13_cmonster_ast_FunctionDecl.tp_dict, __pyx_vtabptr_8cmonster_13_cmonster_ast_FunctionDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "FunctionDecl", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_FunctionDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_FunctionDecl = &__pyx_type_8cmonster_13_cmonster_ast_FunctionDecl;
  __pyx_type_8cmonster_13_cmonster_ast_FunctionType.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Type;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_FunctionType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_FunctionType.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "FunctionType", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_FunctionType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_FunctionType = &__pyx_type_8cmonster_13_cmonster_ast_FunctionType;
  __pyx_type_8cmonster_13_cmonster_ast_FunctionNoProtoType.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_FunctionType;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_FunctionNoProtoType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_FunctionNoProtoType.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "FunctionNoProtoType", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_FunctionNoProtoType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_FunctionNoProtoType = &__pyx_type_8cmonster_13_cmonster_ast_FunctionNoProtoType;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_ParmVarDeclIterator) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_ParmVarDeclIterator.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "ParmVarDeclIterator", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_ParmVarDeclIterator) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_ParmVarDeclIterator = &__pyx_type_8cmonster_13_cmonster_ast_ParmVarDeclIterator;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_QualType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_QualType.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "QualType", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_QualType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_QualType = &__pyx_type_8cmonster_13_cmonster_ast_QualType;
  __pyx_type_8cmonster_13_cmonster_ast_FunctionProtoType.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_FunctionType;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_FunctionProtoType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_FunctionProtoType.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "FunctionProtoType", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_FunctionProtoType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_FunctionProtoType = &__pyx_type_8cmonster_13_cmonster_ast_FunctionProtoType;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_StatementIterator) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_StatementIterator.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "StatementIterator", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_StatementIterator) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_StatementIterator = &__pyx_type_8cmonster_13_cmonster_ast_StatementIterator;
  __pyx_type_8cmonster_13_cmonster_ast_IntegerLiteral.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Expr;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_IntegerLiteral) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_IntegerLiteral.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "IntegerLiteral", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_IntegerLiteral) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_IntegerLiteral = &__pyx_type_8cmonster_13_cmonster_ast_IntegerLiteral;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_FunctionParameterList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_FunctionParameterList.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "FunctionParameterList", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_FunctionParameterList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_FunctionParameterList = &__pyx_type_8cmonster_13_cmonster_ast_FunctionParameterList;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_DeclContext) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_DeclContext.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "DeclContext", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_DeclContext) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_DeclContext = &__pyx_type_8cmonster_13_cmonster_ast_DeclContext;
  __pyx_vtabptr_8cmonster_13_cmonster_ast_VarDecl = &__pyx_vtable_8cmonster_13_cmonster_ast_VarDecl;
  __pyx_vtable_8cmonster_13_cmonster_ast_VarDecl.__pyx_base = *__pyx_vtabptr_8cmonster_13_cmonster_ast_DeclaratorDecl;
  __pyx_type_8cmonster_13_cmonster_ast_VarDecl.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_DeclaratorDecl;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_VarDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_VarDecl.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8cmonster_13_cmonster_ast_VarDecl.tp_dict, __pyx_vtabptr_8cmonster_13_cmonster_ast_VarDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "VarDecl", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_VarDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_VarDecl = &__pyx_type_8cmonster_13_cmonster_ast_VarDecl;
  __pyx_vtabptr_8cmonster_13_cmonster_ast_ParmVarDecl = &__pyx_vtable_8cmonster_13_cmonster_ast_ParmVarDecl;
  __pyx_vtable_8cmonster_13_cmonster_ast_ParmVarDecl.__pyx_base = *__pyx_vtabptr_8cmonster_13_cmonster_ast_VarDecl;
  __pyx_type_8cmonster_13_cmonster_ast_ParmVarDecl.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_VarDecl;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_ParmVarDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_ParmVarDecl.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8cmonster_13_cmonster_ast_ParmVarDecl.tp_dict, __pyx_vtabptr_8cmonster_13_cmonster_ast_ParmVarDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ParmVarDecl", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_ParmVarDecl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_ParmVarDecl = &__pyx_type_8cmonster_13_cmonster_ast_ParmVarDecl;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_DeclarationIterator) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_DeclarationIterator.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "DeclarationIterator", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_DeclarationIterator) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_DeclarationIterator = &__pyx_type_8cmonster_13_cmonster_ast_DeclarationIterator;
  __pyx_type_8cmonster_13_cmonster_ast_CastExpr.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Expr;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_CastExpr) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_CastExpr.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "CastExpr", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_CastExpr) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_CastExpr = &__pyx_type_8cmonster_13_cmonster_ast_CastExpr;
  __pyx_type_8cmonster_13_cmonster_ast_ImplicitCastExpr.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_CastExpr;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_ImplicitCastExpr) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_ImplicitCastExpr.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "ImplicitCastExpr", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_ImplicitCastExpr) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_ImplicitCastExpr = &__pyx_type_8cmonster_13_cmonster_ast_ImplicitCastExpr;
  __pyx_type_8cmonster_13_cmonster_ast_IfStatement.tp_base = __pyx_ptype_8cmonster_13_cmonster_ast_Statement;
  if (PyType_Ready(&__pyx_type_8cmonster_13_cmonster_ast_IfStatement) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8cmonster_13_cmonster_ast_IfStatement.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "IfStatement", (PyObject *)&__pyx_type_8cmonster_13_cmonster_ast_IfStatement) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cmonster_13_cmonster_ast_IfStatement = &__pyx_type_8cmonster_13_cmonster_ast_IfStatement;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.source.pxi":24
 * 
 * 
 * import cmonster             # <<<<<<<<<<<<<<
 * cdef object create_SourceLocation(clang.source.SourceLocation loc,
 *                                   clang.source.SourceManager *mgr):
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_cmonster, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cmonster, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":35
 * # Unfortunately, we can't directly access "cdef enum"'s from Python. So long,
 * # DRY.
 * class BuiltinTypeKind:             # <<<<<<<<<<<<<<
 *     def __init__(self, kind, name):
 *         self.kind = kind
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_BuiltinTypeKind, __pyx_n_s_BuiltinTypeKind, (PyObject *) NULL, __pyx_n_s_cmonster__cmonster_ast, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":36
 * # DRY.
 * class BuiltinTypeKind:
 *     def __init__(self, kind, name):             # <<<<<<<<<<<<<<
 *         self.kind = kind
 *         self.name = name
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8cmonster_13_cmonster_ast_15BuiltinTypeKind_1__init__, 0, __pyx_n_s_BuiltinTypeKind___init, NULL, __pyx_n_s_cmonster__cmonster_ast, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_init, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":39
 *         self.kind = kind
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "BuiltinTypeKind(%d, %s)" % (self.kind, self.name)
 * BuiltinTypeKinds = {}
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8cmonster_13_cmonster_ast_15BuiltinTypeKind_3__repr__, 0, __pyx_n_s_BuiltinTypeKind___repr, NULL, __pyx_n_s_cmonster__cmonster_ast, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_repr, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":35
 * # Unfortunately, we can't directly access "cdef enum"'s from Python. So long,
 * # DRY.
 * class BuiltinTypeKind:             # <<<<<<<<<<<<<<
 *     def __init__(self, kind, name):
 *         self.kind = kind
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_BuiltinTypeKind, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BuiltinTypeKind, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":41
 *     def __repr__(self):
 *         return "BuiltinTypeKind(%d, %s)" % (self.kind, self.name)
 * BuiltinTypeKinds = {}             # <<<<<<<<<<<<<<
 * def add_type_kind(name, value):
 *     BuiltinTypeKinds[value] = BuiltinTypeKind(value, name)
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BuiltinTypeKinds, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":42
 *         return "BuiltinTypeKind(%d, %s)" % (self.kind, self.name)
 * BuiltinTypeKinds = {}
 * def add_type_kind(name, value):             # <<<<<<<<<<<<<<
 *     BuiltinTypeKinds[value] = BuiltinTypeKind(value, name)
 * add_type_kind("Void", clang.types.Void)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8cmonster_13_cmonster_ast_1add_type_kind, NULL, __pyx_n_s_cmonster__cmonster_ast); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_type_kind, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":44
 * def add_type_kind(name, value):
 *     BuiltinTypeKinds[value] = BuiltinTypeKind(value, name)
 * add_type_kind("Void", clang.types.Void)             # <<<<<<<<<<<<<<
 * add_type_kind("Bool", clang.types.Bool)
 * add_type_kind("Char_U", clang.types.Char_U)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::BuiltinType::Void); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Void);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Void);
  __Pyx_GIVEREF(__pyx_n_s_Void);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":45
 *     BuiltinTypeKinds[value] = BuiltinTypeKind(value, name)
 * add_type_kind("Void", clang.types.Void)
 * add_type_kind("Bool", clang.types.Bool)             # <<<<<<<<<<<<<<
 * add_type_kind("Char_U", clang.types.Char_U)
 * add_type_kind("UChar", clang.types.UChar)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Bool); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Bool);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Bool);
  __Pyx_GIVEREF(__pyx_n_s_Bool);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":46
 * add_type_kind("Void", clang.types.Void)
 * add_type_kind("Bool", clang.types.Bool)
 * add_type_kind("Char_U", clang.types.Char_U)             # <<<<<<<<<<<<<<
 * add_type_kind("UChar", clang.types.UChar)
 * add_type_kind("WChar_U", clang.types.WChar_U)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_FromLong(clang::BuiltinType::Char_U); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Char_U);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Char_U);
  __Pyx_GIVEREF(__pyx_n_s_Char_U);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":47
 * add_type_kind("Bool", clang.types.Bool)
 * add_type_kind("Char_U", clang.types.Char_U)
 * add_type_kind("UChar", clang.types.UChar)             # <<<<<<<<<<<<<<
 * add_type_kind("WChar_U", clang.types.WChar_U)
 * add_type_kind("Char16", clang.types.Char16)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::BuiltinType::UChar); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_UChar);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_UChar);
  __Pyx_GIVEREF(__pyx_n_s_UChar);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":48
 * add_type_kind("Char_U", clang.types.Char_U)
 * add_type_kind("UChar", clang.types.UChar)
 * add_type_kind("WChar_U", clang.types.WChar_U)             # <<<<<<<<<<<<<<
 * add_type_kind("Char16", clang.types.Char16)
 * add_type_kind("Char32", clang.types.Char32)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::WChar_U); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_WChar_U);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_WChar_U);
  __Pyx_GIVEREF(__pyx_n_s_WChar_U);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":49
 * add_type_kind("UChar", clang.types.UChar)
 * add_type_kind("WChar_U", clang.types.WChar_U)
 * add_type_kind("Char16", clang.types.Char16)             # <<<<<<<<<<<<<<
 * add_type_kind("Char32", clang.types.Char32)
 * add_type_kind("UShort", clang.types.UShort)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_FromLong(clang::BuiltinType::Char16); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Char16);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Char16);
  __Pyx_GIVEREF(__pyx_n_s_Char16);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":50
 * add_type_kind("WChar_U", clang.types.WChar_U)
 * add_type_kind("Char16", clang.types.Char16)
 * add_type_kind("Char32", clang.types.Char32)             # <<<<<<<<<<<<<<
 * add_type_kind("UShort", clang.types.UShort)
 * add_type_kind("UInt", clang.types.UInt)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::BuiltinType::Char32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Char32);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Char32);
  __Pyx_GIVEREF(__pyx_n_s_Char32);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":51
 * add_type_kind("Char16", clang.types.Char16)
 * add_type_kind("Char32", clang.types.Char32)
 * add_type_kind("UShort", clang.types.UShort)             # <<<<<<<<<<<<<<
 * add_type_kind("UInt", clang.types.UInt)
 * add_type_kind("ULong", clang.types.ULong)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::UShort); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_UShort);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_UShort);
  __Pyx_GIVEREF(__pyx_n_s_UShort);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":52
 * add_type_kind("Char32", clang.types.Char32)
 * add_type_kind("UShort", clang.types.UShort)
 * add_type_kind("UInt", clang.types.UInt)             # <<<<<<<<<<<<<<
 * add_type_kind("ULong", clang.types.ULong)
 * add_type_kind("ULongLong", clang.types.ULongLong)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_FromLong(clang::BuiltinType::UInt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_UInt);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_UInt);
  __Pyx_GIVEREF(__pyx_n_s_UInt);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":53
 * add_type_kind("UShort", clang.types.UShort)
 * add_type_kind("UInt", clang.types.UInt)
 * add_type_kind("ULong", clang.types.ULong)             # <<<<<<<<<<<<<<
 * add_type_kind("ULongLong", clang.types.ULongLong)
 * add_type_kind("UInt128", clang.types.UInt128)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::BuiltinType::ULong); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ULong);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ULong);
  __Pyx_GIVEREF(__pyx_n_s_ULong);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":54
 * add_type_kind("UInt", clang.types.UInt)
 * add_type_kind("ULong", clang.types.ULong)
 * add_type_kind("ULongLong", clang.types.ULongLong)             # <<<<<<<<<<<<<<
 * add_type_kind("UInt128", clang.types.UInt128)
 * add_type_kind("Char_S", clang.types.Char_S)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::ULongLong); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ULongLong);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ULongLong);
  __Pyx_GIVEREF(__pyx_n_s_ULongLong);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":55
 * add_type_kind("ULong", clang.types.ULong)
 * add_type_kind("ULongLong", clang.types.ULongLong)
 * add_type_kind("UInt128", clang.types.UInt128)             # <<<<<<<<<<<<<<
 * add_type_kind("Char_S", clang.types.Char_S)
 * add_type_kind("SChar", clang.types.SChar)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_FromLong(clang::BuiltinType::UInt128); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_UInt128);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_UInt128);
  __Pyx_GIVEREF(__pyx_n_s_UInt128);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":56
 * add_type_kind("ULongLong", clang.types.ULongLong)
 * add_type_kind("UInt128", clang.types.UInt128)
 * add_type_kind("Char_S", clang.types.Char_S)             # <<<<<<<<<<<<<<
 * add_type_kind("SChar", clang.types.SChar)
 * add_type_kind("WChar_S", clang.types.WChar_S)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::BuiltinType::Char_S); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Char_S);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Char_S);
  __Pyx_GIVEREF(__pyx_n_s_Char_S);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":57
 * add_type_kind("UInt128", clang.types.UInt128)
 * add_type_kind("Char_S", clang.types.Char_S)
 * add_type_kind("SChar", clang.types.SChar)             # <<<<<<<<<<<<<<
 * add_type_kind("WChar_S", clang.types.WChar_S)
 * add_type_kind("Short", clang.types.Short)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::SChar); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_SChar);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_SChar);
  __Pyx_GIVEREF(__pyx_n_s_SChar);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":58
 * add_type_kind("Char_S", clang.types.Char_S)
 * add_type_kind("SChar", clang.types.SChar)
 * add_type_kind("WChar_S", clang.types.WChar_S)             # <<<<<<<<<<<<<<
 * add_type_kind("Short", clang.types.Short)
 * add_type_kind("Int", clang.types.Int)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_FromLong(clang::BuiltinType::WChar_S); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_WChar_S);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_WChar_S);
  __Pyx_GIVEREF(__pyx_n_s_WChar_S);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":59
 * add_type_kind("SChar", clang.types.SChar)
 * add_type_kind("WChar_S", clang.types.WChar_S)
 * add_type_kind("Short", clang.types.Short)             # <<<<<<<<<<<<<<
 * add_type_kind("Int", clang.types.Int)
 * add_type_kind("Long", clang.types.Long)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::BuiltinType::Short); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Short);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Short);
  __Pyx_GIVEREF(__pyx_n_s_Short);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":60
 * add_type_kind("WChar_S", clang.types.WChar_S)
 * add_type_kind("Short", clang.types.Short)
 * add_type_kind("Int", clang.types.Int)             # <<<<<<<<<<<<<<
 * add_type_kind("Long", clang.types.Long)
 * add_type_kind("LongLong", clang.types.LongLong)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Int); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Int);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Int);
  __Pyx_GIVEREF(__pyx_n_s_Int);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":61
 * add_type_kind("Short", clang.types.Short)
 * add_type_kind("Int", clang.types.Int)
 * add_type_kind("Long", clang.types.Long)             # <<<<<<<<<<<<<<
 * add_type_kind("LongLong", clang.types.LongLong)
 * add_type_kind("Int128", clang.types.Int128)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_FromLong(clang::BuiltinType::Long); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Long);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Long);
  __Pyx_GIVEREF(__pyx_n_s_Long);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":62
 * add_type_kind("Int", clang.types.Int)
 * add_type_kind("Long", clang.types.Long)
 * add_type_kind("LongLong", clang.types.LongLong)             # <<<<<<<<<<<<<<
 * add_type_kind("Int128", clang.types.Int128)
 * add_type_kind("Float", clang.types.Float)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::BuiltinType::LongLong); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_LongLong);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_LongLong);
  __Pyx_GIVEREF(__pyx_n_s_LongLong);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":63
 * add_type_kind("Long", clang.types.Long)
 * add_type_kind("LongLong", clang.types.LongLong)
 * add_type_kind("Int128", clang.types.Int128)             # <<<<<<<<<<<<<<
 * add_type_kind("Float", clang.types.Float)
 * add_type_kind("Double", clang.types.Double)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Int128); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Int128);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Int128);
  __Pyx_GIVEREF(__pyx_n_s_Int128);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":64
 * add_type_kind("LongLong", clang.types.LongLong)
 * add_type_kind("Int128", clang.types.Int128)
 * add_type_kind("Float", clang.types.Float)             # <<<<<<<<<<<<<<
 * add_type_kind("Double", clang.types.Double)
 * add_type_kind("LongDouble", clang.types.LongDouble)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_FromLong(clang::BuiltinType::Float); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Float);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Float);
  __Pyx_GIVEREF(__pyx_n_s_Float);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":65
 * add_type_kind("Int128", clang.types.Int128)
 * add_type_kind("Float", clang.types.Float)
 * add_type_kind("Double", clang.types.Double)             # <<<<<<<<<<<<<<
 * add_type_kind("LongDouble", clang.types.LongDouble)
 * add_type_kind("NullPtr", clang.types.NullPtr)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::BuiltinType::Double); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Double);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Double);
  __Pyx_GIVEREF(__pyx_n_s_Double);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":66
 * add_type_kind("Float", clang.types.Float)
 * add_type_kind("Double", clang.types.Double)
 * add_type_kind("LongDouble", clang.types.LongDouble)             # <<<<<<<<<<<<<<
 * add_type_kind("NullPtr", clang.types.NullPtr)
 * add_type_kind("ObjCId", clang.types.ObjCId)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::LongDouble); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LongDouble);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LongDouble);
  __Pyx_GIVEREF(__pyx_n_s_LongDouble);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":67
 * add_type_kind("Double", clang.types.Double)
 * add_type_kind("LongDouble", clang.types.LongDouble)
 * add_type_kind("NullPtr", clang.types.NullPtr)             # <<<<<<<<<<<<<<
 * add_type_kind("ObjCId", clang.types.ObjCId)
 * add_type_kind("ObjCClass", clang.types.ObjCClass)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_FromLong(clang::BuiltinType::NullPtr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NullPtr);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NullPtr);
  __Pyx_GIVEREF(__pyx_n_s_NullPtr);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":68
 * add_type_kind("LongDouble", clang.types.LongDouble)
 * add_type_kind("NullPtr", clang.types.NullPtr)
 * add_type_kind("ObjCId", clang.types.ObjCId)             # <<<<<<<<<<<<<<
 * add_type_kind("ObjCClass", clang.types.ObjCClass)
 * add_type_kind("ObjCSel", clang.types.ObjCSel)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::BuiltinType::ObjCId); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ObjCId);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ObjCId);
  __Pyx_GIVEREF(__pyx_n_s_ObjCId);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":69
 * add_type_kind("NullPtr", clang.types.NullPtr)
 * add_type_kind("ObjCId", clang.types.ObjCId)
 * add_type_kind("ObjCClass", clang.types.ObjCClass)             # <<<<<<<<<<<<<<
 * add_type_kind("ObjCSel", clang.types.ObjCSel)
 * add_type_kind("Dependent", clang.types.Dependent)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::ObjCClass); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ObjCClass);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ObjCClass);
  __Pyx_GIVEREF(__pyx_n_s_ObjCClass);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":70
 * add_type_kind("ObjCId", clang.types.ObjCId)
 * add_type_kind("ObjCClass", clang.types.ObjCClass)
 * add_type_kind("ObjCSel", clang.types.ObjCSel)             # <<<<<<<<<<<<<<
 * add_type_kind("Dependent", clang.types.Dependent)
 * add_type_kind("Overload", clang.types.Overload)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_FromLong(clang::BuiltinType::ObjCSel); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ObjCSel);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ObjCSel);
  __Pyx_GIVEREF(__pyx_n_s_ObjCSel);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":71
 * add_type_kind("ObjCClass", clang.types.ObjCClass)
 * add_type_kind("ObjCSel", clang.types.ObjCSel)
 * add_type_kind("Dependent", clang.types.Dependent)             # <<<<<<<<<<<<<<
 * add_type_kind("Overload", clang.types.Overload)
 * add_type_kind("BoundMember", clang.types.BoundMember)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::BuiltinType::Dependent); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Dependent);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Dependent);
  __Pyx_GIVEREF(__pyx_n_s_Dependent);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":72
 * add_type_kind("ObjCSel", clang.types.ObjCSel)
 * add_type_kind("Dependent", clang.types.Dependent)
 * add_type_kind("Overload", clang.types.Overload)             # <<<<<<<<<<<<<<
 * add_type_kind("BoundMember", clang.types.BoundMember)
 * add_type_kind("UnknownAny", clang.types.UnknownAny)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Overload); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Overload);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Overload);
  __Pyx_GIVEREF(__pyx_n_s_Overload);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":73
 * add_type_kind("Dependent", clang.types.Dependent)
 * add_type_kind("Overload", clang.types.Overload)
 * add_type_kind("BoundMember", clang.types.BoundMember)             # <<<<<<<<<<<<<<
 * add_type_kind("UnknownAny", clang.types.UnknownAny)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_FromLong(clang::BuiltinType::BoundMember); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_BoundMember);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_BoundMember);
  __Pyx_GIVEREF(__pyx_n_s_BoundMember);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":74
 * add_type_kind("Overload", clang.types.Overload)
 * add_type_kind("BoundMember", clang.types.BoundMember)
 * add_type_kind("UnknownAny", clang.types.UnknownAny)             # <<<<<<<<<<<<<<
 * 
 * cdef class BuiltinType(Type):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_type_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::BuiltinType::UnknownAny); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_UnknownAny);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_UnknownAny);
  __Pyx_GIVEREF(__pyx_n_s_UnknownAny);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":77
 * 
 * cdef class BuiltinType(Type):
 *     Void = BuiltinTypeKinds[clang.types.Void]             # <<<<<<<<<<<<<<
 *     Bool = BuiltinTypeKinds[clang.types.Bool]
 *     Char_U = BuiltinTypeKinds[clang.types.Char_U]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Void); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Void, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":78
 * cdef class BuiltinType(Type):
 *     Void = BuiltinTypeKinds[clang.types.Void]
 *     Bool = BuiltinTypeKinds[clang.types.Bool]             # <<<<<<<<<<<<<<
 *     Char_U = BuiltinTypeKinds[clang.types.Char_U]
 *     UChar = BuiltinTypeKinds[clang.types.UChar]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Bool); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Bool, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":79
 *     Void = BuiltinTypeKinds[clang.types.Void]
 *     Bool = BuiltinTypeKinds[clang.types.Bool]
 *     Char_U = BuiltinTypeKinds[clang.types.Char_U]             # <<<<<<<<<<<<<<
 *     UChar = BuiltinTypeKinds[clang.types.UChar]
 *     WChar_U = BuiltinTypeKinds[clang.types.WChar_U]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Char_U); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Char_U, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":80
 *     Bool = BuiltinTypeKinds[clang.types.Bool]
 *     Char_U = BuiltinTypeKinds[clang.types.Char_U]
 *     UChar = BuiltinTypeKinds[clang.types.UChar]             # <<<<<<<<<<<<<<
 *     WChar_U = BuiltinTypeKinds[clang.types.WChar_U]
 *     Char16 = BuiltinTypeKinds[clang.types.Char16]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::UChar); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_UChar, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":81
 *     Char_U = BuiltinTypeKinds[clang.types.Char_U]
 *     UChar = BuiltinTypeKinds[clang.types.UChar]
 *     WChar_U = BuiltinTypeKinds[clang.types.WChar_U]             # <<<<<<<<<<<<<<
 *     Char16 = BuiltinTypeKinds[clang.types.Char16]
 *     Char32 = BuiltinTypeKinds[clang.types.Char32]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::WChar_U); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_WChar_U, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":82
 *     UChar = BuiltinTypeKinds[clang.types.UChar]
 *     WChar_U = BuiltinTypeKinds[clang.types.WChar_U]
 *     Char16 = BuiltinTypeKinds[clang.types.Char16]             # <<<<<<<<<<<<<<
 *     Char32 = BuiltinTypeKinds[clang.types.Char32]
 *     UShort = BuiltinTypeKinds[clang.types.UShort]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Char16); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Char16, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":83
 *     WChar_U = BuiltinTypeKinds[clang.types.WChar_U]
 *     Char16 = BuiltinTypeKinds[clang.types.Char16]
 *     Char32 = BuiltinTypeKinds[clang.types.Char32]             # <<<<<<<<<<<<<<
 *     UShort = BuiltinTypeKinds[clang.types.UShort]
 *     UInt = BuiltinTypeKinds[clang.types.UInt]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Char32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Char32, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":84
 *     Char16 = BuiltinTypeKinds[clang.types.Char16]
 *     Char32 = BuiltinTypeKinds[clang.types.Char32]
 *     UShort = BuiltinTypeKinds[clang.types.UShort]             # <<<<<<<<<<<<<<
 *     UInt = BuiltinTypeKinds[clang.types.UInt]
 *     ULong = BuiltinTypeKinds[clang.types.ULong]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::UShort); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_UShort, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":85
 *     Char32 = BuiltinTypeKinds[clang.types.Char32]
 *     UShort = BuiltinTypeKinds[clang.types.UShort]
 *     UInt = BuiltinTypeKinds[clang.types.UInt]             # <<<<<<<<<<<<<<
 *     ULong = BuiltinTypeKinds[clang.types.ULong]
 *     ULongLong = BuiltinTypeKinds[clang.types.ULongLong]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::UInt); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_UInt, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":86
 *     UShort = BuiltinTypeKinds[clang.types.UShort]
 *     UInt = BuiltinTypeKinds[clang.types.UInt]
 *     ULong = BuiltinTypeKinds[clang.types.ULong]             # <<<<<<<<<<<<<<
 *     ULongLong = BuiltinTypeKinds[clang.types.ULongLong]
 *     UInt128 = BuiltinTypeKinds[clang.types.UInt128]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::ULong); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_ULong, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":87
 *     UInt = BuiltinTypeKinds[clang.types.UInt]
 *     ULong = BuiltinTypeKinds[clang.types.ULong]
 *     ULongLong = BuiltinTypeKinds[clang.types.ULongLong]             # <<<<<<<<<<<<<<
 *     UInt128 = BuiltinTypeKinds[clang.types.UInt128]
 *     Char_S = BuiltinTypeKinds[clang.types.Char_S]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::ULongLong); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_ULongLong, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":88
 *     ULong = BuiltinTypeKinds[clang.types.ULong]
 *     ULongLong = BuiltinTypeKinds[clang.types.ULongLong]
 *     UInt128 = BuiltinTypeKinds[clang.types.UInt128]             # <<<<<<<<<<<<<<
 *     Char_S = BuiltinTypeKinds[clang.types.Char_S]
 *     SChar = BuiltinTypeKinds[clang.types.SChar]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::UInt128); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_UInt128, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":89
 *     ULongLong = BuiltinTypeKinds[clang.types.ULongLong]
 *     UInt128 = BuiltinTypeKinds[clang.types.UInt128]
 *     Char_S = BuiltinTypeKinds[clang.types.Char_S]             # <<<<<<<<<<<<<<
 *     SChar = BuiltinTypeKinds[clang.types.SChar]
 *     WChar_S = BuiltinTypeKinds[clang.types.WChar_S]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Char_S); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Char_S, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":90
 *     UInt128 = BuiltinTypeKinds[clang.types.UInt128]
 *     Char_S = BuiltinTypeKinds[clang.types.Char_S]
 *     SChar = BuiltinTypeKinds[clang.types.SChar]             # <<<<<<<<<<<<<<
 *     WChar_S = BuiltinTypeKinds[clang.types.WChar_S]
 *     Short = BuiltinTypeKinds[clang.types.Short]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::SChar); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_SChar, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":91
 *     Char_S = BuiltinTypeKinds[clang.types.Char_S]
 *     SChar = BuiltinTypeKinds[clang.types.SChar]
 *     WChar_S = BuiltinTypeKinds[clang.types.WChar_S]             # <<<<<<<<<<<<<<
 *     Short = BuiltinTypeKinds[clang.types.Short]
 *     Int = BuiltinTypeKinds[clang.types.Int]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::WChar_S); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_WChar_S, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":92
 *     SChar = BuiltinTypeKinds[clang.types.SChar]
 *     WChar_S = BuiltinTypeKinds[clang.types.WChar_S]
 *     Short = BuiltinTypeKinds[clang.types.Short]             # <<<<<<<<<<<<<<
 *     Int = BuiltinTypeKinds[clang.types.Int]
 *     Long = BuiltinTypeKinds[clang.types.Long]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Short); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Short, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":93
 *     WChar_S = BuiltinTypeKinds[clang.types.WChar_S]
 *     Short = BuiltinTypeKinds[clang.types.Short]
 *     Int = BuiltinTypeKinds[clang.types.Int]             # <<<<<<<<<<<<<<
 *     Long = BuiltinTypeKinds[clang.types.Long]
 *     LongLong = BuiltinTypeKinds[clang.types.LongLong]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Int); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Int, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":94
 *     Short = BuiltinTypeKinds[clang.types.Short]
 *     Int = BuiltinTypeKinds[clang.types.Int]
 *     Long = BuiltinTypeKinds[clang.types.Long]             # <<<<<<<<<<<<<<
 *     LongLong = BuiltinTypeKinds[clang.types.LongLong]
 *     Int128 = BuiltinTypeKinds[clang.types.Int128]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Long); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Long, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":95
 *     Int = BuiltinTypeKinds[clang.types.Int]
 *     Long = BuiltinTypeKinds[clang.types.Long]
 *     LongLong = BuiltinTypeKinds[clang.types.LongLong]             # <<<<<<<<<<<<<<
 *     Int128 = BuiltinTypeKinds[clang.types.Int128]
 *     Float = BuiltinTypeKinds[clang.types.Float]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::LongLong); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_LongLong, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":96
 *     Long = BuiltinTypeKinds[clang.types.Long]
 *     LongLong = BuiltinTypeKinds[clang.types.LongLong]
 *     Int128 = BuiltinTypeKinds[clang.types.Int128]             # <<<<<<<<<<<<<<
 *     Float = BuiltinTypeKinds[clang.types.Float]
 *     Double = BuiltinTypeKinds[clang.types.Double]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Int128); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Int128, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":97
 *     LongLong = BuiltinTypeKinds[clang.types.LongLong]
 *     Int128 = BuiltinTypeKinds[clang.types.Int128]
 *     Float = BuiltinTypeKinds[clang.types.Float]             # <<<<<<<<<<<<<<
 *     Double = BuiltinTypeKinds[clang.types.Double]
 *     LongDouble = BuiltinTypeKinds[clang.types.LongDouble]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Float); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Float, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":98
 *     Int128 = BuiltinTypeKinds[clang.types.Int128]
 *     Float = BuiltinTypeKinds[clang.types.Float]
 *     Double = BuiltinTypeKinds[clang.types.Double]             # <<<<<<<<<<<<<<
 *     LongDouble = BuiltinTypeKinds[clang.types.LongDouble]
 *     NullPtr = BuiltinTypeKinds[clang.types.NullPtr]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Double); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Double, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":99
 *     Float = BuiltinTypeKinds[clang.types.Float]
 *     Double = BuiltinTypeKinds[clang.types.Double]
 *     LongDouble = BuiltinTypeKinds[clang.types.LongDouble]             # <<<<<<<<<<<<<<
 *     NullPtr = BuiltinTypeKinds[clang.types.NullPtr]
 *     ObjCId = BuiltinTypeKinds[clang.types.ObjCId]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::LongDouble); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_LongDouble, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":100
 *     Double = BuiltinTypeKinds[clang.types.Double]
 *     LongDouble = BuiltinTypeKinds[clang.types.LongDouble]
 *     NullPtr = BuiltinTypeKinds[clang.types.NullPtr]             # <<<<<<<<<<<<<<
 *     ObjCId = BuiltinTypeKinds[clang.types.ObjCId]
 *     ObjCClass = BuiltinTypeKinds[clang.types.ObjCClass]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::NullPtr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_NullPtr, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":101
 *     LongDouble = BuiltinTypeKinds[clang.types.LongDouble]
 *     NullPtr = BuiltinTypeKinds[clang.types.NullPtr]
 *     ObjCId = BuiltinTypeKinds[clang.types.ObjCId]             # <<<<<<<<<<<<<<
 *     ObjCClass = BuiltinTypeKinds[clang.types.ObjCClass]
 *     ObjCSel = BuiltinTypeKinds[clang.types.ObjCSel]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::ObjCId); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_ObjCId, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":102
 *     NullPtr = BuiltinTypeKinds[clang.types.NullPtr]
 *     ObjCId = BuiltinTypeKinds[clang.types.ObjCId]
 *     ObjCClass = BuiltinTypeKinds[clang.types.ObjCClass]             # <<<<<<<<<<<<<<
 *     ObjCSel = BuiltinTypeKinds[clang.types.ObjCSel]
 *     Dependent = BuiltinTypeKinds[clang.types.Dependent]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::ObjCClass); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_ObjCClass, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":103
 *     ObjCId = BuiltinTypeKinds[clang.types.ObjCId]
 *     ObjCClass = BuiltinTypeKinds[clang.types.ObjCClass]
 *     ObjCSel = BuiltinTypeKinds[clang.types.ObjCSel]             # <<<<<<<<<<<<<<
 *     Dependent = BuiltinTypeKinds[clang.types.Dependent]
 *     Overload = BuiltinTypeKinds[clang.types.Overload]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::ObjCSel); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_ObjCSel, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":104
 *     ObjCClass = BuiltinTypeKinds[clang.types.ObjCClass]
 *     ObjCSel = BuiltinTypeKinds[clang.types.ObjCSel]
 *     Dependent = BuiltinTypeKinds[clang.types.Dependent]             # <<<<<<<<<<<<<<
 *     Overload = BuiltinTypeKinds[clang.types.Overload]
 *     BoundMember = BuiltinTypeKinds[clang.types.BoundMember]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Dependent); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Dependent, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":105
 *     ObjCSel = BuiltinTypeKinds[clang.types.ObjCSel]
 *     Dependent = BuiltinTypeKinds[clang.types.Dependent]
 *     Overload = BuiltinTypeKinds[clang.types.Overload]             # <<<<<<<<<<<<<<
 *     BoundMember = BuiltinTypeKinds[clang.types.BoundMember]
 *     UnknownAny = BuiltinTypeKinds[clang.types.UnknownAny]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::Overload); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_Overload, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":106
 *     Dependent = BuiltinTypeKinds[clang.types.Dependent]
 *     Overload = BuiltinTypeKinds[clang.types.Overload]
 *     BoundMember = BuiltinTypeKinds[clang.types.BoundMember]             # <<<<<<<<<<<<<<
 *     UnknownAny = BuiltinTypeKinds[clang.types.UnknownAny]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::BoundMember); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_BoundMember, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.types.pxi":107
 *     Overload = BuiltinTypeKinds[clang.types.Overload]
 *     BoundMember = BuiltinTypeKinds[clang.types.BoundMember]
 *     UnknownAny = BuiltinTypeKinds[clang.types.UnknownAny]             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BuiltinTypeKinds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(clang::BuiltinType::UnknownAny); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType->tp_dict, __pyx_n_s_UnknownAny, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_BuiltinType);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":60
 * ###############################################################################
 * 
 * class UnaryOperatorKind:             # <<<<<<<<<<<<<<
 *     def __init__(self, kind, name):
 *         self.kind = kind
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_UnaryOperatorKind, __pyx_n_s_UnaryOperatorKind, (PyObject *) NULL, __pyx_n_s_cmonster__cmonster_ast, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":61
 * 
 * class UnaryOperatorKind:
 *     def __init__(self, kind, name):             # <<<<<<<<<<<<<<
 *         self.kind = kind
 *         self.name = name
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8cmonster_13_cmonster_ast_17UnaryOperatorKind_1__init__, 0, __pyx_n_s_UnaryOperatorKind___init, NULL, __pyx_n_s_cmonster__cmonster_ast, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_init, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":64
 *         self.kind = kind
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "UnaryOperatorKind(%d, %s)" % (self.kind, self.name)
 * UnaryOperatorKinds = {}
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8cmonster_13_cmonster_ast_17UnaryOperatorKind_3__repr__, 0, __pyx_n_s_UnaryOperatorKind___repr, NULL, __pyx_n_s_cmonster__cmonster_ast, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_repr, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":60
 * ###############################################################################
 * 
 * class UnaryOperatorKind:             # <<<<<<<<<<<<<<
 *     def __init__(self, kind, name):
 *         self.kind = kind
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_UnaryOperatorKind, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnaryOperatorKind, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":66
 *     def __repr__(self):
 *         return "UnaryOperatorKind(%d, %s)" % (self.kind, self.name)
 * UnaryOperatorKinds = {}             # <<<<<<<<<<<<<<
 * def add_unaryoperator_kind(name, value):
 *     UnaryOperatorKinds[value] = UnaryOperatorKind(value, name)
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnaryOperatorKinds, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":67
 *         return "UnaryOperatorKind(%d, %s)" % (self.kind, self.name)
 * UnaryOperatorKinds = {}
 * def add_unaryoperator_kind(name, value):             # <<<<<<<<<<<<<<
 *     UnaryOperatorKinds[value] = UnaryOperatorKind(value, name)
 * add_unaryoperator_kind("PostInc", clang.exprs.UO_PostInc)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8cmonster_13_cmonster_ast_3add_unaryoperator_kind, NULL, __pyx_n_s_cmonster__cmonster_ast); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_unaryoperator_kind, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":69
 * def add_unaryoperator_kind(name, value):
 *     UnaryOperatorKinds[value] = UnaryOperatorKind(value, name)
 * add_unaryoperator_kind("PostInc", clang.exprs.UO_PostInc)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("PostDec", clang.exprs.UO_PostDec)
 * add_unaryoperator_kind("PreInc", clang.exprs.UO_PreInc)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::UO_PostInc); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_PostInc);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PostInc);
  __Pyx_GIVEREF(__pyx_n_s_PostInc);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":70
 *     UnaryOperatorKinds[value] = UnaryOperatorKind(value, name)
 * add_unaryoperator_kind("PostInc", clang.exprs.UO_PostInc)
 * add_unaryoperator_kind("PostDec", clang.exprs.UO_PostDec)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("PreInc", clang.exprs.UO_PreInc)
 * add_unaryoperator_kind("PreDec", clang.exprs.UO_PreDec)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(clang::UO_PostDec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_PostDec);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PostDec);
  __Pyx_GIVEREF(__pyx_n_s_PostDec);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":71
 * add_unaryoperator_kind("PostInc", clang.exprs.UO_PostInc)
 * add_unaryoperator_kind("PostDec", clang.exprs.UO_PostDec)
 * add_unaryoperator_kind("PreInc", clang.exprs.UO_PreInc)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("PreDec", clang.exprs.UO_PreDec)
 * add_unaryoperator_kind("AddrOf", clang.exprs.UO_AddrOf)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyInt_FromLong(clang::UO_PreInc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_PreInc);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_PreInc);
  __Pyx_GIVEREF(__pyx_n_s_PreInc);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":72
 * add_unaryoperator_kind("PostDec", clang.exprs.UO_PostDec)
 * add_unaryoperator_kind("PreInc", clang.exprs.UO_PreInc)
 * add_unaryoperator_kind("PreDec", clang.exprs.UO_PreDec)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("AddrOf", clang.exprs.UO_AddrOf)
 * add_unaryoperator_kind("Deref", clang.exprs.UO_Deref)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::UO_PreDec); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_PreDec);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PreDec);
  __Pyx_GIVEREF(__pyx_n_s_PreDec);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":73
 * add_unaryoperator_kind("PreInc", clang.exprs.UO_PreInc)
 * add_unaryoperator_kind("PreDec", clang.exprs.UO_PreDec)
 * add_unaryoperator_kind("AddrOf", clang.exprs.UO_AddrOf)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("Deref", clang.exprs.UO_Deref)
 * add_unaryoperator_kind("Plus", clang.exprs.UO_Plus)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(clang::UO_AddrOf); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_AddrOf);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_AddrOf);
  __Pyx_GIVEREF(__pyx_n_s_AddrOf);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":74
 * add_unaryoperator_kind("PreDec", clang.exprs.UO_PreDec)
 * add_unaryoperator_kind("AddrOf", clang.exprs.UO_AddrOf)
 * add_unaryoperator_kind("Deref", clang.exprs.UO_Deref)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("Plus", clang.exprs.UO_Plus)
 * add_unaryoperator_kind("Minus", clang.exprs.UO_Minus)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyInt_FromLong(clang::UO_Deref); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Deref);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Deref);
  __Pyx_GIVEREF(__pyx_n_s_Deref);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":75
 * add_unaryoperator_kind("AddrOf", clang.exprs.UO_AddrOf)
 * add_unaryoperator_kind("Deref", clang.exprs.UO_Deref)
 * add_unaryoperator_kind("Plus", clang.exprs.UO_Plus)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("Minus", clang.exprs.UO_Minus)
 * add_unaryoperator_kind("Not", clang.exprs.UO_Not)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::UO_Plus); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Plus);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Plus);
  __Pyx_GIVEREF(__pyx_n_s_Plus);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":76
 * add_unaryoperator_kind("Deref", clang.exprs.UO_Deref)
 * add_unaryoperator_kind("Plus", clang.exprs.UO_Plus)
 * add_unaryoperator_kind("Minus", clang.exprs.UO_Minus)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("Not", clang.exprs.UO_Not)
 * add_unaryoperator_kind("LNot", clang.exprs.UO_LNot)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(clang::UO_Minus); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Minus);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Minus);
  __Pyx_GIVEREF(__pyx_n_s_Minus);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":77
 * add_unaryoperator_kind("Plus", clang.exprs.UO_Plus)
 * add_unaryoperator_kind("Minus", clang.exprs.UO_Minus)
 * add_unaryoperator_kind("Not", clang.exprs.UO_Not)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("LNot", clang.exprs.UO_LNot)
 * add_unaryoperator_kind("Real", clang.exprs.UO_Real)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyInt_FromLong(clang::UO_Not); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Not);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Not);
  __Pyx_GIVEREF(__pyx_n_s_Not);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":78
 * add_unaryoperator_kind("Minus", clang.exprs.UO_Minus)
 * add_unaryoperator_kind("Not", clang.exprs.UO_Not)
 * add_unaryoperator_kind("LNot", clang.exprs.UO_LNot)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("Real", clang.exprs.UO_Real)
 * add_unaryoperator_kind("Imag", clang.exprs.UO_Imag)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::UO_LNot); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_LNot);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_LNot);
  __Pyx_GIVEREF(__pyx_n_s_LNot);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":79
 * add_unaryoperator_kind("Not", clang.exprs.UO_Not)
 * add_unaryoperator_kind("LNot", clang.exprs.UO_LNot)
 * add_unaryoperator_kind("Real", clang.exprs.UO_Real)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("Imag", clang.exprs.UO_Imag)
 * add_unaryoperator_kind("Extension", clang.exprs.UO_Extension)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(clang::UO_Real); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Real);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Real);
  __Pyx_GIVEREF(__pyx_n_s_Real);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":80
 * add_unaryoperator_kind("LNot", clang.exprs.UO_LNot)
 * add_unaryoperator_kind("Real", clang.exprs.UO_Real)
 * add_unaryoperator_kind("Imag", clang.exprs.UO_Imag)             # <<<<<<<<<<<<<<
 * add_unaryoperator_kind("Extension", clang.exprs.UO_Extension)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyInt_FromLong(clang::UO_Imag); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Imag);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Imag);
  __Pyx_GIVEREF(__pyx_n_s_Imag);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":81
 * add_unaryoperator_kind("Real", clang.exprs.UO_Real)
 * add_unaryoperator_kind("Imag", clang.exprs.UO_Imag)
 * add_unaryoperator_kind("Extension", clang.exprs.UO_Extension)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_unaryoperator_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(clang::UO_Extension); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Extension);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Extension);
  __Pyx_GIVEREF(__pyx_n_s_Extension);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":85
 * 
 * cdef class UnaryOperator(Expr):
 *     PostInc = UnaryOperatorKinds[clang.exprs.UO_PostInc]             # <<<<<<<<<<<<<<
 *     PostDec = UnaryOperatorKinds[clang.exprs.UO_PostDec]
 *     PreInc = UnaryOperatorKinds[clang.exprs.UO_PreInc]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(clang::UO_PostInc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_PostInc, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":86
 * cdef class UnaryOperator(Expr):
 *     PostInc = UnaryOperatorKinds[clang.exprs.UO_PostInc]
 *     PostDec = UnaryOperatorKinds[clang.exprs.UO_PostDec]             # <<<<<<<<<<<<<<
 *     PreInc = UnaryOperatorKinds[clang.exprs.UO_PreInc]
 *     PreDec = UnaryOperatorKinds[clang.exprs.UO_PreDec]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::UO_PostDec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_PostDec, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":87
 *     PostInc = UnaryOperatorKinds[clang.exprs.UO_PostInc]
 *     PostDec = UnaryOperatorKinds[clang.exprs.UO_PostDec]
 *     PreInc = UnaryOperatorKinds[clang.exprs.UO_PreInc]             # <<<<<<<<<<<<<<
 *     PreDec = UnaryOperatorKinds[clang.exprs.UO_PreDec]
 *     AddrOf = UnaryOperatorKinds[clang.exprs.UO_AddrOf]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(clang::UO_PreInc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_PreInc, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":88
 *     PostDec = UnaryOperatorKinds[clang.exprs.UO_PostDec]
 *     PreInc = UnaryOperatorKinds[clang.exprs.UO_PreInc]
 *     PreDec = UnaryOperatorKinds[clang.exprs.UO_PreDec]             # <<<<<<<<<<<<<<
 *     AddrOf = UnaryOperatorKinds[clang.exprs.UO_AddrOf]
 *     Deref = UnaryOperatorKinds[clang.exprs.UO_Deref]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::UO_PreDec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_PreDec, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":89
 *     PreInc = UnaryOperatorKinds[clang.exprs.UO_PreInc]
 *     PreDec = UnaryOperatorKinds[clang.exprs.UO_PreDec]
 *     AddrOf = UnaryOperatorKinds[clang.exprs.UO_AddrOf]             # <<<<<<<<<<<<<<
 *     Deref = UnaryOperatorKinds[clang.exprs.UO_Deref]
 *     Plus = UnaryOperatorKinds[clang.exprs.UO_Plus]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(clang::UO_AddrOf); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_AddrOf, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":90
 *     PreDec = UnaryOperatorKinds[clang.exprs.UO_PreDec]
 *     AddrOf = UnaryOperatorKinds[clang.exprs.UO_AddrOf]
 *     Deref = UnaryOperatorKinds[clang.exprs.UO_Deref]             # <<<<<<<<<<<<<<
 *     Plus = UnaryOperatorKinds[clang.exprs.UO_Plus]
 *     Minus = UnaryOperatorKinds[clang.exprs.UO_Minus]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::UO_Deref); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_Deref, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":91
 *     AddrOf = UnaryOperatorKinds[clang.exprs.UO_AddrOf]
 *     Deref = UnaryOperatorKinds[clang.exprs.UO_Deref]
 *     Plus = UnaryOperatorKinds[clang.exprs.UO_Plus]             # <<<<<<<<<<<<<<
 *     Minus = UnaryOperatorKinds[clang.exprs.UO_Minus]
 *     Not = UnaryOperatorKinds[clang.exprs.UO_Not]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(clang::UO_Plus); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_Plus, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":92
 *     Deref = UnaryOperatorKinds[clang.exprs.UO_Deref]
 *     Plus = UnaryOperatorKinds[clang.exprs.UO_Plus]
 *     Minus = UnaryOperatorKinds[clang.exprs.UO_Minus]             # <<<<<<<<<<<<<<
 *     Not = UnaryOperatorKinds[clang.exprs.UO_Not]
 *     LNot = UnaryOperatorKinds[clang.exprs.UO_LNot]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::UO_Minus); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_Minus, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":93
 *     Plus = UnaryOperatorKinds[clang.exprs.UO_Plus]
 *     Minus = UnaryOperatorKinds[clang.exprs.UO_Minus]
 *     Not = UnaryOperatorKinds[clang.exprs.UO_Not]             # <<<<<<<<<<<<<<
 *     LNot = UnaryOperatorKinds[clang.exprs.UO_LNot]
 *     Real = UnaryOperatorKinds[clang.exprs.UO_Real]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(clang::UO_Not); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_Not, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":94
 *     Minus = UnaryOperatorKinds[clang.exprs.UO_Minus]
 *     Not = UnaryOperatorKinds[clang.exprs.UO_Not]
 *     LNot = UnaryOperatorKinds[clang.exprs.UO_LNot]             # <<<<<<<<<<<<<<
 *     Real = UnaryOperatorKinds[clang.exprs.UO_Real]
 *     Imag = UnaryOperatorKinds[clang.exprs.UO_Imag]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::UO_LNot); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_LNot, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":95
 *     Not = UnaryOperatorKinds[clang.exprs.UO_Not]
 *     LNot = UnaryOperatorKinds[clang.exprs.UO_LNot]
 *     Real = UnaryOperatorKinds[clang.exprs.UO_Real]             # <<<<<<<<<<<<<<
 *     Imag = UnaryOperatorKinds[clang.exprs.UO_Imag]
 *     Extension = UnaryOperatorKinds[clang.exprs.UO_Extension]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(clang::UO_Real); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_Real, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":96
 *     LNot = UnaryOperatorKinds[clang.exprs.UO_LNot]
 *     Real = UnaryOperatorKinds[clang.exprs.UO_Real]
 *     Imag = UnaryOperatorKinds[clang.exprs.UO_Imag]             # <<<<<<<<<<<<<<
 *     Extension = UnaryOperatorKinds[clang.exprs.UO_Extension]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(clang::UO_Imag); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_Imag, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "/home/sztomi/projects/cmonster/src/cmonster/python/ast/ast.exprs.pxi":97
 *     Real = UnaryOperatorKinds[clang.exprs.UO_Real]
 *     Imag = UnaryOperatorKinds[clang.exprs.UO_Imag]
 *     Extension = UnaryOperatorKinds[clang.exprs.UO_Extension]             # <<<<<<<<<<<<<<
 * 
 *     property opcode:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnaryOperatorKinds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(clang::UO_Extension); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator->tp_dict, __pyx_n_s_Extension, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8cmonster_13_cmonster_ast_UnaryOperator);

  /* "src/cmonster/python/ast/ast.pyx":1
 * # vim: set filetype=pyrex:             # <<<<<<<<<<<<<<
 * 
 * # Copyright (c) 2011 Andrew Wilkins <axwalk@gmail.com>
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    __Pyx_AddTraceback("init cmonster._cmonster_ast", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cmonster._cmonster_ast");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        if (default_value == Py_None)
            default_value = NULL;
        value = PyObject_CallMethodObjArgs(
            d, __pyx_n_s_get, key, default_value, NULL);
    }
#endif
    return value;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL)
        value = Py_None; /* Mark as deleted */
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    Py_DECREF(res);
    return 0;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED /* < Py2.5 */
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {__Pyx_NAMESTR("__reduce__"), (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    op->func_weakreflist = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (m->func_weakreflist != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return PyMethod_New(func,
                            type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("cython_function_or_method"), /*tp_name*/
    sizeof(__pyx_CyFunctionObject),   /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_CyFunction_dealloc, /*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    (reprfunc) __Pyx_CyFunction_repr,   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    __Pyx_CyFunction_Call,              /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_CyFunction_traverse,   /*tp_traverse*/
    (inquiry) __Pyx_CyFunction_clear,   /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_CyFunctionObject, func_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    0,                                  /*tp_iternext*/
    __pyx_CyFunction_methods,           /*tp_methods*/
    __pyx_CyFunction_members,           /*tp_members*/
    __pyx_CyFunction_getsets,           /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    __Pyx_CyFunction_descr_get,         /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    offsetof(__pyx_CyFunctionObject, func_dict),/*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
    0,                                  /*tp_del*/
#if PY_VERSION_HEX >= 0x02060000
    0,                                  /*tp_version_tag*/
#endif
#if PY_VERSION_HEX >= 0x030400a1
    0,                                  /*tp_finalize*/
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static PyObject *__Pyx_Generator_Next(PyObject *self);
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Generator_Close(PyObject *self);
static PyObject *__Pyx_Generator_Throw(PyObject *gen, PyObject *args);
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (unlikely(et != PyExc_StopIteration) &&
            unlikely(!PyErr_GivenExceptionMatches(et, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (likely(!ev) || !PyObject_IsInstance(ev, PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_IsInstance(ev, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = PyObject_GetAttr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PyObject_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Generator_ExceptionClear(__pyx_GeneratorObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Generator_CheckRunning(__pyx_GeneratorObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_SendEx(__pyx_GeneratorObject *self, PyObject *value) {
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        /* Generators always return to their most recent caller, not
         * necessarily their creator. */
        if (self->exc_traceback) {
            PyThreadState *tstate = PyThreadState_GET();
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        /* Don't keep the reference to f_back any longer than necessary.  It
         * may keep a chain of frames alive or it could create a reference
         * cycle. */
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_FinishDelegation(__pyx_GeneratorObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Generator_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Generator_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Send(yf, value);
        } else {
            if (value == Py_None)
                ret = PyIter_Next(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, value);
}
static int __Pyx_Generator_CloseIter(__pyx_GeneratorObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Generator_Close(yf);
        if (!retval)
            return -1;
    } else {
        PyObject *meth;
        gen->is_running = 1;
        meth = PyObject_GetAttr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Close(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Generator_CloseIter(gen, yf);
        __Pyx_Generator_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
#if PY_VERSION_HEX < 0x02050000
        PyErr_SetNone(PyExc_StopIteration);
#else
        PyErr_SetNone(PyExc_GeneratorExit);
#endif
    retval = __Pyx_Generator_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
#if PY_VERSION_HEX >= 0x02050000
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
#endif
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();      /* ignore these errors */
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Generator_Throw(PyObject *self, PyObject *args) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
#if PY_VERSION_HEX >= 0x02050000
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Generator_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Generator_Undelegate(gen);
            if (err < 0)
                return __Pyx_Generator_SendEx(gen, NULL);
            goto throw_here;
        }
#endif
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Throw(yf, args);
        } else {
            PyObject *meth = PyObject_GetAttr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Generator_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Generator_FinishDelegation(gen);
        }
        return ret;
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Generator_SendEx(gen, NULL);
}
static int __Pyx_Generator_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Generator_clear(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    return 0;
}
static void __Pyx_Generator_dealloc(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
            return;                     /* resurrected.  :( */
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Generator_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Generator_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Generator_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    /* Undo the temporary resurrection; can't use DECREF here, it would
     * cause a recursive call.
     */
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0)
        return; /* this is the normal path out */
    /* close() resurrected it!  Make it look like the original Py_DECREF
     * never happened.
     */
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    /* If Py_REF_DEBUG, _Py_NewReference bumped _Py_RefTotal, so
     * we need to undo that. */
    _Py_DEC_REFTOTAL;
#endif
    /* If Py_TRACE_REFS, _Py_NewReference re-added self to the object
     * chain, so no more to do there.
     * If COUNT_ALLOCS, the original decref bumped tp_frees, and
     * _Py_NewReference bumped tp_allocs:  both of those need to be
     * undone.
     */
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running",
#if PY_VERSION_HEX >= 0x02060000
     T_BOOL,
#else
     T_BYTE,
#endif
     offsetof(__pyx_GeneratorObject, is_running),
     READONLY,
     NULL},
    {0, 0, 0, 0, 0}
};
static PyMethodDef __pyx_Generator_methods[] = {
    {__Pyx_NAMESTR("send"), (PyCFunction) __Pyx_Generator_Send, METH_O, 0},
    {__Pyx_NAMESTR("throw"), (PyCFunction) __Pyx_Generator_Throw, METH_VARARGS, 0},
    {__Pyx_NAMESTR("close"), (PyCFunction) __Pyx_Generator_Close, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("generator"),         /*tp_name*/
    sizeof(__pyx_GeneratorObject),      /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_Generator_dealloc,/*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    0,                                   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    0,                                  /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_Generator_traverse,   /*tp_traverse*/
    0,                                  /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_GeneratorObject, gi_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    (iternextfunc) __Pyx_Generator_Next, /*tp_iternext*/
    __pyx_Generator_methods,            /*tp_methods*/
    __pyx_Generator_memberlist,         /*tp_members*/
    0,                                  /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    0,                                  /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    0,                                  /*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
#if PY_VERSION_HEX >= 0x030400a1
    0,                                  /*tp_del*/
#else
    __Pyx_Generator_del,                /*tp_del*/
#endif
#if PY_VERSION_HEX >= 0x02060000
    0,                                  /*tp_version_tag*/
#endif
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Generator_del,                /*tp_finalize*/
#endif
};
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure) {
    __pyx_GeneratorObject *gen =
        PyObject_GC_New(__pyx_GeneratorObject, &__pyx_GeneratorType_type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    PyObject_GC_Track(gen);
    return gen;
}
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (__pyx_GeneratorType == NULL) {
        return -1;
    }
    return 0;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
